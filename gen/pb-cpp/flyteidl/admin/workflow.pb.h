// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/workflow.proto

#ifndef PROTOBUF_flyteidl_2fadmin_2fworkflow_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fadmin_2fworkflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/compiler.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/workflow.pb.h"
#include "flyteidl/admin/common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fadmin_2fworkflow_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsWorkflowCreateRequestImpl();
void InitDefaultsWorkflowCreateRequest();
void InitDefaultsWorkflowCreateResponseImpl();
void InitDefaultsWorkflowCreateResponse();
void InitDefaultsWorkflowImpl();
void InitDefaultsWorkflow();
void InitDefaultsWorkflowListImpl();
void InitDefaultsWorkflowList();
void InitDefaultsWorkflowSpecImpl();
void InitDefaultsWorkflowSpec();
void InitDefaultsWorkflowClosureImpl();
void InitDefaultsWorkflowClosure();
inline void InitDefaults() {
  InitDefaultsWorkflowCreateRequest();
  InitDefaultsWorkflowCreateResponse();
  InitDefaultsWorkflow();
  InitDefaultsWorkflowList();
  InitDefaultsWorkflowSpec();
  InitDefaultsWorkflowClosure();
}
}  // namespace protobuf_flyteidl_2fadmin_2fworkflow_2eproto
namespace flyteidl {
namespace admin {
class Workflow;
class WorkflowDefaultTypeInternal;
extern WorkflowDefaultTypeInternal _Workflow_default_instance_;
class WorkflowClosure;
class WorkflowClosureDefaultTypeInternal;
extern WorkflowClosureDefaultTypeInternal _WorkflowClosure_default_instance_;
class WorkflowCreateRequest;
class WorkflowCreateRequestDefaultTypeInternal;
extern WorkflowCreateRequestDefaultTypeInternal _WorkflowCreateRequest_default_instance_;
class WorkflowCreateResponse;
class WorkflowCreateResponseDefaultTypeInternal;
extern WorkflowCreateResponseDefaultTypeInternal _WorkflowCreateResponse_default_instance_;
class WorkflowList;
class WorkflowListDefaultTypeInternal;
extern WorkflowListDefaultTypeInternal _WorkflowList_default_instance_;
class WorkflowSpec;
class WorkflowSpecDefaultTypeInternal;
extern WorkflowSpecDefaultTypeInternal _WorkflowSpec_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace flyteidl {
namespace admin {

// ===================================================================

class WorkflowCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowCreateRequest) */ {
 public:
  WorkflowCreateRequest();
  virtual ~WorkflowCreateRequest();

  WorkflowCreateRequest(const WorkflowCreateRequest& from);

  inline WorkflowCreateRequest& operator=(const WorkflowCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowCreateRequest(WorkflowCreateRequest&& from) noexcept
    : WorkflowCreateRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowCreateRequest& operator=(WorkflowCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowCreateRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowCreateRequest*>(
               &_WorkflowCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WorkflowCreateRequest* other);
  friend void swap(WorkflowCreateRequest& a, WorkflowCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowCreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowCreateRequest& from);
  void MergeFrom(const WorkflowCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.WorkflowSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::admin::WorkflowSpec& spec() const;
  ::flyteidl::admin::WorkflowSpec* release_spec();
  ::flyteidl::admin::WorkflowSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::WorkflowSpec* spec);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::WorkflowSpec* spec_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowCreateRequestImpl();
};
// -------------------------------------------------------------------

class WorkflowCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowCreateResponse) */ {
 public:
  WorkflowCreateResponse();
  virtual ~WorkflowCreateResponse();

  WorkflowCreateResponse(const WorkflowCreateResponse& from);

  inline WorkflowCreateResponse& operator=(const WorkflowCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowCreateResponse(WorkflowCreateResponse&& from) noexcept
    : WorkflowCreateResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowCreateResponse& operator=(WorkflowCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowCreateResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowCreateResponse*>(
               &_WorkflowCreateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WorkflowCreateResponse* other);
  friend void swap(WorkflowCreateResponse& a, WorkflowCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowCreateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowCreateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowCreateResponse& from);
  void MergeFrom(const WorkflowCreateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowCreateResponseImpl();
};
// -------------------------------------------------------------------

class Workflow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Workflow) */ {
 public:
  Workflow();
  virtual ~Workflow();

  Workflow(const Workflow& from);

  inline Workflow& operator=(const Workflow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Workflow(Workflow&& from) noexcept
    : Workflow() {
    *this = ::std::move(from);
  }

  inline Workflow& operator=(Workflow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Workflow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Workflow* internal_default_instance() {
    return reinterpret_cast<const Workflow*>(
               &_Workflow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Workflow* other);
  friend void swap(Workflow& a, Workflow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Workflow* New() const PROTOBUF_FINAL { return New(NULL); }

  Workflow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Workflow& from);
  void MergeFrom(const Workflow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Workflow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.WorkflowClosure closure = 2;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 2;
  const ::flyteidl::admin::WorkflowClosure& closure() const;
  ::flyteidl::admin::WorkflowClosure* release_closure();
  ::flyteidl::admin::WorkflowClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::WorkflowClosure* closure);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Workflow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::WorkflowClosure* closure_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowImpl();
};
// -------------------------------------------------------------------

class WorkflowList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowList) */ {
 public:
  WorkflowList();
  virtual ~WorkflowList();

  WorkflowList(const WorkflowList& from);

  inline WorkflowList& operator=(const WorkflowList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowList(WorkflowList&& from) noexcept
    : WorkflowList() {
    *this = ::std::move(from);
  }

  inline WorkflowList& operator=(WorkflowList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowList* internal_default_instance() {
    return reinterpret_cast<const WorkflowList*>(
               &_WorkflowList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WorkflowList* other);
  friend void swap(WorkflowList& a, WorkflowList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowList* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowList& from);
  void MergeFrom(const WorkflowList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Workflow workflows = 1;
  int workflows_size() const;
  void clear_workflows();
  static const int kWorkflowsFieldNumber = 1;
  const ::flyteidl::admin::Workflow& workflows(int index) const;
  ::flyteidl::admin::Workflow* mutable_workflows(int index);
  ::flyteidl::admin::Workflow* add_workflows();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Workflow >*
      mutable_workflows();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Workflow >&
      workflows() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Workflow > workflows_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowListImpl();
};
// -------------------------------------------------------------------

class WorkflowSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowSpec) */ {
 public:
  WorkflowSpec();
  virtual ~WorkflowSpec();

  WorkflowSpec(const WorkflowSpec& from);

  inline WorkflowSpec& operator=(const WorkflowSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowSpec(WorkflowSpec&& from) noexcept
    : WorkflowSpec() {
    *this = ::std::move(from);
  }

  inline WorkflowSpec& operator=(WorkflowSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowSpec* internal_default_instance() {
    return reinterpret_cast<const WorkflowSpec*>(
               &_WorkflowSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WorkflowSpec* other);
  friend void swap(WorkflowSpec& a, WorkflowSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowSpec& from);
  void MergeFrom(const WorkflowSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowTemplate template = 1;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 1;
  const ::flyteidl::core::WorkflowTemplate& template_() const;
  ::flyteidl::core::WorkflowTemplate* release_template_();
  ::flyteidl::core::WorkflowTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowTemplate* template__;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowSpecImpl();
};
// -------------------------------------------------------------------

class WorkflowClosure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowClosure) */ {
 public:
  WorkflowClosure();
  virtual ~WorkflowClosure();

  WorkflowClosure(const WorkflowClosure& from);

  inline WorkflowClosure& operator=(const WorkflowClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowClosure(WorkflowClosure&& from) noexcept
    : WorkflowClosure() {
    *this = ::std::move(from);
  }

  inline WorkflowClosure& operator=(WorkflowClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowClosure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowClosure* internal_default_instance() {
    return reinterpret_cast<const WorkflowClosure*>(
               &_WorkflowClosure_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WorkflowClosure* other);
  friend void swap(WorkflowClosure& a, WorkflowClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowClosure* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowClosure* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowClosure& from);
  void MergeFrom(const WorkflowClosure& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  bool has_compiled_workflow() const;
  void clear_compiled_workflow();
  static const int kCompiledWorkflowFieldNumber = 1;
  const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow() const;
  ::flyteidl::core::CompiledWorkflowClosure* release_compiled_workflow();
  ::flyteidl::core::CompiledWorkflowClosure* mutable_compiled_workflow();
  void set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow);

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowClosure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow_;
  ::google::protobuf::Timestamp* created_at_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowClosureImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowCreateRequest

// .flyteidl.core.Identifier id = 1;
inline bool WorkflowCreateRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::Identifier& WorkflowCreateRequest::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowCreateRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowCreateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowCreateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowCreateRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowCreateRequest.id)
  return id_;
}
inline void WorkflowCreateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowCreateRequest.id)
}

// .flyteidl.admin.WorkflowSpec spec = 2;
inline bool WorkflowCreateRequest::has_spec() const {
  return this != internal_default_instance() && spec_ != NULL;
}
inline void WorkflowCreateRequest::clear_spec() {
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
}
inline const ::flyteidl::admin::WorkflowSpec& WorkflowCreateRequest::spec() const {
  const ::flyteidl::admin::WorkflowSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowCreateRequest.spec)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::WorkflowSpec*>(
      &::flyteidl::admin::_WorkflowSpec_default_instance_);
}
inline ::flyteidl::admin::WorkflowSpec* WorkflowCreateRequest::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowCreateRequest.spec)
  
  ::flyteidl::admin::WorkflowSpec* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline ::flyteidl::admin::WorkflowSpec* WorkflowCreateRequest::mutable_spec() {
  
  if (spec_ == NULL) {
    spec_ = new ::flyteidl::admin::WorkflowSpec;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowCreateRequest.spec)
  return spec_;
}
inline void WorkflowCreateRequest::set_allocated_spec(::flyteidl::admin::WorkflowSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowCreateRequest.spec)
}

// -------------------------------------------------------------------

// WorkflowCreateResponse

// -------------------------------------------------------------------

// Workflow

// .flyteidl.core.Identifier id = 1;
inline bool Workflow::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::Identifier& Workflow::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Workflow.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* Workflow::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Workflow.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* Workflow::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Workflow.id)
  return id_;
}
inline void Workflow::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Workflow.id)
}

// .flyteidl.admin.WorkflowClosure closure = 2;
inline bool Workflow::has_closure() const {
  return this != internal_default_instance() && closure_ != NULL;
}
inline void Workflow::clear_closure() {
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
}
inline const ::flyteidl::admin::WorkflowClosure& Workflow::closure() const {
  const ::flyteidl::admin::WorkflowClosure* p = closure_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Workflow.closure)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::WorkflowClosure*>(
      &::flyteidl::admin::_WorkflowClosure_default_instance_);
}
inline ::flyteidl::admin::WorkflowClosure* Workflow::release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Workflow.closure)
  
  ::flyteidl::admin::WorkflowClosure* temp = closure_;
  closure_ = NULL;
  return temp;
}
inline ::flyteidl::admin::WorkflowClosure* Workflow::mutable_closure() {
  
  if (closure_ == NULL) {
    closure_ = new ::flyteidl::admin::WorkflowClosure;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Workflow.closure)
  return closure_;
}
inline void Workflow::set_allocated_closure(::flyteidl::admin::WorkflowClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Workflow.closure)
}

// -------------------------------------------------------------------

// WorkflowList

// repeated .flyteidl.admin.Workflow workflows = 1;
inline int WorkflowList::workflows_size() const {
  return workflows_.size();
}
inline void WorkflowList::clear_workflows() {
  workflows_.Clear();
}
inline const ::flyteidl::admin::Workflow& WorkflowList::workflows(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowList.workflows)
  return workflows_.Get(index);
}
inline ::flyteidl::admin::Workflow* WorkflowList::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowList.workflows)
  return workflows_.Mutable(index);
}
inline ::flyteidl::admin::Workflow* WorkflowList::add_workflows() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.WorkflowList.workflows)
  return workflows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Workflow >*
WorkflowList::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.WorkflowList.workflows)
  return &workflows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Workflow >&
WorkflowList::workflows() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.WorkflowList.workflows)
  return workflows_;
}

// string token = 2;
inline void WorkflowList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowList.token)
  return token_.GetNoArena();
}
inline void WorkflowList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowList.token)
}
#if LANG_CXX11
inline void WorkflowList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WorkflowList.token)
}
#endif
inline void WorkflowList::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WorkflowList.token)
}
inline void WorkflowList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WorkflowList.token)
}
inline ::std::string* WorkflowList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowList::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowList.token)
}

// -------------------------------------------------------------------

// WorkflowSpec

// .flyteidl.core.WorkflowTemplate template = 1;
inline bool WorkflowSpec::has_template_() const {
  return this != internal_default_instance() && template__ != NULL;
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowSpec::template_() const {
  const ::flyteidl::core::WorkflowTemplate* p = template__;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowSpec.template)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowTemplate*>(
      &::flyteidl::core::_WorkflowTemplate_default_instance_);
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowSpec.template)
  
  ::flyteidl::core::WorkflowTemplate* temp = template__;
  template__ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::mutable_template_() {
  
  if (template__ == NULL) {
    template__ = new ::flyteidl::core::WorkflowTemplate;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowSpec.template)
  return template__;
}
inline void WorkflowSpec::set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(template__);
  }
  if (template_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      template_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowSpec.template)
}

// -------------------------------------------------------------------

// WorkflowClosure

// .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
inline bool WorkflowClosure::has_compiled_workflow() const {
  return this != internal_default_instance() && compiled_workflow_ != NULL;
}
inline const ::flyteidl::core::CompiledWorkflowClosure& WorkflowClosure::compiled_workflow() const {
  const ::flyteidl::core::CompiledWorkflowClosure* p = compiled_workflow_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowClosure.compiled_workflow)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::CompiledWorkflowClosure*>(
      &::flyteidl::core::_CompiledWorkflowClosure_default_instance_);
}
inline ::flyteidl::core::CompiledWorkflowClosure* WorkflowClosure::release_compiled_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowClosure.compiled_workflow)
  
  ::flyteidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = NULL;
  return temp;
}
inline ::flyteidl::core::CompiledWorkflowClosure* WorkflowClosure::mutable_compiled_workflow() {
  
  if (compiled_workflow_ == NULL) {
    compiled_workflow_ = new ::flyteidl::core::CompiledWorkflowClosure;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowClosure.compiled_workflow)
  return compiled_workflow_;
}
inline void WorkflowClosure::set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(compiled_workflow_);
  }
  if (compiled_workflow) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compiled_workflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compiled_workflow, submessage_arena);
    }
    
  } else {
    
  }
  compiled_workflow_ = compiled_workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowClosure.compiled_workflow)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool WorkflowClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& WorkflowClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowClosure.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* WorkflowClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* WorkflowClosure::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowClosure.created_at)
  return created_at_;
}
inline void WorkflowClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowClosure.created_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fadmin_2fworkflow_2eproto__INCLUDED
