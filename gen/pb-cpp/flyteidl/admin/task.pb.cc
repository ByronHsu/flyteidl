// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task.proto

#include "flyteidl/admin/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace admin {
class TaskCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskCreateRequest>
      _instance;
} _TaskCreateRequest_default_instance_;
class TaskCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskCreateResponse>
      _instance;
} _TaskCreateResponse_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task>
      _instance;
} _Task_default_instance_;
class TaskListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskList>
      _instance;
} _TaskList_default_instance_;
class TaskSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskSpec>
      _instance;
} _TaskSpec_default_instance_;
class TaskClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskClosure>
      _instance;
} _TaskClosure_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace protobuf_flyteidl_2fadmin_2ftask_2eproto {
void InitDefaultsTaskCreateRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskSpec();
  {
    void* ptr = &::flyteidl::admin::_TaskCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskCreateRequest::InitAsDefaultInstance();
}

void InitDefaultsTaskCreateRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskCreateRequestImpl);
}

void InitDefaultsTaskCreateResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::admin::_TaskCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::TaskCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskCreateResponse::InitAsDefaultInstance();
}

void InitDefaultsTaskCreateResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskCreateResponseImpl);
}

void InitDefaultsTaskImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskClosure();
  {
    void* ptr = &::flyteidl::admin::_Task_default_instance_;
    new (ptr) ::flyteidl::admin::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Task::InitAsDefaultInstance();
}

void InitDefaultsTask() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskImpl);
}

void InitDefaultsTaskListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTask();
  {
    void* ptr = &::flyteidl::admin::_TaskList_default_instance_;
    new (ptr) ::flyteidl::admin::TaskList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskList::InitAsDefaultInstance();
}

void InitDefaultsTaskList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskListImpl);
}

void InitDefaultsTaskSpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2ftasks_2eproto::InitDefaultsTaskTemplate();
  {
    void* ptr = &::flyteidl::admin::_TaskSpec_default_instance_;
    new (ptr) ::flyteidl::admin::TaskSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskSpec::InitAsDefaultInstance();
}

void InitDefaultsTaskSpec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskSpecImpl);
}

void InitDefaultsTaskClosureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledTask();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::flyteidl::admin::_TaskClosure_default_instance_;
    new (ptr) ::flyteidl::admin::TaskClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskClosure::InitAsDefaultInstance();
}

void InitDefaultsTaskClosure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskClosureImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, spec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Task, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Task, closure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskList, tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskList, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskSpec, template__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskClosure, compiled_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskClosure, created_at_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::TaskCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::TaskCreateResponse)},
  { 12, -1, sizeof(::flyteidl::admin::Task)},
  { 19, -1, sizeof(::flyteidl::admin::TaskList)},
  { 26, -1, sizeof(::flyteidl::admin::TaskSpec)},
  { 32, -1, sizeof(::flyteidl::admin::TaskClosure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskClosure_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/admin/task.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031flyteidl/admin/task.proto\022\016flyteidl.ad"
      "min\032\036flyteidl/core/identifier.proto\032\031fly"
      "teidl/core/tasks.proto\032\034flyteidl/core/co"
      "mpiler.proto\032\037google/protobuf/timestamp."
      "proto\"b\n\021TaskCreateRequest\022%\n\002id\030\001 \001(\0132\031"
      ".flyteidl.core.Identifier\022&\n\004spec\030\002 \001(\0132"
      "\030.flyteidl.admin.TaskSpec\"\024\n\022TaskCreateR"
      "esponse\"[\n\004Task\022%\n\002id\030\001 \001(\0132\031.flyteidl.c"
      "ore.Identifier\022,\n\007closure\030\002 \001(\0132\033.flytei"
      "dl.admin.TaskClosure\">\n\010TaskList\022#\n\005task"
      "s\030\001 \003(\0132\024.flyteidl.admin.Task\022\r\n\005token\030\002"
      " \001(\t\"9\n\010TaskSpec\022-\n\010template\030\001 \001(\0132\033.fly"
      "teidl.core.TaskTemplate\"q\n\013TaskClosure\0222"
      "\n\rcompiled_task\030\001 \001(\0132\033.flyteidl.core.Co"
      "mpiledTask\022.\n\ncreated_at\030\002 \001(\0132\032.google."
      "protobuf.TimestampB3Z1github.com/lyft/fl"
      "yteidl/gen/pb-go/flyteidl/adminb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 679);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/admin/task.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2ftasks_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fadmin_2ftask_2eproto
namespace flyteidl {
namespace admin {

// ===================================================================

void TaskCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_TaskCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::TaskSpec*>(
      ::flyteidl::admin::TaskSpec::internal_default_instance());
}
void TaskCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskCreateRequest::kIdFieldNumber;
const int TaskCreateRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskCreateRequest::TaskCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskCreateRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskCreateRequest)
}
TaskCreateRequest::TaskCreateRequest(const TaskCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::TaskSpec(*from.spec_);
  } else {
    spec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskCreateRequest)
}

void TaskCreateRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spec_));
  _cached_size_ = 0;
}

TaskCreateRequest::~TaskCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskCreateRequest)
  SharedDtor();
}

void TaskCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void TaskCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCreateRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskCreateRequest& TaskCreateRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskCreateRequest();
  return *internal_default_instance();
}

TaskCreateRequest* TaskCreateRequest::New(::google::protobuf::Arena* arena) const {
  TaskCreateRequest* n = new TaskCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.TaskSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskCreateRequest)
  return false;
#undef DO_
}

void TaskCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.TaskSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spec_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskCreateRequest)
}

::google::protobuf::uint8* TaskCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.TaskSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->spec_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskCreateRequest)
  return target;
}

size_t TaskCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskCreateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.TaskSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskCreateRequest)
    MergeFrom(*source);
  }
}

void TaskCreateRequest::MergeFrom(const TaskCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::TaskSpec::MergeFrom(from.spec());
  }
}

void TaskCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCreateRequest::CopyFrom(const TaskCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCreateRequest::IsInitialized() const {
  return true;
}

void TaskCreateRequest::Swap(TaskCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskCreateRequest::InternalSwap(TaskCreateRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(spec_, other->spec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskCreateRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskCreateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskCreateResponse::TaskCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskCreateResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskCreateResponse)
}
TaskCreateResponse::TaskCreateResponse(const TaskCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskCreateResponse)
}

void TaskCreateResponse::SharedCtor() {
  _cached_size_ = 0;
}

TaskCreateResponse::~TaskCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskCreateResponse)
  SharedDtor();
}

void TaskCreateResponse::SharedDtor() {
}

void TaskCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCreateResponse::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskCreateResponse& TaskCreateResponse::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskCreateResponse();
  return *internal_default_instance();
}

TaskCreateResponse* TaskCreateResponse::New(::google::protobuf::Arena* arena) const {
  TaskCreateResponse* n = new TaskCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TaskCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskCreateResponse)
  return false;
#undef DO_
}

void TaskCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskCreateResponse)
}

::google::protobuf::uint8* TaskCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskCreateResponse)
  return target;
}

size_t TaskCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskCreateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskCreateResponse)
    MergeFrom(*source);
  }
}

void TaskCreateResponse::MergeFrom(const TaskCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCreateResponse::CopyFrom(const TaskCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCreateResponse::IsInitialized() const {
  return true;
}

void TaskCreateResponse::Swap(TaskCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskCreateResponse::InternalSwap(TaskCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskCreateResponse::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::flyteidl::admin::_Task_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_Task_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::TaskClosure*>(
      ::flyteidl::admin::TaskClosure::internal_default_instance());
}
void Task::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kIdFieldNumber;
const int Task::kClosureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTask();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::TaskClosure(*from.closure_);
  } else {
    closure_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Task)
}

void Task::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
  _cached_size_ = 0;
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task& Task::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTask();
  return *internal_default_instance();
}

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
  _internal_metadata_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.TaskClosure closure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.TaskClosure closure = 2;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->closure_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.TaskClosure closure = 2;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->closure_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Task)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.TaskClosure closure = 2;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::TaskClosure::MergeFrom(from.closure());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(closure_, other->closure_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskList::kTasksFieldNumber;
const int TaskList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskList::TaskList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskList)
}
TaskList::TaskList(const TaskList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tasks_(from.tasks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskList)
}

void TaskList::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TaskList::~TaskList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskList)
  SharedDtor();
}

void TaskList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskList::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskList& TaskList::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskList();
  return *internal_default_instance();
}

TaskList* TaskList::New(::google::protobuf::Arena* arena) const {
  TaskList* n = new TaskList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Task tasks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskList)
  return false;
#undef DO_
}

void TaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Task tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(static_cast<int>(i)), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskList)
}

::google::protobuf::uint8* TaskList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Task tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskList)
  return target;
}

size_t TaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.admin.Task tasks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskList)
    MergeFrom(*source);
  }
}

void TaskList::MergeFrom(const TaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void TaskList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskList::CopyFrom(const TaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskList::IsInitialized() const {
  return true;
}

void TaskList::Swap(TaskList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskList::InternalSwap(TaskList* other) {
  using std::swap;
  tasks_.InternalSwap(&other->tasks_);
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskList::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskSpec_default_instance_._instance.get_mutable()->template__ = const_cast< ::flyteidl::core::TaskTemplate*>(
      ::flyteidl::core::TaskTemplate::internal_default_instance());
}
void TaskSpec::clear_template_() {
  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskSpec::kTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskSpec::TaskSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskSpec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskSpec)
}
TaskSpec::TaskSpec(const TaskSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_template_()) {
    template__ = new ::flyteidl::core::TaskTemplate(*from.template__);
  } else {
    template__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskSpec)
}

void TaskSpec::SharedCtor() {
  template__ = NULL;
  _cached_size_ = 0;
}

TaskSpec::~TaskSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskSpec)
  SharedDtor();
}

void TaskSpec::SharedDtor() {
  if (this != internal_default_instance()) delete template__;
}

void TaskSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskSpec::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskSpec& TaskSpec::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskSpec();
  return *internal_default_instance();
}

TaskSpec* TaskSpec::New(::google::protobuf::Arena* arena) const {
  TaskSpec* n = new TaskSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
  _internal_metadata_.Clear();
}

bool TaskSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskTemplate template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskSpec)
  return false;
#undef DO_
}

void TaskSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->template__, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskSpec)
}

::google::protobuf::uint8* TaskSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->template__, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskSpec)
  return target;
}

size_t TaskSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->template__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskSpec)
    MergeFrom(*source);
  }
}

void TaskSpec::MergeFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_template_()) {
    mutable_template_()->::flyteidl::core::TaskTemplate::MergeFrom(from.template_());
  }
}

void TaskSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSpec::CopyFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec::IsInitialized() const {
  return true;
}

void TaskSpec::Swap(TaskSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskSpec::InternalSwap(TaskSpec* other) {
  using std::swap;
  swap(template__, other->template__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskSpec::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskClosure_default_instance_._instance.get_mutable()->compiled_task_ = const_cast< ::flyteidl::core::CompiledTask*>(
      ::flyteidl::core::CompiledTask::internal_default_instance());
  ::flyteidl::admin::_TaskClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void TaskClosure::clear_compiled_task() {
  if (GetArenaNoVirtual() == NULL && compiled_task_ != NULL) {
    delete compiled_task_;
  }
  compiled_task_ = NULL;
}
void TaskClosure::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskClosure::kCompiledTaskFieldNumber;
const int TaskClosure::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskClosure::TaskClosure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskClosure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskClosure)
}
TaskClosure::TaskClosure(const TaskClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compiled_task()) {
    compiled_task_ = new ::flyteidl::core::CompiledTask(*from.compiled_task_);
  } else {
    compiled_task_ = NULL;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskClosure)
}

void TaskClosure::SharedCtor() {
  ::memset(&compiled_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&compiled_task_)) + sizeof(created_at_));
  _cached_size_ = 0;
}

TaskClosure::~TaskClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskClosure)
  SharedDtor();
}

void TaskClosure::SharedDtor() {
  if (this != internal_default_instance()) delete compiled_task_;
  if (this != internal_default_instance()) delete created_at_;
}

void TaskClosure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskClosure::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskClosure& TaskClosure::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskClosure();
  return *internal_default_instance();
}

TaskClosure* TaskClosure::New(::google::protobuf::Arena* arena) const {
  TaskClosure* n = new TaskClosure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && compiled_task_ != NULL) {
    delete compiled_task_;
  }
  compiled_task_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskClosure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.CompiledTask compiled_task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compiled_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskClosure)
  return false;
#undef DO_
}

void TaskClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledTask compiled_task = 1;
  if (this->has_compiled_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->compiled_task_, output);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->created_at_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskClosure)
}

::google::protobuf::uint8* TaskClosure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledTask compiled_task = 1;
  if (this->has_compiled_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->compiled_task_, deterministic, target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->created_at_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskClosure)
  return target;
}

size_t TaskClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskClosure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.CompiledTask compiled_task = 1;
  if (this->has_compiled_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->compiled_task_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->created_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskClosure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskClosure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskClosure)
    MergeFrom(*source);
  }
}

void TaskClosure::MergeFrom(const TaskClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compiled_task()) {
    mutable_compiled_task()->::flyteidl::core::CompiledTask::MergeFrom(from.compiled_task());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
}

void TaskClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskClosure::CopyFrom(const TaskClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskClosure::IsInitialized() const {
  return true;
}

void TaskClosure::Swap(TaskClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskClosure::InternalSwap(TaskClosure* other) {
  using std::swap;
  swap(compiled_task_, other->compiled_task_);
  swap(created_at_, other->created_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskClosure::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
