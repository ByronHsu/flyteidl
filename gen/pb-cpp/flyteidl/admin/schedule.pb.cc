// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/schedule.proto

#include "flyteidl/admin/schedule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace admin {
class FixedRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedRate>
      _instance;
} _FixedRate_default_instance_;
class ScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schedule>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr cron_expression_;
  const ::flyteidl::admin::FixedRate* rate_;
} _Schedule_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace protobuf_flyteidl_2fadmin_2fschedule_2eproto {
void InitDefaultsFixedRateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::admin::_FixedRate_default_instance_;
    new (ptr) ::flyteidl::admin::FixedRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FixedRate::InitAsDefaultInstance();
}

void InitDefaultsFixedRate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFixedRateImpl);
}

void InitDefaultsScheduleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2fschedule_2eproto::InitDefaultsFixedRate();
  {
    void* ptr = &::flyteidl::admin::_Schedule_default_instance_;
    new (ptr) ::flyteidl::admin::Schedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Schedule::InitAsDefaultInstance();
}

void InitDefaultsSchedule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsScheduleImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::FixedRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::FixedRate, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::FixedRate, unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Schedule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::ScheduleDefaultTypeInternal, cron_expression_),
  offsetof(::flyteidl::admin::ScheduleDefaultTypeInternal, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Schedule, kickoff_time_input_arg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Schedule, ScheduleExpression_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::FixedRate)},
  { 7, -1, sizeof(::flyteidl::admin::Schedule)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FixedRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Schedule_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/admin/schedule.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035flyteidl/admin/schedule.proto\022\016flyteid"
      "l.admin\"G\n\tFixedRate\022\r\n\005value\030\001 \001(\r\022+\n\004u"
      "nit\030\002 \001(\0162\035.flyteidl.admin.FixedRateUnit"
      "\"\206\001\n\010Schedule\022\031\n\017cron_expression\030\001 \001(\tH\000"
      "\022)\n\004rate\030\002 \001(\0132\031.flyteidl.admin.FixedRat"
      "eH\000\022\036\n\026kickoff_time_input_arg\030\003 \001(\tB\024\n\022S"
      "cheduleExpression*.\n\rFixedRateUnit\022\n\n\006MI"
      "NUTE\020\000\022\010\n\004HOUR\020\001\022\007\n\003DAY\020\002B3Z1github.com/"
      "lyft/flyteidl/gen/pb-go/flyteidl/adminb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/admin/schedule.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fadmin_2fschedule_2eproto
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* FixedRateUnit_descriptor() {
  protobuf_flyteidl_2fadmin_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flyteidl_2fadmin_2fschedule_2eproto::file_level_enum_descriptors[0];
}
bool FixedRateUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FixedRate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedRate::kValueFieldNumber;
const int FixedRate::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedRate::FixedRate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::InitDefaultsFixedRate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FixedRate)
}
FixedRate::FixedRate(const FixedRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FixedRate)
}

void FixedRate::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  _cached_size_ = 0;
}

FixedRate::~FixedRate() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FixedRate)
  SharedDtor();
}

void FixedRate::SharedDtor() {
}

void FixedRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedRate::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedRate& FixedRate::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::InitDefaultsFixedRate();
  return *internal_default_instance();
}

FixedRate* FixedRate::New(::google::protobuf::Arena* arena) const {
  FixedRate* n = new FixedRate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedRate::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FixedRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  _internal_metadata_.Clear();
}

bool FixedRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FixedRate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.FixedRateUnit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::flyteidl::admin::FixedRateUnit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FixedRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FixedRate)
  return false;
#undef DO_
}

void FixedRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FixedRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // .flyteidl.admin.FixedRateUnit unit = 2;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FixedRate)
}

::google::protobuf::uint8* FixedRate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FixedRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // .flyteidl.admin.FixedRateUnit unit = 2;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FixedRate)
  return target;
}

size_t FixedRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FixedRate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // .flyteidl.admin.FixedRateUnit unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FixedRate)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedRate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedRate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FixedRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FixedRate)
    MergeFrom(*source);
  }
}

void FixedRate::MergeFrom(const FixedRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FixedRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void FixedRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FixedRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedRate::CopyFrom(const FixedRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FixedRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedRate::IsInitialized() const {
  return true;
}

void FixedRate::Swap(FixedRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedRate::InternalSwap(FixedRate* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(unit_, other->unit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedRate::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Schedule::InitAsDefaultInstance() {
  ::flyteidl::admin::_Schedule_default_instance_.cron_expression_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_Schedule_default_instance_.rate_ = const_cast< ::flyteidl::admin::FixedRate*>(
      ::flyteidl::admin::FixedRate::internal_default_instance());
}
void Schedule::set_allocated_rate(::flyteidl::admin::FixedRate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ScheduleExpression();
  if (rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    set_has_rate();
    ScheduleExpression_.rate_ = rate;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.rate)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule::kCronExpressionFieldNumber;
const int Schedule::kRateFieldNumber;
const int Schedule::kKickoffTimeInputArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule::Schedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::InitDefaultsSchedule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kickoff_time_input_arg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kickoff_time_input_arg().size() > 0) {
    kickoff_time_input_arg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kickoff_time_input_arg_);
  }
  clear_has_ScheduleExpression();
  switch (from.ScheduleExpression_case()) {
    case kCronExpression: {
      set_cron_expression(from.cron_expression());
      break;
    }
    case kRate: {
      mutable_rate()->::flyteidl::admin::FixedRate::MergeFrom(from.rate());
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Schedule)
}

void Schedule::SharedCtor() {
  kickoff_time_input_arg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ScheduleExpression();
  _cached_size_ = 0;
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  kickoff_time_input_arg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_ScheduleExpression()) {
    clear_ScheduleExpression();
  }
}

void Schedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schedule& Schedule::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::InitDefaultsSchedule();
  return *internal_default_instance();
}

Schedule* Schedule::New(::google::protobuf::Arena* arena) const {
  Schedule* n = new Schedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Schedule::clear_ScheduleExpression() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.Schedule)
  switch (ScheduleExpression_case()) {
    case kCronExpression: {
      ScheduleExpression_.cron_expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRate: {
      delete ScheduleExpression_.rate_;
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCHEDULEEXPRESSION_NOT_SET;
}


void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kickoff_time_input_arg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_ScheduleExpression();
  _internal_metadata_.Clear();
}

bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Schedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cron_expression = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cron_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cron_expression().data(), static_cast<int>(this->cron_expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Schedule.cron_expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.FixedRate rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kickoff_time_input_arg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kickoff_time_input_arg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kickoff_time_input_arg().data(), static_cast<int>(this->kickoff_time_input_arg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Schedule.kickoff_time_input_arg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Schedule)
  return false;
#undef DO_
}

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cron_expression = 1;
  if (has_cron_expression()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cron_expression().data(), static_cast<int>(this->cron_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.cron_expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cron_expression(), output);
  }

  // .flyteidl.admin.FixedRate rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ScheduleExpression_.rate_, output);
  }

  // string kickoff_time_input_arg = 3;
  if (this->kickoff_time_input_arg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kickoff_time_input_arg().data(), static_cast<int>(this->kickoff_time_input_arg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.kickoff_time_input_arg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kickoff_time_input_arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Schedule)
}

::google::protobuf::uint8* Schedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cron_expression = 1;
  if (has_cron_expression()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cron_expression().data(), static_cast<int>(this->cron_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.cron_expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cron_expression(), target);
  }

  // .flyteidl.admin.FixedRate rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *ScheduleExpression_.rate_, deterministic, target);
  }

  // string kickoff_time_input_arg = 3;
  if (this->kickoff_time_input_arg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kickoff_time_input_arg().data(), static_cast<int>(this->kickoff_time_input_arg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.kickoff_time_input_arg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kickoff_time_input_arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Schedule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string kickoff_time_input_arg = 3;
  if (this->kickoff_time_input_arg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kickoff_time_input_arg());
  }

  switch (ScheduleExpression_case()) {
    // string cron_expression = 1;
    case kCronExpression: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cron_expression());
      break;
    }
    // .flyteidl.admin.FixedRate rate = 2;
    case kRate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ScheduleExpression_.rate_);
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Schedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kickoff_time_input_arg().size() > 0) {

    kickoff_time_input_arg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kickoff_time_input_arg_);
  }
  switch (from.ScheduleExpression_case()) {
    case kCronExpression: {
      set_cron_expression(from.cron_expression());
      break;
    }
    case kRate: {
      mutable_rate()->::flyteidl::admin::FixedRate::MergeFrom(from.rate());
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  kickoff_time_input_arg_.Swap(&other->kickoff_time_input_arg_);
  swap(ScheduleExpression_, other->ScheduleExpression_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fschedule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fschedule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
