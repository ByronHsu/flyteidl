// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task.proto

#ifndef PROTOBUF_flyteidl_2fadmin_2ftask_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fadmin_2ftask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/core/compiler.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fadmin_2ftask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTaskCreateRequestImpl();
void InitDefaultsTaskCreateRequest();
void InitDefaultsTaskCreateResponseImpl();
void InitDefaultsTaskCreateResponse();
void InitDefaultsTaskImpl();
void InitDefaultsTask();
void InitDefaultsTaskListImpl();
void InitDefaultsTaskList();
void InitDefaultsTaskSpecImpl();
void InitDefaultsTaskSpec();
void InitDefaultsTaskClosureImpl();
void InitDefaultsTaskClosure();
inline void InitDefaults() {
  InitDefaultsTaskCreateRequest();
  InitDefaultsTaskCreateResponse();
  InitDefaultsTask();
  InitDefaultsTaskList();
  InitDefaultsTaskSpec();
  InitDefaultsTaskClosure();
}
}  // namespace protobuf_flyteidl_2fadmin_2ftask_2eproto
namespace flyteidl {
namespace admin {
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskClosure;
class TaskClosureDefaultTypeInternal;
extern TaskClosureDefaultTypeInternal _TaskClosure_default_instance_;
class TaskCreateRequest;
class TaskCreateRequestDefaultTypeInternal;
extern TaskCreateRequestDefaultTypeInternal _TaskCreateRequest_default_instance_;
class TaskCreateResponse;
class TaskCreateResponseDefaultTypeInternal;
extern TaskCreateResponseDefaultTypeInternal _TaskCreateResponse_default_instance_;
class TaskList;
class TaskListDefaultTypeInternal;
extern TaskListDefaultTypeInternal _TaskList_default_instance_;
class TaskSpec;
class TaskSpecDefaultTypeInternal;
extern TaskSpecDefaultTypeInternal _TaskSpec_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace flyteidl {
namespace admin {

// ===================================================================

class TaskCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskCreateRequest) */ {
 public:
  TaskCreateRequest();
  virtual ~TaskCreateRequest();

  TaskCreateRequest(const TaskCreateRequest& from);

  inline TaskCreateRequest& operator=(const TaskCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCreateRequest(TaskCreateRequest&& from) noexcept
    : TaskCreateRequest() {
    *this = ::std::move(from);
  }

  inline TaskCreateRequest& operator=(TaskCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCreateRequest* internal_default_instance() {
    return reinterpret_cast<const TaskCreateRequest*>(
               &_TaskCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TaskCreateRequest* other);
  friend void swap(TaskCreateRequest& a, TaskCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskCreateRequest& from);
  void MergeFrom(const TaskCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.TaskSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::admin::TaskSpec& spec() const;
  ::flyteidl::admin::TaskSpec* release_spec();
  ::flyteidl::admin::TaskSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::TaskSpec* spec);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::TaskSpec* spec_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2ftask_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskCreateRequestImpl();
};
// -------------------------------------------------------------------

class TaskCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskCreateResponse) */ {
 public:
  TaskCreateResponse();
  virtual ~TaskCreateResponse();

  TaskCreateResponse(const TaskCreateResponse& from);

  inline TaskCreateResponse& operator=(const TaskCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCreateResponse(TaskCreateResponse&& from) noexcept
    : TaskCreateResponse() {
    *this = ::std::move(from);
  }

  inline TaskCreateResponse& operator=(TaskCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCreateResponse* internal_default_instance() {
    return reinterpret_cast<const TaskCreateResponse*>(
               &_TaskCreateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TaskCreateResponse* other);
  friend void swap(TaskCreateResponse& a, TaskCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCreateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskCreateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskCreateResponse& from);
  void MergeFrom(const TaskCreateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2ftask_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskCreateResponseImpl();
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const PROTOBUF_FINAL { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.TaskClosure closure = 2;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 2;
  const ::flyteidl::admin::TaskClosure& closure() const;
  ::flyteidl::admin::TaskClosure* release_closure();
  ::flyteidl::admin::TaskClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::TaskClosure* closure);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::TaskClosure* closure_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2ftask_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskImpl();
};
// -------------------------------------------------------------------

class TaskList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskList) */ {
 public:
  TaskList();
  virtual ~TaskList();

  TaskList(const TaskList& from);

  inline TaskList& operator=(const TaskList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskList(TaskList&& from) noexcept
    : TaskList() {
    *this = ::std::move(from);
  }

  inline TaskList& operator=(TaskList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskList* internal_default_instance() {
    return reinterpret_cast<const TaskList*>(
               &_TaskList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TaskList* other);
  friend void swap(TaskList& a, TaskList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskList* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskList& from);
  void MergeFrom(const TaskList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Task tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  const ::flyteidl::admin::Task& tasks(int index) const;
  ::flyteidl::admin::Task* mutable_tasks(int index);
  ::flyteidl::admin::Task* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Task >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Task >&
      tasks() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Task > tasks_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2ftask_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskListImpl();
};
// -------------------------------------------------------------------

class TaskSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskSpec) */ {
 public:
  TaskSpec();
  virtual ~TaskSpec();

  TaskSpec(const TaskSpec& from);

  inline TaskSpec& operator=(const TaskSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskSpec(TaskSpec&& from) noexcept
    : TaskSpec() {
    *this = ::std::move(from);
  }

  inline TaskSpec& operator=(TaskSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskSpec* internal_default_instance() {
    return reinterpret_cast<const TaskSpec*>(
               &_TaskSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TaskSpec* other);
  friend void swap(TaskSpec& a, TaskSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskSpec& from);
  void MergeFrom(const TaskSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskTemplate template = 1;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 1;
  const ::flyteidl::core::TaskTemplate& template_() const;
  ::flyteidl::core::TaskTemplate* release_template_();
  ::flyteidl::core::TaskTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::TaskTemplate* template_);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskTemplate* template__;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2ftask_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskSpecImpl();
};
// -------------------------------------------------------------------

class TaskClosure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskClosure) */ {
 public:
  TaskClosure();
  virtual ~TaskClosure();

  TaskClosure(const TaskClosure& from);

  inline TaskClosure& operator=(const TaskClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskClosure(TaskClosure&& from) noexcept
    : TaskClosure() {
    *this = ::std::move(from);
  }

  inline TaskClosure& operator=(TaskClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskClosure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskClosure* internal_default_instance() {
    return reinterpret_cast<const TaskClosure*>(
               &_TaskClosure_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TaskClosure* other);
  friend void swap(TaskClosure& a, TaskClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskClosure* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskClosure* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskClosure& from);
  void MergeFrom(const TaskClosure& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.CompiledTask compiled_task = 1;
  bool has_compiled_task() const;
  void clear_compiled_task();
  static const int kCompiledTaskFieldNumber = 1;
  const ::flyteidl::core::CompiledTask& compiled_task() const;
  ::flyteidl::core::CompiledTask* release_compiled_task();
  ::flyteidl::core::CompiledTask* mutable_compiled_task();
  void set_allocated_compiled_task(::flyteidl::core::CompiledTask* compiled_task);

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskClosure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::CompiledTask* compiled_task_;
  ::google::protobuf::Timestamp* created_at_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2ftask_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2ftask_2eproto::InitDefaultsTaskClosureImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskCreateRequest

// .flyteidl.core.Identifier id = 1;
inline bool TaskCreateRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::Identifier& TaskCreateRequest::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskCreateRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* TaskCreateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskCreateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* TaskCreateRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskCreateRequest.id)
  return id_;
}
inline void TaskCreateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskCreateRequest.id)
}

// .flyteidl.admin.TaskSpec spec = 2;
inline bool TaskCreateRequest::has_spec() const {
  return this != internal_default_instance() && spec_ != NULL;
}
inline void TaskCreateRequest::clear_spec() {
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
}
inline const ::flyteidl::admin::TaskSpec& TaskCreateRequest::spec() const {
  const ::flyteidl::admin::TaskSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskCreateRequest.spec)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskSpec*>(
      &::flyteidl::admin::_TaskSpec_default_instance_);
}
inline ::flyteidl::admin::TaskSpec* TaskCreateRequest::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskCreateRequest.spec)
  
  ::flyteidl::admin::TaskSpec* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline ::flyteidl::admin::TaskSpec* TaskCreateRequest::mutable_spec() {
  
  if (spec_ == NULL) {
    spec_ = new ::flyteidl::admin::TaskSpec;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskCreateRequest.spec)
  return spec_;
}
inline void TaskCreateRequest::set_allocated_spec(::flyteidl::admin::TaskSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskCreateRequest.spec)
}

// -------------------------------------------------------------------

// TaskCreateResponse

// -------------------------------------------------------------------

// Task

// .flyteidl.core.Identifier id = 1;
inline bool Task::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::Identifier& Task::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Task.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* Task::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Task.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* Task::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Task.id)
  return id_;
}
inline void Task::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Task.id)
}

// .flyteidl.admin.TaskClosure closure = 2;
inline bool Task::has_closure() const {
  return this != internal_default_instance() && closure_ != NULL;
}
inline void Task::clear_closure() {
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
}
inline const ::flyteidl::admin::TaskClosure& Task::closure() const {
  const ::flyteidl::admin::TaskClosure* p = closure_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Task.closure)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskClosure*>(
      &::flyteidl::admin::_TaskClosure_default_instance_);
}
inline ::flyteidl::admin::TaskClosure* Task::release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Task.closure)
  
  ::flyteidl::admin::TaskClosure* temp = closure_;
  closure_ = NULL;
  return temp;
}
inline ::flyteidl::admin::TaskClosure* Task::mutable_closure() {
  
  if (closure_ == NULL) {
    closure_ = new ::flyteidl::admin::TaskClosure;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Task.closure)
  return closure_;
}
inline void Task::set_allocated_closure(::flyteidl::admin::TaskClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Task.closure)
}

// -------------------------------------------------------------------

// TaskList

// repeated .flyteidl.admin.Task tasks = 1;
inline int TaskList::tasks_size() const {
  return tasks_.size();
}
inline void TaskList::clear_tasks() {
  tasks_.Clear();
}
inline const ::flyteidl::admin::Task& TaskList::tasks(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskList.tasks)
  return tasks_.Get(index);
}
inline ::flyteidl::admin::Task* TaskList::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskList.tasks)
  return tasks_.Mutable(index);
}
inline ::flyteidl::admin::Task* TaskList::add_tasks() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskList.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Task >*
TaskList::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskList.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Task >&
TaskList::tasks() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskList.tasks)
  return tasks_;
}

// string token = 2;
inline void TaskList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskList.token)
  return token_.GetNoArena();
}
inline void TaskList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskList.token)
}
#if LANG_CXX11
inline void TaskList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskList.token)
}
#endif
inline void TaskList::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskList.token)
}
inline void TaskList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskList.token)
}
inline ::std::string* TaskList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskList::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskList.token)
}

// -------------------------------------------------------------------

// TaskSpec

// .flyteidl.core.TaskTemplate template = 1;
inline bool TaskSpec::has_template_() const {
  return this != internal_default_instance() && template__ != NULL;
}
inline const ::flyteidl::core::TaskTemplate& TaskSpec::template_() const {
  const ::flyteidl::core::TaskTemplate* p = template__;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskSpec.template)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::TaskTemplate*>(
      &::flyteidl::core::_TaskTemplate_default_instance_);
}
inline ::flyteidl::core::TaskTemplate* TaskSpec::release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskSpec.template)
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = NULL;
  return temp;
}
inline ::flyteidl::core::TaskTemplate* TaskSpec::mutable_template_() {
  
  if (template__ == NULL) {
    template__ = new ::flyteidl::core::TaskTemplate;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskSpec.template)
  return template__;
}
inline void TaskSpec::set_allocated_template_(::flyteidl::core::TaskTemplate* template_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(template__);
  }
  if (template_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      template_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskSpec.template)
}

// -------------------------------------------------------------------

// TaskClosure

// .flyteidl.core.CompiledTask compiled_task = 1;
inline bool TaskClosure::has_compiled_task() const {
  return this != internal_default_instance() && compiled_task_ != NULL;
}
inline const ::flyteidl::core::CompiledTask& TaskClosure::compiled_task() const {
  const ::flyteidl::core::CompiledTask* p = compiled_task_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskClosure.compiled_task)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::CompiledTask*>(
      &::flyteidl::core::_CompiledTask_default_instance_);
}
inline ::flyteidl::core::CompiledTask* TaskClosure::release_compiled_task() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskClosure.compiled_task)
  
  ::flyteidl::core::CompiledTask* temp = compiled_task_;
  compiled_task_ = NULL;
  return temp;
}
inline ::flyteidl::core::CompiledTask* TaskClosure::mutable_compiled_task() {
  
  if (compiled_task_ == NULL) {
    compiled_task_ = new ::flyteidl::core::CompiledTask;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskClosure.compiled_task)
  return compiled_task_;
}
inline void TaskClosure::set_allocated_compiled_task(::flyteidl::core::CompiledTask* compiled_task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(compiled_task_);
  }
  if (compiled_task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compiled_task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compiled_task, submessage_arena);
    }
    
  } else {
    
  }
  compiled_task_ = compiled_task;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskClosure.compiled_task)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool TaskClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& TaskClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskClosure.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskClosure::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskClosure.created_at)
  return created_at_;
}
inline void TaskClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskClosure.created_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fadmin_2ftask_2eproto__INCLUDED
