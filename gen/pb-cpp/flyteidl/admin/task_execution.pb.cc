// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task_execution.proto

#include "flyteidl/admin/task_execution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace admin {
class TaskExecutionGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionGetRequest>
      _instance;
} _TaskExecutionGetRequest_default_instance_;
class TaskExecutionListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionListRequest>
      _instance;
} _TaskExecutionListRequest_default_instance_;
class TaskExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecution>
      _instance;
} _TaskExecution_default_instance_;
class TaskExecutionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionList>
      _instance;
} _TaskExecutionList_default_instance_;
class TaskExecutionClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionClosure>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  const ::flyteidl::core::ExecutionError* error_;
} _TaskExecutionClosure_default_instance_;
class TaskExecutionGetDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionGetDataRequest>
      _instance;
} _TaskExecutionGetDataRequest_default_instance_;
class TaskExecutionGetDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionGetDataResponse>
      _instance;
} _TaskExecutionGetDataResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto {
void InitDefaultsTaskExecutionGetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsTaskExecutionIdentifier();
  {
    void* ptr = &::flyteidl::admin::_TaskExecutionGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionGetRequest::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionGetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionGetRequestImpl);
}

void InitDefaultsTaskExecutionListRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsNodeExecutionIdentifier();
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsSort();
  {
    void* ptr = &::flyteidl::admin::_TaskExecutionListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionListRequest::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionListRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionListRequestImpl);
}

void InitDefaultsTaskExecutionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsTaskExecutionIdentifier();
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionClosure();
  {
    void* ptr = &::flyteidl::admin::_TaskExecution_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecution::InitAsDefaultInstance();
}

void InitDefaultsTaskExecution() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionImpl);
}

void InitDefaultsTaskExecutionListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecution();
  {
    void* ptr = &::flyteidl::admin::_TaskExecutionList_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionList::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionListImpl);
}

void InitDefaultsTaskExecutionClosureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fexecution_2eproto::InitDefaultsExecutionError();
  protobuf_flyteidl_2fcore_2fexecution_2eproto::InitDefaultsTaskLog();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::flyteidl::admin::_TaskExecutionClosure_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionClosure::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionClosure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionClosureImpl);
}

void InitDefaultsTaskExecutionGetDataRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsTaskExecutionIdentifier();
  {
    void* ptr = &::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionGetDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionGetDataRequest::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionGetDataRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionGetDataRequestImpl);
}

void InitDefaultsTaskExecutionGetDataResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2fcommon_2eproto::InitDefaultsUrlBlob();
  {
    void* ptr = &::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionGetDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionGetDataResponse::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionGetDataResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionGetDataResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, node_execution_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, sort_by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecution, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecution, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecution, closure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecution, is_parent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, task_executions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::TaskExecutionClosureDefaultTypeInternal, output_uri_),
  offsetof(::flyteidl::admin::TaskExecutionClosureDefaultTypeInternal, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, started_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, created_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, updated_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, custom_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, output_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, outputs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::TaskExecutionGetRequest)},
  { 6, -1, sizeof(::flyteidl::admin::TaskExecutionListRequest)},
  { 16, -1, sizeof(::flyteidl::admin::TaskExecution)},
  { 25, -1, sizeof(::flyteidl::admin::TaskExecutionList)},
  { 32, -1, sizeof(::flyteidl::admin::TaskExecutionClosure)},
  { 47, -1, sizeof(::flyteidl::admin::TaskExecutionGetDataRequest)},
  { 53, -1, sizeof(::flyteidl::admin::TaskExecutionGetDataResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/admin/task_execution.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#flyteidl/admin/task_execution.proto\022\016f"
      "lyteidl.admin\032\033flyteidl/admin/common.pro"
      "to\032\035flyteidl/core/execution.proto\032\036flyte"
      "idl/core/identifier.proto\032\037google/protob"
      "uf/timestamp.proto\032\036google/protobuf/dura"
      "tion.proto\032\034google/protobuf/struct.proto"
      "\"M\n\027TaskExecutionGetRequest\0222\n\002id\030\001 \001(\0132"
      "&.flyteidl.core.TaskExecutionIdentifier\""
      "\263\001\n\030TaskExecutionListRequest\022A\n\021node_exe"
      "cution_id\030\001 \001(\0132&.flyteidl.core.NodeExec"
      "utionIdentifier\022\r\n\005limit\030\002 \001(\r\022\r\n\005token\030"
      "\003 \001(\t\022\017\n\007filters\030\004 \001(\t\022%\n\007sort_by\030\005 \001(\0132"
      "\024.flyteidl.admin.Sort\"\240\001\n\rTaskExecution\022"
      "2\n\002id\030\001 \001(\0132&.flyteidl.core.TaskExecutio"
      "nIdentifier\022\021\n\tinput_uri\030\002 \001(\t\0225\n\007closur"
      "e\030\003 \001(\0132$.flyteidl.admin.TaskExecutionCl"
      "osure\022\021\n\tis_parent\030\004 \001(\010\"Z\n\021TaskExecutio"
      "nList\0226\n\017task_executions\030\001 \003(\0132\035.flyteid"
      "l.admin.TaskExecution\022\r\n\005token\030\002 \001(\t\"\261\003\n"
      "\024TaskExecutionClosure\022\024\n\noutput_uri\030\001 \001("
      "\tH\000\022.\n\005error\030\002 \001(\0132\035.flyteidl.core.Execu"
      "tionErrorH\000\0221\n\005phase\030\003 \001(\0162\".flyteidl.co"
      "re.TaskExecution.Phase\022$\n\004logs\030\004 \003(\0132\026.f"
      "lyteidl.core.TaskLog\022.\n\nstarted_at\030\005 \001(\013"
      "2\032.google.protobuf.Timestamp\022+\n\010duration"
      "\030\006 \001(\0132\031.google.protobuf.Duration\022.\n\ncre"
      "ated_at\030\007 \001(\0132\032.google.protobuf.Timestam"
      "p\022.\n\nupdated_at\030\010 \001(\0132\032.google.protobuf."
      "Timestamp\022,\n\013custom_info\030\t \001(\0132\027.google."
      "protobuf.StructB\017\n\routput_result\"Q\n\033Task"
      "ExecutionGetDataRequest\0222\n\002id\030\001 \001(\0132&.fl"
      "yteidl.core.TaskExecutionIdentifier\"q\n\034T"
      "askExecutionGetDataResponse\022\'\n\006inputs\030\001 "
      "\001(\0132\027.flyteidl.admin.UrlBlob\022(\n\007outputs\030"
      "\002 \001(\0132\027.flyteidl.admin.UrlBlobB3Z1github"
      ".com/lyft/flyteidl/gen/pb-go/flyteidl/ad"
      "minb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/admin/task_execution.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fadmin_2fcommon_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fexecution_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto
namespace flyteidl {
namespace admin {

// ===================================================================

void TaskExecutionGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionGetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
}
void TaskExecutionGetRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionGetRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionGetRequest::TaskExecutionGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionGetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionGetRequest)
}
TaskExecutionGetRequest::TaskExecutionGetRequest(const TaskExecutionGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetRequest)
}

void TaskExecutionGetRequest::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

TaskExecutionGetRequest::~TaskExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetRequest)
  SharedDtor();
}

void TaskExecutionGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void TaskExecutionGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionGetRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionGetRequest& TaskExecutionGetRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionGetRequest();
  return *internal_default_instance();
}

TaskExecutionGetRequest* TaskExecutionGetRequest::New(::google::protobuf::Arena* arena) const {
  TaskExecutionGetRequest* n = new TaskExecutionGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskExecutionGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionGetRequest)
  return false;
#undef DO_
}

void TaskExecutionGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionGetRequest)
}

::google::protobuf::uint8* TaskExecutionGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionGetRequest)
  return target;
}

size_t TaskExecutionGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionGetRequest)
    MergeFrom(*source);
  }
}

void TaskExecutionGetRequest::MergeFrom(const TaskExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
}

void TaskExecutionGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionGetRequest::CopyFrom(const TaskExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionGetRequest::IsInitialized() const {
  return true;
}

void TaskExecutionGetRequest::Swap(TaskExecutionGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionGetRequest::InternalSwap(TaskExecutionGetRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionGetRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionListRequest_default_instance_._instance.get_mutable()->node_execution_id_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
void TaskExecutionListRequest::clear_node_execution_id() {
  if (GetArenaNoVirtual() == NULL && node_execution_id_ != NULL) {
    delete node_execution_id_;
  }
  node_execution_id_ = NULL;
}
void TaskExecutionListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == NULL && sort_by_ != NULL) {
    delete sort_by_;
  }
  sort_by_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionListRequest::kNodeExecutionIdFieldNumber;
const int TaskExecutionListRequest::kLimitFieldNumber;
const int TaskExecutionListRequest::kTokenFieldNumber;
const int TaskExecutionListRequest::kFiltersFieldNumber;
const int TaskExecutionListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionListRequest::TaskExecutionListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionListRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionListRequest)
}
TaskExecutionListRequest::TaskExecutionListRequest(const TaskExecutionListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_node_execution_id()) {
    node_execution_id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.node_execution_id_);
  } else {
    node_execution_id_ = NULL;
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = NULL;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionListRequest)
}

void TaskExecutionListRequest::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_execution_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&node_execution_id_)) + sizeof(limit_));
  _cached_size_ = 0;
}

TaskExecutionListRequest::~TaskExecutionListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionListRequest)
  SharedDtor();
}

void TaskExecutionListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void TaskExecutionListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionListRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionListRequest& TaskExecutionListRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionListRequest();
  return *internal_default_instance();
}

TaskExecutionListRequest* TaskExecutionListRequest::New(::google::protobuf::Arena* arena) const {
  TaskExecutionListRequest* n = new TaskExecutionListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_execution_id_ != NULL) {
    delete node_execution_id_;
  }
  node_execution_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && sort_by_ != NULL) {
    delete sort_by_;
  }
  sort_by_ = NULL;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

bool TaskExecutionListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionListRequest)
  return false;
#undef DO_
}

void TaskExecutionListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  if (this->has_node_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_execution_id_, output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filters(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sort_by_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionListRequest)
}

::google::protobuf::uint8* TaskExecutionListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  if (this->has_node_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->node_execution_id_, deterministic, target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filters(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->sort_by_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionListRequest)
  return target;
}

size_t TaskExecutionListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  if (this->has_node_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->node_execution_id_);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sort_by_);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionListRequest)
    MergeFrom(*source);
  }
}

void TaskExecutionListRequest::MergeFrom(const TaskExecutionListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_node_execution_id()) {
    mutable_node_execution_id()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.node_execution_id());
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void TaskExecutionListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionListRequest::CopyFrom(const TaskExecutionListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionListRequest::IsInitialized() const {
  return true;
}

void TaskExecutionListRequest::Swap(TaskExecutionListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionListRequest::InternalSwap(TaskExecutionListRequest* other) {
  using std::swap;
  token_.Swap(&other->token_);
  filters_.Swap(&other->filters_);
  swap(node_execution_id_, other->node_execution_id_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionListRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecution::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecution_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_TaskExecution_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::TaskExecutionClosure*>(
      ::flyteidl::admin::TaskExecutionClosure::internal_default_instance());
}
void TaskExecution::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecution::kIdFieldNumber;
const int TaskExecution::kInputUriFieldNumber;
const int TaskExecution::kClosureFieldNumber;
const int TaskExecution::kIsParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecution::TaskExecution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecution();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecution)
}
TaskExecution::TaskExecution(const TaskExecution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::TaskExecutionClosure(*from.closure_);
  } else {
    closure_ = NULL;
  }
  is_parent_ = from.is_parent_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecution)
}

void TaskExecution::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_parent_));
  _cached_size_ = 0;
}

TaskExecution::~TaskExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecution)
  SharedDtor();
}

void TaskExecution::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void TaskExecution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecution::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecution& TaskExecution::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecution();
  return *internal_default_instance();
}

TaskExecution* TaskExecution::New(::google::protobuf::Arena* arena) const {
  TaskExecution* n = new TaskExecution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
  is_parent_ = false;
  _internal_metadata_.Clear();
}

bool TaskExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecution.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.TaskExecutionClosure closure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecution)
  return false;
#undef DO_
}

void TaskExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecution.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_uri(), output);
  }

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->closure_, output);
  }

  // bool is_parent = 4;
  if (this->is_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_parent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecution)
}

::google::protobuf::uint8* TaskExecution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecution.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_uri(), target);
  }

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->closure_, deterministic, target);
  }

  // bool is_parent = 4;
  if (this->is_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_parent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecution)
  return target;
}

size_t TaskExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->closure_);
  }

  // bool is_parent = 4;
  if (this->is_parent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecution)
    MergeFrom(*source);
  }
}

void TaskExecution::MergeFrom(const TaskExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::TaskExecutionClosure::MergeFrom(from.closure());
  }
  if (from.is_parent() != 0) {
    set_is_parent(from.is_parent());
  }
}

void TaskExecution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecution::CopyFrom(const TaskExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecution::IsInitialized() const {
  return true;
}

void TaskExecution::Swap(TaskExecution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecution::InternalSwap(TaskExecution* other) {
  using std::swap;
  input_uri_.Swap(&other->input_uri_);
  swap(id_, other->id_);
  swap(closure_, other->closure_);
  swap(is_parent_, other->is_parent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecution::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionList::kTaskExecutionsFieldNumber;
const int TaskExecutionList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionList::TaskExecutionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionList)
}
TaskExecutionList::TaskExecutionList(const TaskExecutionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      task_executions_(from.task_executions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionList)
}

void TaskExecutionList::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TaskExecutionList::~TaskExecutionList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionList)
  SharedDtor();
}

void TaskExecutionList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskExecutionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionList::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionList& TaskExecutionList::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionList();
  return *internal_default_instance();
}

TaskExecutionList* TaskExecutionList::New(::google::protobuf::Arena* arena) const {
  TaskExecutionList* n = new TaskExecutionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_executions_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TaskExecutionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.TaskExecution task_executions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_task_executions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionList)
  return false;
#undef DO_
}

void TaskExecutionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_executions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_executions(static_cast<int>(i)), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionList)
}

::google::protobuf::uint8* TaskExecutionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_executions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->task_executions(static_cast<int>(i)), deterministic, target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionList)
  return target;
}

size_t TaskExecutionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->task_executions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_executions(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionList)
    MergeFrom(*source);
  }
}

void TaskExecutionList::MergeFrom(const TaskExecutionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_executions_.MergeFrom(from.task_executions_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void TaskExecutionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionList::CopyFrom(const TaskExecutionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionList::IsInitialized() const {
  return true;
}

void TaskExecutionList::Swap(TaskExecutionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionList::InternalSwap(TaskExecutionList* other) {
  using std::swap;
  task_executions_.InternalSwap(&other->task_executions_);
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionList::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_.output_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_.error_ = const_cast< ::flyteidl::core::ExecutionError*>(
      ::flyteidl::core::ExecutionError::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->started_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->custom_info_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void TaskExecutionClosure::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.error)
}
void TaskExecutionClosure::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
void TaskExecutionClosure::clear_logs() {
  logs_.Clear();
}
void TaskExecutionClosure::clear_started_at() {
  if (GetArenaNoVirtual() == NULL && started_at_ != NULL) {
    delete started_at_;
  }
  started_at_ = NULL;
}
void TaskExecutionClosure::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
}
void TaskExecutionClosure::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
}
void TaskExecutionClosure::clear_updated_at() {
  if (GetArenaNoVirtual() == NULL && updated_at_ != NULL) {
    delete updated_at_;
  }
  updated_at_ = NULL;
}
void TaskExecutionClosure::clear_custom_info() {
  if (GetArenaNoVirtual() == NULL && custom_info_ != NULL) {
    delete custom_info_;
  }
  custom_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionClosure::kOutputUriFieldNumber;
const int TaskExecutionClosure::kErrorFieldNumber;
const int TaskExecutionClosure::kPhaseFieldNumber;
const int TaskExecutionClosure::kLogsFieldNumber;
const int TaskExecutionClosure::kStartedAtFieldNumber;
const int TaskExecutionClosure::kDurationFieldNumber;
const int TaskExecutionClosure::kCreatedAtFieldNumber;
const int TaskExecutionClosure::kUpdatedAtFieldNumber;
const int TaskExecutionClosure::kCustomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionClosure::TaskExecutionClosure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionClosure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionClosure)
}
TaskExecutionClosure::TaskExecutionClosure(const TaskExecutionClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logs_(from.logs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_started_at()) {
    started_at_ = new ::google::protobuf::Timestamp(*from.started_at_);
  } else {
    started_at_ = NULL;
  }
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = NULL;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = NULL;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = NULL;
  }
  if (from.has_custom_info()) {
    custom_info_ = new ::google::protobuf::Struct(*from.custom_info_);
  } else {
    custom_info_ = NULL;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionClosure)
}

void TaskExecutionClosure::SharedCtor() {
  ::memset(&started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&started_at_)) + sizeof(phase_));
  clear_has_output_result();
  _cached_size_ = 0;
}

TaskExecutionClosure::~TaskExecutionClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionClosure)
  SharedDtor();
}

void TaskExecutionClosure::SharedDtor() {
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete custom_info_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void TaskExecutionClosure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionClosure::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionClosure& TaskExecutionClosure::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionClosure();
  return *internal_default_instance();
}

TaskExecutionClosure* TaskExecutionClosure::New(::google::protobuf::Arena* arena) const {
  TaskExecutionClosure* n = new TaskExecutionClosure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.TaskExecutionClosure)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void TaskExecutionClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  if (GetArenaNoVirtual() == NULL && started_at_ != NULL) {
    delete started_at_;
  }
  started_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && updated_at_ != NULL) {
    delete updated_at_;
  }
  updated_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && custom_info_ != NULL) {
    delete custom_info_;
  }
  custom_info_ = NULL;
  phase_ = 0;
  clear_output_result();
  _internal_metadata_.Clear();
}

bool TaskExecutionClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionClosure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string output_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionClosure.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskExecution.Phase phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::TaskExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.TaskLog logs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp started_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_started_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct custom_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionClosure)
  return false;
#undef DO_
}

void TaskExecutionClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_uri(), output);
  }

  // .flyteidl.core.ExecutionError error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *output_result_.error_, output);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phase(), output);
  }

  // repeated .flyteidl.core.TaskLog logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logs(static_cast<int>(i)), output);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->started_at_, output);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->duration_, output);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->created_at_, output);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->updated_at_, output);
  }

  // .google.protobuf.Struct custom_info = 9;
  if (this->has_custom_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->custom_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionClosure)
}

::google::protobuf::uint8* TaskExecutionClosure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_uri(), target);
  }

  // .flyteidl.core.ExecutionError error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *output_result_.error_, deterministic, target);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phase(), target);
  }

  // repeated .flyteidl.core.TaskLog logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->logs(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->started_at_, deterministic, target);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->duration_, deterministic, target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->created_at_, deterministic, target);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->updated_at_, deterministic, target);
  }

  // .google.protobuf.Struct custom_info = 9;
  if (this->has_custom_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->custom_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionClosure)
  return target;
}

size_t TaskExecutionClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionClosure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.core.TaskLog logs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->started_at_);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->duration_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->updated_at_);
  }

  // .google.protobuf.Struct custom_info = 9;
  if (this->has_custom_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->custom_info_);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  switch (output_result_case()) {
    // string output_uri = 1;
    case kOutputUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_uri());
      break;
    }
    // .flyteidl.core.ExecutionError error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionClosure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionClosure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionClosure)
    MergeFrom(*source);
  }
}

void TaskExecutionClosure::MergeFrom(const TaskExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.has_started_at()) {
    mutable_started_at()->::google::protobuf::Timestamp::MergeFrom(from.started_at());
  }
  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
  if (from.has_custom_info()) {
    mutable_custom_info()->::google::protobuf::Struct::MergeFrom(from.custom_info());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
}

void TaskExecutionClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionClosure::CopyFrom(const TaskExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionClosure::IsInitialized() const {
  return true;
}

void TaskExecutionClosure::Swap(TaskExecutionClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionClosure::InternalSwap(TaskExecutionClosure* other) {
  using std::swap;
  logs_.InternalSwap(&other->logs_);
  swap(started_at_, other->started_at_);
  swap(duration_, other->duration_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(custom_info_, other->custom_info_);
  swap(phase_, other->phase_);
  swap(output_result_, other->output_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionClosure::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionGetDataRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
}
void TaskExecutionGetDataRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionGetDataRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionGetDataRequest::TaskExecutionGetDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionGetDataRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionGetDataRequest)
}
TaskExecutionGetDataRequest::TaskExecutionGetDataRequest(const TaskExecutionGetDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetDataRequest)
}

void TaskExecutionGetDataRequest::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

TaskExecutionGetDataRequest::~TaskExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetDataRequest)
  SharedDtor();
}

void TaskExecutionGetDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void TaskExecutionGetDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionGetDataRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionGetDataRequest& TaskExecutionGetDataRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionGetDataRequest();
  return *internal_default_instance();
}

TaskExecutionGetDataRequest* TaskExecutionGetDataRequest::New(::google::protobuf::Arena* arena) const {
  TaskExecutionGetDataRequest* n = new TaskExecutionGetDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionGetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskExecutionGetDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionGetDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionGetDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionGetDataRequest)
  return false;
#undef DO_
}

void TaskExecutionGetDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionGetDataRequest)
}

::google::protobuf::uint8* TaskExecutionGetDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionGetDataRequest)
  return target;
}

size_t TaskExecutionGetDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionGetDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionGetDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionGetDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionGetDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionGetDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionGetDataRequest)
    MergeFrom(*source);
  }
}

void TaskExecutionGetDataRequest::MergeFrom(const TaskExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
}

void TaskExecutionGetDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionGetDataRequest::CopyFrom(const TaskExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionGetDataRequest::IsInitialized() const {
  return true;
}

void TaskExecutionGetDataRequest::Swap(TaskExecutionGetDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionGetDataRequest::InternalSwap(TaskExecutionGetDataRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionGetDataRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionGetDataResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::flyteidl::admin::UrlBlob*>(
      ::flyteidl::admin::UrlBlob::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_._instance.get_mutable()->outputs_ = const_cast< ::flyteidl::admin::UrlBlob*>(
      ::flyteidl::admin::UrlBlob::internal_default_instance());
}
void TaskExecutionGetDataResponse::clear_inputs() {
  if (GetArenaNoVirtual() == NULL && inputs_ != NULL) {
    delete inputs_;
  }
  inputs_ = NULL;
}
void TaskExecutionGetDataResponse::clear_outputs() {
  if (GetArenaNoVirtual() == NULL && outputs_ != NULL) {
    delete outputs_;
  }
  outputs_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionGetDataResponse::kInputsFieldNumber;
const int TaskExecutionGetDataResponse::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionGetDataResponse::TaskExecutionGetDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionGetDataResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionGetDataResponse)
}
TaskExecutionGetDataResponse::TaskExecutionGetDataResponse(const TaskExecutionGetDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inputs()) {
    inputs_ = new ::flyteidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = NULL;
  }
  if (from.has_outputs()) {
    outputs_ = new ::flyteidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetDataResponse)
}

void TaskExecutionGetDataResponse::SharedCtor() {
  ::memset(&inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outputs_) -
      reinterpret_cast<char*>(&inputs_)) + sizeof(outputs_));
  _cached_size_ = 0;
}

TaskExecutionGetDataResponse::~TaskExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetDataResponse)
  SharedDtor();
}

void TaskExecutionGetDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
}

void TaskExecutionGetDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionGetDataResponse::descriptor() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionGetDataResponse& TaskExecutionGetDataResponse::default_instance() {
  ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::InitDefaultsTaskExecutionGetDataResponse();
  return *internal_default_instance();
}

TaskExecutionGetDataResponse* TaskExecutionGetDataResponse::New(::google::protobuf::Arena* arena) const {
  TaskExecutionGetDataResponse* n = new TaskExecutionGetDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionGetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && inputs_ != NULL) {
    delete inputs_;
  }
  inputs_ = NULL;
  if (GetArenaNoVirtual() == NULL && outputs_ != NULL) {
    delete outputs_;
  }
  outputs_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskExecutionGetDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionGetDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.UrlBlob inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.UrlBlob outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionGetDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionGetDataResponse)
  return false;
#undef DO_
}

void TaskExecutionGetDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob inputs = 1;
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inputs_, output);
  }

  // .flyteidl.admin.UrlBlob outputs = 2;
  if (this->has_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->outputs_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionGetDataResponse)
}

::google::protobuf::uint8* TaskExecutionGetDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob inputs = 1;
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->inputs_, deterministic, target);
  }

  // .flyteidl.admin.UrlBlob outputs = 2;
  if (this->has_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->outputs_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionGetDataResponse)
  return target;
}

size_t TaskExecutionGetDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionGetDataResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.admin.UrlBlob inputs = 1;
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->inputs_);
  }

  // .flyteidl.admin.UrlBlob outputs = 2;
  if (this->has_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->outputs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionGetDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionGetDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionGetDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionGetDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionGetDataResponse)
    MergeFrom(*source);
  }
}

void TaskExecutionGetDataResponse::MergeFrom(const TaskExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inputs()) {
    mutable_inputs()->::flyteidl::admin::UrlBlob::MergeFrom(from.inputs());
  }
  if (from.has_outputs()) {
    mutable_outputs()->::flyteidl::admin::UrlBlob::MergeFrom(from.outputs());
  }
}

void TaskExecutionGetDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionGetDataResponse::CopyFrom(const TaskExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionGetDataResponse::IsInitialized() const {
  return true;
}

void TaskExecutionGetDataResponse::Swap(TaskExecutionGetDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionGetDataResponse::InternalSwap(TaskExecutionGetDataResponse* other) {
  using std::swap;
  swap(inputs_, other->inputs_);
  swap(outputs_, other->outputs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionGetDataResponse::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2ftask_5fexecution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
