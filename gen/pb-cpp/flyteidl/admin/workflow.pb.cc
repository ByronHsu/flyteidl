// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/workflow.proto

#include "flyteidl/admin/workflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace admin {
class WorkflowCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowCreateRequest>
      _instance;
} _WorkflowCreateRequest_default_instance_;
class WorkflowCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowCreateResponse>
      _instance;
} _WorkflowCreateResponse_default_instance_;
class WorkflowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Workflow>
      _instance;
} _Workflow_default_instance_;
class WorkflowListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowList>
      _instance;
} _WorkflowList_default_instance_;
class WorkflowSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowSpec>
      _instance;
} _WorkflowSpec_default_instance_;
class WorkflowClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowClosure>
      _instance;
} _WorkflowClosure_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace protobuf_flyteidl_2fadmin_2fworkflow_2eproto {
void InitDefaultsWorkflowCreateRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowSpec();
  {
    void* ptr = &::flyteidl::admin::_WorkflowCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowCreateRequest::InitAsDefaultInstance();
}

void InitDefaultsWorkflowCreateRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowCreateRequestImpl);
}

void InitDefaultsWorkflowCreateResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::admin::_WorkflowCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowCreateResponse::InitAsDefaultInstance();
}

void InitDefaultsWorkflowCreateResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowCreateResponseImpl);
}

void InitDefaultsWorkflowImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowClosure();
  {
    void* ptr = &::flyteidl::admin::_Workflow_default_instance_;
    new (ptr) ::flyteidl::admin::Workflow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Workflow::InitAsDefaultInstance();
}

void InitDefaultsWorkflow() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowImpl);
}

void InitDefaultsWorkflowListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflow();
  {
    void* ptr = &::flyteidl::admin::_WorkflowList_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowList::InitAsDefaultInstance();
}

void InitDefaultsWorkflowList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowListImpl);
}

void InitDefaultsWorkflowSpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowTemplate();
  {
    void* ptr = &::flyteidl::admin::_WorkflowSpec_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowSpec::InitAsDefaultInstance();
}

void InitDefaultsWorkflowSpec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowSpecImpl);
}

void InitDefaultsWorkflowClosureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflowClosure();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::flyteidl::admin::_WorkflowClosure_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowClosure::InitAsDefaultInstance();
}

void InitDefaultsWorkflowClosure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowClosureImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, spec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Workflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Workflow, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::Workflow, closure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowList, workflows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowList, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, template__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, compiled_workflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, created_at_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::WorkflowCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::WorkflowCreateResponse)},
  { 12, -1, sizeof(::flyteidl::admin::Workflow)},
  { 19, -1, sizeof(::flyteidl::admin::WorkflowList)},
  { 26, -1, sizeof(::flyteidl::admin::WorkflowSpec)},
  { 32, -1, sizeof(::flyteidl::admin::WorkflowClosure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Workflow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowClosure_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/admin/workflow.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035flyteidl/admin/workflow.proto\022\016flyteid"
      "l.admin\032\034flyteidl/core/compiler.proto\032\036f"
      "lyteidl/core/identifier.proto\032\034flyteidl/"
      "core/workflow.proto\032\033flyteidl/admin/comm"
      "on.proto\032\037google/protobuf/timestamp.prot"
      "o\"j\n\025WorkflowCreateRequest\022%\n\002id\030\001 \001(\0132\031"
      ".flyteidl.core.Identifier\022*\n\004spec\030\002 \001(\0132"
      "\034.flyteidl.admin.WorkflowSpec\"\030\n\026Workflo"
      "wCreateResponse\"c\n\010Workflow\022%\n\002id\030\001 \001(\0132"
      "\031.flyteidl.core.Identifier\0220\n\007closure\030\002 "
      "\001(\0132\037.flyteidl.admin.WorkflowClosure\"J\n\014"
      "WorkflowList\022+\n\tworkflows\030\001 \003(\0132\030.flytei"
      "dl.admin.Workflow\022\r\n\005token\030\002 \001(\t\"A\n\014Work"
      "flowSpec\0221\n\010template\030\001 \001(\0132\037.flyteidl.co"
      "re.WorkflowTemplate\"\204\001\n\017WorkflowClosure\022"
      "A\n\021compiled_workflow\030\001 \001(\0132&.flyteidl.co"
      "re.CompiledWorkflowClosure\022.\n\ncreated_at"
      "\030\002 \001(\0132\032.google.protobuf.TimestampB3Z1gi"
      "thub.com/lyft/flyteidl/gen/pb-go/flyteid"
      "l/adminb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/admin/workflow.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fadmin_2fcommon_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fadmin_2fworkflow_2eproto
namespace flyteidl {
namespace admin {

// ===================================================================

void WorkflowCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_WorkflowCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::WorkflowSpec*>(
      ::flyteidl::admin::WorkflowSpec::internal_default_instance());
}
void WorkflowCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowCreateRequest::kIdFieldNumber;
const int WorkflowCreateRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowCreateRequest::WorkflowCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowCreateRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowCreateRequest)
}
WorkflowCreateRequest::WorkflowCreateRequest(const WorkflowCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::WorkflowSpec(*from.spec_);
  } else {
    spec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowCreateRequest)
}

void WorkflowCreateRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spec_));
  _cached_size_ = 0;
}

WorkflowCreateRequest::~WorkflowCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowCreateRequest)
  SharedDtor();
}

void WorkflowCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void WorkflowCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowCreateRequest::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowCreateRequest& WorkflowCreateRequest::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowCreateRequest();
  return *internal_default_instance();
}

WorkflowCreateRequest* WorkflowCreateRequest::New(::google::protobuf::Arena* arena) const {
  WorkflowCreateRequest* n = new WorkflowCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
  _internal_metadata_.Clear();
}

bool WorkflowCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowCreateRequest)
  return false;
#undef DO_
}

void WorkflowCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.WorkflowSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spec_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowCreateRequest)
}

::google::protobuf::uint8* WorkflowCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.WorkflowSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->spec_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowCreateRequest)
  return target;
}

size_t WorkflowCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowCreateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.WorkflowSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowCreateRequest)
    MergeFrom(*source);
  }
}

void WorkflowCreateRequest::MergeFrom(const WorkflowCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::WorkflowSpec::MergeFrom(from.spec());
  }
}

void WorkflowCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowCreateRequest::CopyFrom(const WorkflowCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowCreateRequest::IsInitialized() const {
  return true;
}

void WorkflowCreateRequest::Swap(WorkflowCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowCreateRequest::InternalSwap(WorkflowCreateRequest* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(spec_, other->spec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowCreateRequest::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowCreateResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowCreateResponse::WorkflowCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowCreateResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowCreateResponse)
}
WorkflowCreateResponse::WorkflowCreateResponse(const WorkflowCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowCreateResponse)
}

void WorkflowCreateResponse::SharedCtor() {
  _cached_size_ = 0;
}

WorkflowCreateResponse::~WorkflowCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowCreateResponse)
  SharedDtor();
}

void WorkflowCreateResponse::SharedDtor() {
}

void WorkflowCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowCreateResponse::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowCreateResponse& WorkflowCreateResponse::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowCreateResponse();
  return *internal_default_instance();
}

WorkflowCreateResponse* WorkflowCreateResponse::New(::google::protobuf::Arena* arena) const {
  WorkflowCreateResponse* n = new WorkflowCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool WorkflowCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowCreateResponse)
  return false;
#undef DO_
}

void WorkflowCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowCreateResponse)
}

::google::protobuf::uint8* WorkflowCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowCreateResponse)
  return target;
}

size_t WorkflowCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowCreateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowCreateResponse)
    MergeFrom(*source);
  }
}

void WorkflowCreateResponse::MergeFrom(const WorkflowCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WorkflowCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowCreateResponse::CopyFrom(const WorkflowCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowCreateResponse::IsInitialized() const {
  return true;
}

void WorkflowCreateResponse::Swap(WorkflowCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowCreateResponse::InternalSwap(WorkflowCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowCreateResponse::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Workflow::InitAsDefaultInstance() {
  ::flyteidl::admin::_Workflow_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_Workflow_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::WorkflowClosure*>(
      ::flyteidl::admin::WorkflowClosure::internal_default_instance());
}
void Workflow::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Workflow::kIdFieldNumber;
const int Workflow::kClosureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Workflow::Workflow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflow();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Workflow)
}
Workflow::Workflow(const Workflow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::WorkflowClosure(*from.closure_);
  } else {
    closure_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Workflow)
}

void Workflow::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
  _cached_size_ = 0;
}

Workflow::~Workflow() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Workflow)
  SharedDtor();
}

void Workflow::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void Workflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Workflow::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Workflow& Workflow::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflow();
  return *internal_default_instance();
}

Workflow* Workflow::New(::google::protobuf::Arena* arena) const {
  Workflow* n = new Workflow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Workflow::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Workflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
  _internal_metadata_.Clear();
}

bool Workflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Workflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowClosure closure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Workflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Workflow)
  return false;
#undef DO_
}

void Workflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Workflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.admin.WorkflowClosure closure = 2;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->closure_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Workflow)
}

::google::protobuf::uint8* Workflow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Workflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.admin.WorkflowClosure closure = 2;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->closure_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Workflow)
  return target;
}

size_t Workflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Workflow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.admin.WorkflowClosure closure = 2;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Workflow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  const Workflow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Workflow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Workflow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Workflow)
    MergeFrom(*source);
  }
}

void Workflow::MergeFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::WorkflowClosure::MergeFrom(from.closure());
  }
}

void Workflow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workflow::CopyFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workflow::IsInitialized() const {
  return true;
}

void Workflow::Swap(Workflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Workflow::InternalSwap(Workflow* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(closure_, other->closure_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Workflow::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowList::kWorkflowsFieldNumber;
const int WorkflowList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowList::WorkflowList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowList)
}
WorkflowList::WorkflowList(const WorkflowList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      workflows_(from.workflows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowList)
}

void WorkflowList::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WorkflowList::~WorkflowList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowList)
  SharedDtor();
}

void WorkflowList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkflowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowList::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowList& WorkflowList::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowList();
  return *internal_default_instance();
}

WorkflowList* WorkflowList::New(::google::protobuf::Arena* arena) const {
  WorkflowList* n = new WorkflowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool WorkflowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Workflow workflows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_workflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowList)
  return false;
#undef DO_
}

void WorkflowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Workflow workflows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->workflows(static_cast<int>(i)), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowList)
}

::google::protobuf::uint8* WorkflowList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Workflow workflows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->workflows(static_cast<int>(i)), deterministic, target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowList)
  return target;
}

size_t WorkflowList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.admin.Workflow workflows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->workflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->workflows(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowList)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowList)
    MergeFrom(*source);
  }
}

void WorkflowList::MergeFrom(const WorkflowList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void WorkflowList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowList::CopyFrom(const WorkflowList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowList::IsInitialized() const {
  return true;
}

void WorkflowList::Swap(WorkflowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowList::InternalSwap(WorkflowList* other) {
  using std::swap;
  workflows_.InternalSwap(&other->workflows_);
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowList::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowSpec_default_instance_._instance.get_mutable()->template__ = const_cast< ::flyteidl::core::WorkflowTemplate*>(
      ::flyteidl::core::WorkflowTemplate::internal_default_instance());
}
void WorkflowSpec::clear_template_() {
  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowSpec::kTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowSpec::WorkflowSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowSpec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowSpec)
}
WorkflowSpec::WorkflowSpec(const WorkflowSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_template_()) {
    template__ = new ::flyteidl::core::WorkflowTemplate(*from.template__);
  } else {
    template__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowSpec)
}

void WorkflowSpec::SharedCtor() {
  template__ = NULL;
  _cached_size_ = 0;
}

WorkflowSpec::~WorkflowSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowSpec)
  SharedDtor();
}

void WorkflowSpec::SharedDtor() {
  if (this != internal_default_instance()) delete template__;
}

void WorkflowSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowSpec::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowSpec& WorkflowSpec::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowSpec();
  return *internal_default_instance();
}

WorkflowSpec* WorkflowSpec::New(::google::protobuf::Arena* arena) const {
  WorkflowSpec* n = new WorkflowSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
  _internal_metadata_.Clear();
}

bool WorkflowSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowTemplate template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowSpec)
  return false;
#undef DO_
}

void WorkflowSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->template__, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowSpec)
}

::google::protobuf::uint8* WorkflowSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->template__, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowSpec)
  return target;
}

size_t WorkflowSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->template__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowSpec)
    MergeFrom(*source);
  }
}

void WorkflowSpec::MergeFrom(const WorkflowSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_template_()) {
    mutable_template_()->::flyteidl::core::WorkflowTemplate::MergeFrom(from.template_());
  }
}

void WorkflowSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowSpec::CopyFrom(const WorkflowSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowSpec::IsInitialized() const {
  return true;
}

void WorkflowSpec::Swap(WorkflowSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowSpec::InternalSwap(WorkflowSpec* other) {
  using std::swap;
  swap(template__, other->template__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowSpec::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowClosure_default_instance_._instance.get_mutable()->compiled_workflow_ = const_cast< ::flyteidl::core::CompiledWorkflowClosure*>(
      ::flyteidl::core::CompiledWorkflowClosure::internal_default_instance());
  ::flyteidl::admin::_WorkflowClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void WorkflowClosure::clear_compiled_workflow() {
  if (GetArenaNoVirtual() == NULL && compiled_workflow_ != NULL) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = NULL;
}
void WorkflowClosure::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowClosure::kCompiledWorkflowFieldNumber;
const int WorkflowClosure::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowClosure::WorkflowClosure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowClosure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowClosure)
}
WorkflowClosure::WorkflowClosure(const WorkflowClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compiled_workflow()) {
    compiled_workflow_ = new ::flyteidl::core::CompiledWorkflowClosure(*from.compiled_workflow_);
  } else {
    compiled_workflow_ = NULL;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowClosure)
}

void WorkflowClosure::SharedCtor() {
  ::memset(&compiled_workflow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&compiled_workflow_)) + sizeof(created_at_));
  _cached_size_ = 0;
}

WorkflowClosure::~WorkflowClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowClosure)
  SharedDtor();
}

void WorkflowClosure::SharedDtor() {
  if (this != internal_default_instance()) delete compiled_workflow_;
  if (this != internal_default_instance()) delete created_at_;
}

void WorkflowClosure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowClosure::descriptor() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowClosure& WorkflowClosure::default_instance() {
  ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::InitDefaultsWorkflowClosure();
  return *internal_default_instance();
}

WorkflowClosure* WorkflowClosure::New(::google::protobuf::Arena* arena) const {
  WorkflowClosure* n = new WorkflowClosure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && compiled_workflow_ != NULL) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
  _internal_metadata_.Clear();
}

bool WorkflowClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowClosure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compiled_workflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowClosure)
  return false;
#undef DO_
}

void WorkflowClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  if (this->has_compiled_workflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->compiled_workflow_, output);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->created_at_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowClosure)
}

::google::protobuf::uint8* WorkflowClosure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  if (this->has_compiled_workflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->compiled_workflow_, deterministic, target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->created_at_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowClosure)
  return target;
}

size_t WorkflowClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowClosure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  if (this->has_compiled_workflow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->compiled_workflow_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->created_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowClosure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowClosure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowClosure)
    MergeFrom(*source);
  }
}

void WorkflowClosure::MergeFrom(const WorkflowClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compiled_workflow()) {
    mutable_compiled_workflow()->::flyteidl::core::CompiledWorkflowClosure::MergeFrom(from.compiled_workflow());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
}

void WorkflowClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowClosure::CopyFrom(const WorkflowClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowClosure::IsInitialized() const {
  return true;
}

void WorkflowClosure::Swap(WorkflowClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowClosure::InternalSwap(WorkflowClosure* other) {
  using std::swap;
  swap(compiled_workflow_, other->compiled_workflow_);
  swap(created_at_, other->created_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowClosure::GetMetadata() const {
  protobuf_flyteidl_2fadmin_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fadmin_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
