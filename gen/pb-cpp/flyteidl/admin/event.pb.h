// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/event.proto

#ifndef PROTOBUF_flyteidl_2fadmin_2fevent_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fadmin_2fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/event/event.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fadmin_2fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEventErrorAlreadyInTerminalStateImpl();
void InitDefaultsEventErrorAlreadyInTerminalState();
void InitDefaultsEventFailureReasonImpl();
void InitDefaultsEventFailureReason();
void InitDefaultsWorkflowExecutionEventRequestImpl();
void InitDefaultsWorkflowExecutionEventRequest();
void InitDefaultsWorkflowExecutionEventResponseImpl();
void InitDefaultsWorkflowExecutionEventResponse();
void InitDefaultsNodeExecutionEventRequestImpl();
void InitDefaultsNodeExecutionEventRequest();
void InitDefaultsNodeExecutionEventResponseImpl();
void InitDefaultsNodeExecutionEventResponse();
void InitDefaultsTaskExecutionEventRequestImpl();
void InitDefaultsTaskExecutionEventRequest();
void InitDefaultsTaskExecutionEventResponseImpl();
void InitDefaultsTaskExecutionEventResponse();
inline void InitDefaults() {
  InitDefaultsEventErrorAlreadyInTerminalState();
  InitDefaultsEventFailureReason();
  InitDefaultsWorkflowExecutionEventRequest();
  InitDefaultsWorkflowExecutionEventResponse();
  InitDefaultsNodeExecutionEventRequest();
  InitDefaultsNodeExecutionEventResponse();
  InitDefaultsTaskExecutionEventRequest();
  InitDefaultsTaskExecutionEventResponse();
}
}  // namespace protobuf_flyteidl_2fadmin_2fevent_2eproto
namespace flyteidl {
namespace admin {
class EventErrorAlreadyInTerminalState;
class EventErrorAlreadyInTerminalStateDefaultTypeInternal;
extern EventErrorAlreadyInTerminalStateDefaultTypeInternal _EventErrorAlreadyInTerminalState_default_instance_;
class EventFailureReason;
class EventFailureReasonDefaultTypeInternal;
extern EventFailureReasonDefaultTypeInternal _EventFailureReason_default_instance_;
class NodeExecutionEventRequest;
class NodeExecutionEventRequestDefaultTypeInternal;
extern NodeExecutionEventRequestDefaultTypeInternal _NodeExecutionEventRequest_default_instance_;
class NodeExecutionEventResponse;
class NodeExecutionEventResponseDefaultTypeInternal;
extern NodeExecutionEventResponseDefaultTypeInternal _NodeExecutionEventResponse_default_instance_;
class TaskExecutionEventRequest;
class TaskExecutionEventRequestDefaultTypeInternal;
extern TaskExecutionEventRequestDefaultTypeInternal _TaskExecutionEventRequest_default_instance_;
class TaskExecutionEventResponse;
class TaskExecutionEventResponseDefaultTypeInternal;
extern TaskExecutionEventResponseDefaultTypeInternal _TaskExecutionEventResponse_default_instance_;
class WorkflowExecutionEventRequest;
class WorkflowExecutionEventRequestDefaultTypeInternal;
extern WorkflowExecutionEventRequestDefaultTypeInternal _WorkflowExecutionEventRequest_default_instance_;
class WorkflowExecutionEventResponse;
class WorkflowExecutionEventResponseDefaultTypeInternal;
extern WorkflowExecutionEventResponseDefaultTypeInternal _WorkflowExecutionEventResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace flyteidl {
namespace admin {

// ===================================================================

class EventErrorAlreadyInTerminalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.EventErrorAlreadyInTerminalState) */ {
 public:
  EventErrorAlreadyInTerminalState();
  virtual ~EventErrorAlreadyInTerminalState();

  EventErrorAlreadyInTerminalState(const EventErrorAlreadyInTerminalState& from);

  inline EventErrorAlreadyInTerminalState& operator=(const EventErrorAlreadyInTerminalState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventErrorAlreadyInTerminalState(EventErrorAlreadyInTerminalState&& from) noexcept
    : EventErrorAlreadyInTerminalState() {
    *this = ::std::move(from);
  }

  inline EventErrorAlreadyInTerminalState& operator=(EventErrorAlreadyInTerminalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventErrorAlreadyInTerminalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventErrorAlreadyInTerminalState* internal_default_instance() {
    return reinterpret_cast<const EventErrorAlreadyInTerminalState*>(
               &_EventErrorAlreadyInTerminalState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventErrorAlreadyInTerminalState* other);
  friend void swap(EventErrorAlreadyInTerminalState& a, EventErrorAlreadyInTerminalState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventErrorAlreadyInTerminalState* New() const PROTOBUF_FINAL { return New(NULL); }

  EventErrorAlreadyInTerminalState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventErrorAlreadyInTerminalState& from);
  void MergeFrom(const EventErrorAlreadyInTerminalState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventErrorAlreadyInTerminalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string current_phase = 1;
  void clear_current_phase();
  static const int kCurrentPhaseFieldNumber = 1;
  const ::std::string& current_phase() const;
  void set_current_phase(const ::std::string& value);
  #if LANG_CXX11
  void set_current_phase(::std::string&& value);
  #endif
  void set_current_phase(const char* value);
  void set_current_phase(const char* value, size_t size);
  ::std::string* mutable_current_phase();
  ::std::string* release_current_phase();
  void set_allocated_current_phase(::std::string* current_phase);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.EventErrorAlreadyInTerminalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr current_phase_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsEventErrorAlreadyInTerminalStateImpl();
};
// -------------------------------------------------------------------

class EventFailureReason : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.EventFailureReason) */ {
 public:
  EventFailureReason();
  virtual ~EventFailureReason();

  EventFailureReason(const EventFailureReason& from);

  inline EventFailureReason& operator=(const EventFailureReason& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventFailureReason(EventFailureReason&& from) noexcept
    : EventFailureReason() {
    *this = ::std::move(from);
  }

  inline EventFailureReason& operator=(EventFailureReason&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventFailureReason& default_instance();

  enum ReasonCase {
    kAlreadyInTerminalState = 1,
    REASON_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventFailureReason* internal_default_instance() {
    return reinterpret_cast<const EventFailureReason*>(
               &_EventFailureReason_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EventFailureReason* other);
  friend void swap(EventFailureReason& a, EventFailureReason& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventFailureReason* New() const PROTOBUF_FINAL { return New(NULL); }

  EventFailureReason* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventFailureReason& from);
  void MergeFrom(const EventFailureReason& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventFailureReason* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.EventErrorAlreadyInTerminalState already_in_terminal_state = 1;
  bool has_already_in_terminal_state() const;
  void clear_already_in_terminal_state();
  static const int kAlreadyInTerminalStateFieldNumber = 1;
  const ::flyteidl::admin::EventErrorAlreadyInTerminalState& already_in_terminal_state() const;
  ::flyteidl::admin::EventErrorAlreadyInTerminalState* release_already_in_terminal_state();
  ::flyteidl::admin::EventErrorAlreadyInTerminalState* mutable_already_in_terminal_state();
  void set_allocated_already_in_terminal_state(::flyteidl::admin::EventErrorAlreadyInTerminalState* already_in_terminal_state);

  ReasonCase reason_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.EventFailureReason)
 private:
  void set_has_already_in_terminal_state();

  inline bool has_reason() const;
  void clear_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ReasonUnion {
    ReasonUnion() {}
    ::flyteidl::admin::EventErrorAlreadyInTerminalState* already_in_terminal_state_;
  } reason_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsEventFailureReasonImpl();
};
// -------------------------------------------------------------------

class WorkflowExecutionEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionEventRequest) */ {
 public:
  WorkflowExecutionEventRequest();
  virtual ~WorkflowExecutionEventRequest();

  WorkflowExecutionEventRequest(const WorkflowExecutionEventRequest& from);

  inline WorkflowExecutionEventRequest& operator=(const WorkflowExecutionEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionEventRequest(WorkflowExecutionEventRequest&& from) noexcept
    : WorkflowExecutionEventRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionEventRequest& operator=(WorkflowExecutionEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowExecutionEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionEventRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionEventRequest*>(
               &_WorkflowExecutionEventRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WorkflowExecutionEventRequest* other);
  friend void swap(WorkflowExecutionEventRequest& a, WorkflowExecutionEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionEventRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowExecutionEventRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowExecutionEventRequest& from);
  void MergeFrom(const WorkflowExecutionEventRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowExecutionEventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .flyteidl.event.WorkflowExecutionEvent event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::flyteidl::event::WorkflowExecutionEvent& event() const;
  ::flyteidl::event::WorkflowExecutionEvent* release_event();
  ::flyteidl::event::WorkflowExecutionEvent* mutable_event();
  void set_allocated_event(::flyteidl::event::WorkflowExecutionEvent* event);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionEventRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::flyteidl::event::WorkflowExecutionEvent* event_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsWorkflowExecutionEventRequestImpl();
};
// -------------------------------------------------------------------

class WorkflowExecutionEventResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionEventResponse) */ {
 public:
  WorkflowExecutionEventResponse();
  virtual ~WorkflowExecutionEventResponse();

  WorkflowExecutionEventResponse(const WorkflowExecutionEventResponse& from);

  inline WorkflowExecutionEventResponse& operator=(const WorkflowExecutionEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionEventResponse(WorkflowExecutionEventResponse&& from) noexcept
    : WorkflowExecutionEventResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionEventResponse& operator=(WorkflowExecutionEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowExecutionEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionEventResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionEventResponse*>(
               &_WorkflowExecutionEventResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WorkflowExecutionEventResponse* other);
  friend void swap(WorkflowExecutionEventResponse& a, WorkflowExecutionEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionEventResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowExecutionEventResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowExecutionEventResponse& from);
  void MergeFrom(const WorkflowExecutionEventResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowExecutionEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionEventResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsWorkflowExecutionEventResponseImpl();
};
// -------------------------------------------------------------------

class NodeExecutionEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NodeExecutionEventRequest) */ {
 public:
  NodeExecutionEventRequest();
  virtual ~NodeExecutionEventRequest();

  NodeExecutionEventRequest(const NodeExecutionEventRequest& from);

  inline NodeExecutionEventRequest& operator=(const NodeExecutionEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionEventRequest(NodeExecutionEventRequest&& from) noexcept
    : NodeExecutionEventRequest() {
    *this = ::std::move(from);
  }

  inline NodeExecutionEventRequest& operator=(NodeExecutionEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeExecutionEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionEventRequest* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionEventRequest*>(
               &_NodeExecutionEventRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(NodeExecutionEventRequest* other);
  friend void swap(NodeExecutionEventRequest& a, NodeExecutionEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionEventRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeExecutionEventRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeExecutionEventRequest& from);
  void MergeFrom(const NodeExecutionEventRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeExecutionEventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .flyteidl.event.NodeExecutionEvent event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::flyteidl::event::NodeExecutionEvent& event() const;
  ::flyteidl::event::NodeExecutionEvent* release_event();
  ::flyteidl::event::NodeExecutionEvent* mutable_event();
  void set_allocated_event(::flyteidl::event::NodeExecutionEvent* event);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NodeExecutionEventRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::flyteidl::event::NodeExecutionEvent* event_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsNodeExecutionEventRequestImpl();
};
// -------------------------------------------------------------------

class NodeExecutionEventResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NodeExecutionEventResponse) */ {
 public:
  NodeExecutionEventResponse();
  virtual ~NodeExecutionEventResponse();

  NodeExecutionEventResponse(const NodeExecutionEventResponse& from);

  inline NodeExecutionEventResponse& operator=(const NodeExecutionEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionEventResponse(NodeExecutionEventResponse&& from) noexcept
    : NodeExecutionEventResponse() {
    *this = ::std::move(from);
  }

  inline NodeExecutionEventResponse& operator=(NodeExecutionEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeExecutionEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionEventResponse* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionEventResponse*>(
               &_NodeExecutionEventResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NodeExecutionEventResponse* other);
  friend void swap(NodeExecutionEventResponse& a, NodeExecutionEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionEventResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeExecutionEventResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeExecutionEventResponse& from);
  void MergeFrom(const NodeExecutionEventResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeExecutionEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NodeExecutionEventResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsNodeExecutionEventResponseImpl();
};
// -------------------------------------------------------------------

class TaskExecutionEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionEventRequest) */ {
 public:
  TaskExecutionEventRequest();
  virtual ~TaskExecutionEventRequest();

  TaskExecutionEventRequest(const TaskExecutionEventRequest& from);

  inline TaskExecutionEventRequest& operator=(const TaskExecutionEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionEventRequest(TaskExecutionEventRequest&& from) noexcept
    : TaskExecutionEventRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionEventRequest& operator=(TaskExecutionEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskExecutionEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionEventRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionEventRequest*>(
               &_TaskExecutionEventRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TaskExecutionEventRequest* other);
  friend void swap(TaskExecutionEventRequest& a, TaskExecutionEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionEventRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskExecutionEventRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskExecutionEventRequest& from);
  void MergeFrom(const TaskExecutionEventRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskExecutionEventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .flyteidl.event.TaskExecutionEvent event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::flyteidl::event::TaskExecutionEvent& event() const;
  ::flyteidl::event::TaskExecutionEvent* release_event();
  ::flyteidl::event::TaskExecutionEvent* mutable_event();
  void set_allocated_event(::flyteidl::event::TaskExecutionEvent* event);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionEventRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::flyteidl::event::TaskExecutionEvent* event_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsTaskExecutionEventRequestImpl();
};
// -------------------------------------------------------------------

class TaskExecutionEventResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionEventResponse) */ {
 public:
  TaskExecutionEventResponse();
  virtual ~TaskExecutionEventResponse();

  TaskExecutionEventResponse(const TaskExecutionEventResponse& from);

  inline TaskExecutionEventResponse& operator=(const TaskExecutionEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionEventResponse(TaskExecutionEventResponse&& from) noexcept
    : TaskExecutionEventResponse() {
    *this = ::std::move(from);
  }

  inline TaskExecutionEventResponse& operator=(TaskExecutionEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskExecutionEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionEventResponse* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionEventResponse*>(
               &_TaskExecutionEventResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TaskExecutionEventResponse* other);
  friend void swap(TaskExecutionEventResponse& a, TaskExecutionEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionEventResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskExecutionEventResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskExecutionEventResponse& from);
  void MergeFrom(const TaskExecutionEventResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskExecutionEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionEventResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fevent_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fevent_2eproto::InitDefaultsTaskExecutionEventResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventErrorAlreadyInTerminalState

// string current_phase = 1;
inline void EventErrorAlreadyInTerminalState::clear_current_phase() {
  current_phase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventErrorAlreadyInTerminalState::current_phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
  return current_phase_.GetNoArena();
}
inline void EventErrorAlreadyInTerminalState::set_current_phase(const ::std::string& value) {
  
  current_phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
}
#if LANG_CXX11
inline void EventErrorAlreadyInTerminalState::set_current_phase(::std::string&& value) {
  
  current_phase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
}
#endif
inline void EventErrorAlreadyInTerminalState::set_current_phase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
}
inline void EventErrorAlreadyInTerminalState::set_current_phase(const char* value, size_t size) {
  
  current_phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
}
inline ::std::string* EventErrorAlreadyInTerminalState::mutable_current_phase() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
  return current_phase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventErrorAlreadyInTerminalState::release_current_phase() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
  
  return current_phase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventErrorAlreadyInTerminalState::set_allocated_current_phase(::std::string* current_phase) {
  if (current_phase != NULL) {
    
  } else {
    
  }
  current_phase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_phase);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EventErrorAlreadyInTerminalState.current_phase)
}

// -------------------------------------------------------------------

// EventFailureReason

// .flyteidl.admin.EventErrorAlreadyInTerminalState already_in_terminal_state = 1;
inline bool EventFailureReason::has_already_in_terminal_state() const {
  return reason_case() == kAlreadyInTerminalState;
}
inline void EventFailureReason::set_has_already_in_terminal_state() {
  _oneof_case_[0] = kAlreadyInTerminalState;
}
inline void EventFailureReason::clear_already_in_terminal_state() {
  if (has_already_in_terminal_state()) {
    delete reason_.already_in_terminal_state_;
    clear_has_reason();
  }
}
inline ::flyteidl::admin::EventErrorAlreadyInTerminalState* EventFailureReason::release_already_in_terminal_state() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EventFailureReason.already_in_terminal_state)
  if (has_already_in_terminal_state()) {
    clear_has_reason();
      ::flyteidl::admin::EventErrorAlreadyInTerminalState* temp = reason_.already_in_terminal_state_;
    reason_.already_in_terminal_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::admin::EventErrorAlreadyInTerminalState& EventFailureReason::already_in_terminal_state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EventFailureReason.already_in_terminal_state)
  return has_already_in_terminal_state()
      ? *reason_.already_in_terminal_state_
      : *reinterpret_cast< ::flyteidl::admin::EventErrorAlreadyInTerminalState*>(&::flyteidl::admin::_EventErrorAlreadyInTerminalState_default_instance_);
}
inline ::flyteidl::admin::EventErrorAlreadyInTerminalState* EventFailureReason::mutable_already_in_terminal_state() {
  if (!has_already_in_terminal_state()) {
    clear_reason();
    set_has_already_in_terminal_state();
    reason_.already_in_terminal_state_ = new ::flyteidl::admin::EventErrorAlreadyInTerminalState;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EventFailureReason.already_in_terminal_state)
  return reason_.already_in_terminal_state_;
}

inline bool EventFailureReason::has_reason() const {
  return reason_case() != REASON_NOT_SET;
}
inline void EventFailureReason::clear_has_reason() {
  _oneof_case_[0] = REASON_NOT_SET;
}
inline EventFailureReason::ReasonCase EventFailureReason::reason_case() const {
  return EventFailureReason::ReasonCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkflowExecutionEventRequest

// string request_id = 1;
inline void WorkflowExecutionEventRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowExecutionEventRequest::request_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
  return request_id_.GetNoArena();
}
inline void WorkflowExecutionEventRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
}
#if LANG_CXX11
inline void WorkflowExecutionEventRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
}
#endif
inline void WorkflowExecutionEventRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
}
inline void WorkflowExecutionEventRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
}
inline ::std::string* WorkflowExecutionEventRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowExecutionEventRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowExecutionEventRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionEventRequest.request_id)
}

// .flyteidl.event.WorkflowExecutionEvent event = 2;
inline bool WorkflowExecutionEventRequest::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline const ::flyteidl::event::WorkflowExecutionEvent& WorkflowExecutionEventRequest::event() const {
  const ::flyteidl::event::WorkflowExecutionEvent* p = event_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionEventRequest.event)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::event::WorkflowExecutionEvent*>(
      &::flyteidl::event::_WorkflowExecutionEvent_default_instance_);
}
inline ::flyteidl::event::WorkflowExecutionEvent* WorkflowExecutionEventRequest::release_event() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionEventRequest.event)
  
  ::flyteidl::event::WorkflowExecutionEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::flyteidl::event::WorkflowExecutionEvent* WorkflowExecutionEventRequest::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::flyteidl::event::WorkflowExecutionEvent;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionEventRequest.event)
  return event_;
}
inline void WorkflowExecutionEventRequest::set_allocated_event(::flyteidl::event::WorkflowExecutionEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_);
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionEventRequest.event)
}

// -------------------------------------------------------------------

// WorkflowExecutionEventResponse

// -------------------------------------------------------------------

// NodeExecutionEventRequest

// string request_id = 1;
inline void NodeExecutionEventRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEventRequest::request_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NodeExecutionEventRequest.request_id)
  return request_id_.GetNoArena();
}
inline void NodeExecutionEventRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NodeExecutionEventRequest.request_id)
}
#if LANG_CXX11
inline void NodeExecutionEventRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NodeExecutionEventRequest.request_id)
}
#endif
inline void NodeExecutionEventRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NodeExecutionEventRequest.request_id)
}
inline void NodeExecutionEventRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NodeExecutionEventRequest.request_id)
}
inline ::std::string* NodeExecutionEventRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NodeExecutionEventRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEventRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NodeExecutionEventRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEventRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NodeExecutionEventRequest.request_id)
}

// .flyteidl.event.NodeExecutionEvent event = 2;
inline bool NodeExecutionEventRequest::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline const ::flyteidl::event::NodeExecutionEvent& NodeExecutionEventRequest::event() const {
  const ::flyteidl::event::NodeExecutionEvent* p = event_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NodeExecutionEventRequest.event)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::event::NodeExecutionEvent*>(
      &::flyteidl::event::_NodeExecutionEvent_default_instance_);
}
inline ::flyteidl::event::NodeExecutionEvent* NodeExecutionEventRequest::release_event() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NodeExecutionEventRequest.event)
  
  ::flyteidl::event::NodeExecutionEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::flyteidl::event::NodeExecutionEvent* NodeExecutionEventRequest::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::flyteidl::event::NodeExecutionEvent;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NodeExecutionEventRequest.event)
  return event_;
}
inline void NodeExecutionEventRequest::set_allocated_event(::flyteidl::event::NodeExecutionEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_);
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NodeExecutionEventRequest.event)
}

// -------------------------------------------------------------------

// NodeExecutionEventResponse

// -------------------------------------------------------------------

// TaskExecutionEventRequest

// string request_id = 1;
inline void TaskExecutionEventRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionEventRequest::request_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionEventRequest.request_id)
  return request_id_.GetNoArena();
}
inline void TaskExecutionEventRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionEventRequest.request_id)
}
#if LANG_CXX11
inline void TaskExecutionEventRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionEventRequest.request_id)
}
#endif
inline void TaskExecutionEventRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionEventRequest.request_id)
}
inline void TaskExecutionEventRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionEventRequest.request_id)
}
inline ::std::string* TaskExecutionEventRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionEventRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEventRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionEventRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionEventRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionEventRequest.request_id)
}

// .flyteidl.event.TaskExecutionEvent event = 2;
inline bool TaskExecutionEventRequest::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline const ::flyteidl::event::TaskExecutionEvent& TaskExecutionEventRequest::event() const {
  const ::flyteidl::event::TaskExecutionEvent* p = event_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionEventRequest.event)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::event::TaskExecutionEvent*>(
      &::flyteidl::event::_TaskExecutionEvent_default_instance_);
}
inline ::flyteidl::event::TaskExecutionEvent* TaskExecutionEventRequest::release_event() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionEventRequest.event)
  
  ::flyteidl::event::TaskExecutionEvent* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::flyteidl::event::TaskExecutionEvent* TaskExecutionEventRequest::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::flyteidl::event::TaskExecutionEvent;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionEventRequest.event)
  return event_;
}
inline void TaskExecutionEventRequest::set_allocated_event(::flyteidl::event::TaskExecutionEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_);
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionEventRequest.event)
}

// -------------------------------------------------------------------

// TaskExecutionEventResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fadmin_2fevent_2eproto__INCLUDED
