// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

#include "flyteidl/event/event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace event {
class WorkflowExecutionEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionEvent>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  const ::flyteidl::core::ExecutionError* error_;
} _WorkflowExecutionEvent_default_instance_;
class NodeExecutionEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeExecutionEvent>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  const ::flyteidl::core::ExecutionError* error_;
  const ::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata_;
} _NodeExecutionEvent_default_instance_;
class WorkflowNodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowNodeMetadata>
      _instance;
} _WorkflowNodeMetadata_default_instance_;
class ParentTaskExecutionMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParentTaskExecutionMetadata>
      _instance;
} _ParentTaskExecutionMetadata_default_instance_;
class TaskExecutionEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionEvent>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  const ::flyteidl::core::ExecutionError* error_;
} _TaskExecutionEvent_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace protobuf_flyteidl_2fevent_2fevent_2eproto {
void InitDefaultsWorkflowExecutionEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsWorkflowExecutionIdentifier();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_flyteidl_2fcore_2fexecution_2eproto::InitDefaultsExecutionError();
  {
    void* ptr = &::flyteidl::event::_WorkflowExecutionEvent_default_instance_;
    new (ptr) ::flyteidl::event::WorkflowExecutionEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::WorkflowExecutionEvent::InitAsDefaultInstance();
}

void InitDefaultsWorkflowExecutionEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowExecutionEventImpl);
}

void InitDefaultsNodeExecutionEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsNodeExecutionIdentifier();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_flyteidl_2fcore_2fexecution_2eproto::InitDefaultsExecutionError();
  protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsWorkflowNodeMetadata();
  protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsParentTaskExecutionMetadata();
  {
    void* ptr = &::flyteidl::event::_NodeExecutionEvent_default_instance_;
    new (ptr) ::flyteidl::event::NodeExecutionEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::NodeExecutionEvent::InitAsDefaultInstance();
}

void InitDefaultsNodeExecutionEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeExecutionEventImpl);
}

void InitDefaultsWorkflowNodeMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsWorkflowExecutionIdentifier();
  {
    void* ptr = &::flyteidl::event::_WorkflowNodeMetadata_default_instance_;
    new (ptr) ::flyteidl::event::WorkflowNodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::WorkflowNodeMetadata::InitAsDefaultInstance();
}

void InitDefaultsWorkflowNodeMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowNodeMetadataImpl);
}

void InitDefaultsParentTaskExecutionMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsTaskExecutionIdentifier();
  {
    void* ptr = &::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_;
    new (ptr) ::flyteidl::event::ParentTaskExecutionMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::ParentTaskExecutionMetadata::InitAsDefaultInstance();
}

void InitDefaultsParentTaskExecutionMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParentTaskExecutionMetadataImpl);
}

void InitDefaultsTaskExecutionEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsNodeExecutionIdentifier();
  protobuf_flyteidl_2fcore_2fexecution_2eproto::InitDefaultsTaskLog();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_flyteidl_2fcore_2fexecution_2eproto::InitDefaultsExecutionError();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::flyteidl::event::_TaskExecutionEvent_default_instance_;
    new (ptr) ::flyteidl::event::TaskExecutionEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::TaskExecutionEvent::InitAsDefaultInstance();
}

void InitDefaultsTaskExecutionEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskExecutionEventImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, execution_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, producer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, occurred_at_),
  offsetof(::flyteidl::event::WorkflowExecutionEventDefaultTypeInternal, output_uri_),
  offsetof(::flyteidl::event::WorkflowExecutionEventDefaultTypeInternal, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, output_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, producer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, occurred_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, input_uri_),
  offsetof(::flyteidl::event::NodeExecutionEventDefaultTypeInternal, output_uri_),
  offsetof(::flyteidl::event::NodeExecutionEventDefaultTypeInternal, error_),
  offsetof(::flyteidl::event::NodeExecutionEventDefaultTypeInternal, workflow_node_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, parent_task_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, output_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, target_metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::WorkflowNodeMetadata, execution_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::ParentTaskExecutionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::ParentTaskExecutionMetadata, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, parent_node_execution_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, retry_attempt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, producer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, occurred_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, input_uri_),
  offsetof(::flyteidl::event::TaskExecutionEventDefaultTypeInternal, output_uri_),
  offsetof(::flyteidl::event::TaskExecutionEventDefaultTypeInternal, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, custom_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, phase_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, output_result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::event::WorkflowExecutionEvent)},
  { 12, -1, sizeof(::flyteidl::event::NodeExecutionEvent)},
  { 28, -1, sizeof(::flyteidl::event::WorkflowNodeMetadata)},
  { 34, -1, sizeof(::flyteidl::event::ParentTaskExecutionMetadata)},
  { 40, -1, sizeof(::flyteidl::event::TaskExecutionEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_WorkflowExecutionEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_NodeExecutionEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_WorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_TaskExecutionEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/event/event.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032flyteidl/event/event.proto\022\016flyteidl.e"
      "vent\032\035flyteidl/core/execution.proto\032\036fly"
      "teidl/core/identifier.proto\032\037google/prot"
      "obuf/timestamp.proto\032\034google/protobuf/st"
      "ruct.proto\"\256\002\n\026WorkflowExecutionEvent\022@\n"
      "\014execution_id\030\001 \001(\0132*.flyteidl.core.Work"
      "flowExecutionIdentifier\022\023\n\013producer_id\030\002"
      " \001(\t\0225\n\005phase\030\003 \001(\0162&.flyteidl.core.Work"
      "flowExecution.Phase\022/\n\013occurred_at\030\004 \001(\013"
      "2\032.google.protobuf.Timestamp\022\024\n\noutput_u"
      "ri\030\005 \001(\tH\000\022.\n\005error\030\006 \001(\0132\035.flyteidl.cor"
      "e.ExecutionErrorH\000B\017\n\routput_result\"\321\003\n\022"
      "NodeExecutionEvent\0222\n\002id\030\001 \001(\0132&.flyteid"
      "l.core.NodeExecutionIdentifier\022\023\n\013produc"
      "er_id\030\002 \001(\t\0221\n\005phase\030\003 \001(\0162\".flyteidl.co"
      "re.NodeExecution.Phase\022/\n\013occurred_at\030\004 "
      "\001(\0132\032.google.protobuf.Timestamp\022\021\n\tinput"
      "_uri\030\005 \001(\t\022\024\n\noutput_uri\030\006 \001(\tH\000\022.\n\005erro"
      "r\030\007 \001(\0132\035.flyteidl.core.ExecutionErrorH\000"
      "\022F\n\026workflow_node_metadata\030\010 \001(\0132$.flyte"
      "idl.event.WorkflowNodeMetadataH\001\022I\n\024pare"
      "nt_task_metadata\030\t \001(\0132+.flyteidl.event."
      "ParentTaskExecutionMetadataB\017\n\routput_re"
      "sultB\021\n\017target_metadata\"X\n\024WorkflowNodeM"
      "etadata\022@\n\014execution_id\030\001 \001(\0132*.flyteidl"
      ".core.WorkflowExecutionIdentifier\"Q\n\033Par"
      "entTaskExecutionMetadata\0222\n\002id\030\001 \001(\0132&.f"
      "lyteidl.core.TaskExecutionIdentifier\"\357\003\n"
      "\022TaskExecutionEvent\022*\n\007task_id\030\001 \001(\0132\031.f"
      "lyteidl.core.Identifier\022H\n\030parent_node_e"
      "xecution_id\030\002 \001(\0132&.flyteidl.core.NodeEx"
      "ecutionIdentifier\022\025\n\rretry_attempt\030\003 \001(\r"
      "\0221\n\005phase\030\004 \001(\0162\".flyteidl.core.TaskExec"
      "ution.Phase\022\023\n\013producer_id\030\005 \001(\t\022$\n\004logs"
      "\030\006 \003(\0132\026.flyteidl.core.TaskLog\022/\n\013occurr"
      "ed_at\030\007 \001(\0132\032.google.protobuf.Timestamp\022"
      "\021\n\tinput_uri\030\010 \001(\t\022\024\n\noutput_uri\030\t \001(\tH\000"
      "\022.\n\005error\030\n \001(\0132\035.flyteidl.core.Executio"
      "nErrorH\000\022,\n\013custom_info\030\013 \001(\0132\027.google.p"
      "rotobuf.Struct\022\025\n\rphase_version\030\014 \001(\rB\017\n"
      "\routput_resultB3Z1github.com/lyft/flytei"
      "dl/gen/pb-go/flyteidl/eventb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/event/event.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fexecution_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fevent_2fevent_2eproto
namespace flyteidl {
namespace event {

// ===================================================================

void WorkflowExecutionEvent::InitAsDefaultInstance() {
  ::flyteidl::event::_WorkflowExecutionEvent_default_instance_._instance.get_mutable()->execution_id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::event::_WorkflowExecutionEvent_default_instance_._instance.get_mutable()->occurred_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::event::_WorkflowExecutionEvent_default_instance_.output_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::event::_WorkflowExecutionEvent_default_instance_.error_ = const_cast< ::flyteidl::core::ExecutionError*>(
      ::flyteidl::core::ExecutionError::internal_default_instance());
}
void WorkflowExecutionEvent::clear_execution_id() {
  if (GetArenaNoVirtual() == NULL && execution_id_ != NULL) {
    delete execution_id_;
  }
  execution_id_ = NULL;
}
void WorkflowExecutionEvent::clear_occurred_at() {
  if (GetArenaNoVirtual() == NULL && occurred_at_ != NULL) {
    delete occurred_at_;
  }
  occurred_at_ = NULL;
}
void WorkflowExecutionEvent::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.error)
}
void WorkflowExecutionEvent::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionEvent::kExecutionIdFieldNumber;
const int WorkflowExecutionEvent::kProducerIdFieldNumber;
const int WorkflowExecutionEvent::kPhaseFieldNumber;
const int WorkflowExecutionEvent::kOccurredAtFieldNumber;
const int WorkflowExecutionEvent::kOutputUriFieldNumber;
const int WorkflowExecutionEvent::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionEvent::WorkflowExecutionEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsWorkflowExecutionEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.WorkflowExecutionEvent)
}
WorkflowExecutionEvent::WorkflowExecutionEvent(const WorkflowExecutionEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  producer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer_id().size() > 0) {
    producer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_id_);
  }
  if (from.has_execution_id()) {
    execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = NULL;
  }
  if (from.has_occurred_at()) {
    occurred_at_ = new ::google::protobuf::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = NULL;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.WorkflowExecutionEvent)
}

void WorkflowExecutionEvent::SharedCtor() {
  producer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&execution_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&execution_id_)) + sizeof(phase_));
  clear_has_output_result();
  _cached_size_ = 0;
}

WorkflowExecutionEvent::~WorkflowExecutionEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.WorkflowExecutionEvent)
  SharedDtor();
}

void WorkflowExecutionEvent::SharedDtor() {
  producer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete execution_id_;
  if (this != internal_default_instance()) delete occurred_at_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void WorkflowExecutionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowExecutionEvent::descriptor() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowExecutionEvent& WorkflowExecutionEvent::default_instance() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsWorkflowExecutionEvent();
  return *internal_default_instance();
}

WorkflowExecutionEvent* WorkflowExecutionEvent::New(::google::protobuf::Arena* arena) const {
  WorkflowExecutionEvent* n = new WorkflowExecutionEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowExecutionEvent::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.WorkflowExecutionEvent)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void WorkflowExecutionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.WorkflowExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && execution_id_ != NULL) {
    delete execution_id_;
  }
  execution_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && occurred_at_ != NULL) {
    delete occurred_at_;
  }
  occurred_at_ = NULL;
  phase_ = 0;
  clear_output_result();
  _internal_metadata_.Clear();
}

bool WorkflowExecutionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.WorkflowExecutionEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string producer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_id().data(), static_cast<int>(this->producer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.WorkflowExecutionEvent.producer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecution.Phase phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp occurred_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occurred_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.WorkflowExecutionEvent.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionError error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.WorkflowExecutionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.WorkflowExecutionEvent)
  return false;
#undef DO_
}

void WorkflowExecutionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.WorkflowExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->execution_id_, output);
  }

  // string producer_id = 2;
  if (this->producer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_id().data(), static_cast<int>(this->producer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.WorkflowExecutionEvent.producer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->producer_id(), output);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phase(), output);
  }

  // .google.protobuf.Timestamp occurred_at = 4;
  if (this->has_occurred_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->occurred_at_, output);
  }

  // string output_uri = 5;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.WorkflowExecutionEvent.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->output_uri(), output);
  }

  // .flyteidl.core.ExecutionError error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *output_result_.error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.WorkflowExecutionEvent)
}

::google::protobuf::uint8* WorkflowExecutionEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.WorkflowExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->execution_id_, deterministic, target);
  }

  // string producer_id = 2;
  if (this->producer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_id().data(), static_cast<int>(this->producer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.WorkflowExecutionEvent.producer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->producer_id(), target);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phase(), target);
  }

  // .google.protobuf.Timestamp occurred_at = 4;
  if (this->has_occurred_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->occurred_at_, deterministic, target);
  }

  // string output_uri = 5;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.WorkflowExecutionEvent.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_uri(), target);
  }

  // .flyteidl.core.ExecutionError error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *output_result_.error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.WorkflowExecutionEvent)
  return target;
}

size_t WorkflowExecutionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.WorkflowExecutionEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string producer_id = 2;
  if (this->producer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_id());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->execution_id_);
  }

  // .google.protobuf.Timestamp occurred_at = 4;
  if (this->has_occurred_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->occurred_at_);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  switch (output_result_case()) {
    // string output_uri = 5;
    case kOutputUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_uri());
      break;
    }
    // .flyteidl.core.ExecutionError error = 6;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowExecutionEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.WorkflowExecutionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowExecutionEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.WorkflowExecutionEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.WorkflowExecutionEvent)
    MergeFrom(*source);
  }
}

void WorkflowExecutionEvent::MergeFrom(const WorkflowExecutionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.WorkflowExecutionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.producer_id().size() > 0) {

    producer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_id_);
  }
  if (from.has_execution_id()) {
    mutable_execution_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution_id());
  }
  if (from.has_occurred_at()) {
    mutable_occurred_at()->::google::protobuf::Timestamp::MergeFrom(from.occurred_at());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
}

void WorkflowExecutionEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.WorkflowExecutionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionEvent::CopyFrom(const WorkflowExecutionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.WorkflowExecutionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionEvent::IsInitialized() const {
  return true;
}

void WorkflowExecutionEvent::Swap(WorkflowExecutionEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionEvent::InternalSwap(WorkflowExecutionEvent* other) {
  using std::swap;
  producer_id_.Swap(&other->producer_id_);
  swap(execution_id_, other->execution_id_);
  swap(occurred_at_, other->occurred_at_);
  swap(phase_, other->phase_);
  swap(output_result_, other->output_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowExecutionEvent::GetMetadata() const {
  protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeExecutionEvent::InitAsDefaultInstance() {
  ::flyteidl::event::_NodeExecutionEvent_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::event::_NodeExecutionEvent_default_instance_._instance.get_mutable()->occurred_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::event::_NodeExecutionEvent_default_instance_.output_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::event::_NodeExecutionEvent_default_instance_.error_ = const_cast< ::flyteidl::core::ExecutionError*>(
      ::flyteidl::core::ExecutionError::internal_default_instance());
  ::flyteidl::event::_NodeExecutionEvent_default_instance_.workflow_node_metadata_ = const_cast< ::flyteidl::event::WorkflowNodeMetadata*>(
      ::flyteidl::event::WorkflowNodeMetadata::internal_default_instance());
  ::flyteidl::event::_NodeExecutionEvent_default_instance_._instance.get_mutable()->parent_task_metadata_ = const_cast< ::flyteidl::event::ParentTaskExecutionMetadata*>(
      ::flyteidl::event::ParentTaskExecutionMetadata::internal_default_instance());
}
void NodeExecutionEvent::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void NodeExecutionEvent::clear_occurred_at() {
  if (GetArenaNoVirtual() == NULL && occurred_at_ != NULL) {
    delete occurred_at_;
  }
  occurred_at_ = NULL;
}
void NodeExecutionEvent::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.error)
}
void NodeExecutionEvent::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
void NodeExecutionEvent::set_allocated_workflow_node_metadata(::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target_metadata();
  if (workflow_node_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      workflow_node_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_node_metadata, submessage_arena);
    }
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = workflow_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecutionEvent::kIdFieldNumber;
const int NodeExecutionEvent::kProducerIdFieldNumber;
const int NodeExecutionEvent::kPhaseFieldNumber;
const int NodeExecutionEvent::kOccurredAtFieldNumber;
const int NodeExecutionEvent::kInputUriFieldNumber;
const int NodeExecutionEvent::kOutputUriFieldNumber;
const int NodeExecutionEvent::kErrorFieldNumber;
const int NodeExecutionEvent::kWorkflowNodeMetadataFieldNumber;
const int NodeExecutionEvent::kParentTaskMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecutionEvent::NodeExecutionEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsNodeExecutionEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.NodeExecutionEvent)
}
NodeExecutionEvent::NodeExecutionEvent(const NodeExecutionEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  producer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer_id().size() > 0) {
    producer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_id_);
  }
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_occurred_at()) {
    occurred_at_ = new ::google::protobuf::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = NULL;
  }
  if (from.has_parent_task_metadata()) {
    parent_task_metadata_ = new ::flyteidl::event::ParentTaskExecutionMetadata(*from.parent_task_metadata_);
  } else {
    parent_task_metadata_ = NULL;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  clear_has_target_metadata();
  switch (from.target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      mutable_workflow_node_metadata()->::flyteidl::event::WorkflowNodeMetadata::MergeFrom(from.workflow_node_metadata());
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.NodeExecutionEvent)
}

void NodeExecutionEvent::SharedCtor() {
  producer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&id_)) + sizeof(phase_));
  clear_has_output_result();
  clear_has_target_metadata();
  _cached_size_ = 0;
}

NodeExecutionEvent::~NodeExecutionEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.NodeExecutionEvent)
  SharedDtor();
}

void NodeExecutionEvent::SharedDtor() {
  producer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete occurred_at_;
  if (this != internal_default_instance()) delete parent_task_metadata_;
  if (has_output_result()) {
    clear_output_result();
  }
  if (has_target_metadata()) {
    clear_target_metadata();
  }
}

void NodeExecutionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeExecutionEvent::descriptor() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeExecutionEvent& NodeExecutionEvent::default_instance() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsNodeExecutionEvent();
  return *internal_default_instance();
}

NodeExecutionEvent* NodeExecutionEvent::New(::google::protobuf::Arena* arena) const {
  NodeExecutionEvent* n = new NodeExecutionEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeExecutionEvent::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.NodeExecutionEvent)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}

void NodeExecutionEvent::clear_target_metadata() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.NodeExecutionEvent)
  switch (target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      delete target_metadata_.workflow_node_metadata_;
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}


void NodeExecutionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.NodeExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && occurred_at_ != NULL) {
    delete occurred_at_;
  }
  occurred_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && parent_task_metadata_ != NULL) {
    delete parent_task_metadata_;
  }
  parent_task_metadata_ = NULL;
  phase_ = 0;
  clear_output_result();
  clear_target_metadata();
  _internal_metadata_.Clear();
}

bool NodeExecutionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.NodeExecutionEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.NodeExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string producer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_id().data(), static_cast<int>(this->producer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.NodeExecutionEvent.producer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeExecution.Phase phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::NodeExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp occurred_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occurred_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.NodeExecutionEvent.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_uri = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.NodeExecutionEvent.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionError error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_task_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.NodeExecutionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.NodeExecutionEvent)
  return false;
#undef DO_
}

void NodeExecutionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.NodeExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // string producer_id = 2;
  if (this->producer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_id().data(), static_cast<int>(this->producer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.NodeExecutionEvent.producer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->producer_id(), output);
  }

  // .flyteidl.core.NodeExecution.Phase phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phase(), output);
  }

  // .google.protobuf.Timestamp occurred_at = 4;
  if (this->has_occurred_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->occurred_at_, output);
  }

  // string input_uri = 5;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.NodeExecutionEvent.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->input_uri(), output);
  }

  // string output_uri = 6;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.NodeExecutionEvent.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->output_uri(), output);
  }

  // .flyteidl.core.ExecutionError error = 7;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *output_result_.error_, output);
  }

  // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
  if (has_workflow_node_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *target_metadata_.workflow_node_metadata_, output);
  }

  // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
  if (this->has_parent_task_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->parent_task_metadata_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.NodeExecutionEvent)
}

::google::protobuf::uint8* NodeExecutionEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.NodeExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // string producer_id = 2;
  if (this->producer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_id().data(), static_cast<int>(this->producer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.NodeExecutionEvent.producer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->producer_id(), target);
  }

  // .flyteidl.core.NodeExecution.Phase phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phase(), target);
  }

  // .google.protobuf.Timestamp occurred_at = 4;
  if (this->has_occurred_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->occurred_at_, deterministic, target);
  }

  // string input_uri = 5;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.NodeExecutionEvent.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->input_uri(), target);
  }

  // string output_uri = 6;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.NodeExecutionEvent.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->output_uri(), target);
  }

  // .flyteidl.core.ExecutionError error = 7;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *output_result_.error_, deterministic, target);
  }

  // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
  if (has_workflow_node_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *target_metadata_.workflow_node_metadata_, deterministic, target);
  }

  // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
  if (this->has_parent_task_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->parent_task_metadata_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.NodeExecutionEvent)
  return target;
}

size_t NodeExecutionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.NodeExecutionEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string producer_id = 2;
  if (this->producer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_id());
  }

  // string input_uri = 5;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .flyteidl.core.NodeExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .google.protobuf.Timestamp occurred_at = 4;
  if (this->has_occurred_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->occurred_at_);
  }

  // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
  if (this->has_parent_task_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parent_task_metadata_);
  }

  // .flyteidl.core.NodeExecution.Phase phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  switch (output_result_case()) {
    // string output_uri = 6;
    case kOutputUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_uri());
      break;
    }
    // .flyteidl.core.ExecutionError error = 7;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  switch (target_metadata_case()) {
    // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
    case kWorkflowNodeMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_metadata_.workflow_node_metadata_);
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeExecutionEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.NodeExecutionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecutionEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeExecutionEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.NodeExecutionEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.NodeExecutionEvent)
    MergeFrom(*source);
  }
}

void NodeExecutionEvent::MergeFrom(const NodeExecutionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.NodeExecutionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.producer_id().size() > 0) {

    producer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_id_);
  }
  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.has_occurred_at()) {
    mutable_occurred_at()->::google::protobuf::Timestamp::MergeFrom(from.occurred_at());
  }
  if (from.has_parent_task_metadata()) {
    mutable_parent_task_metadata()->::flyteidl::event::ParentTaskExecutionMetadata::MergeFrom(from.parent_task_metadata());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  switch (from.target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      mutable_workflow_node_metadata()->::flyteidl::event::WorkflowNodeMetadata::MergeFrom(from.workflow_node_metadata());
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
}

void NodeExecutionEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.NodeExecutionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecutionEvent::CopyFrom(const NodeExecutionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.NodeExecutionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecutionEvent::IsInitialized() const {
  return true;
}

void NodeExecutionEvent::Swap(NodeExecutionEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeExecutionEvent::InternalSwap(NodeExecutionEvent* other) {
  using std::swap;
  producer_id_.Swap(&other->producer_id_);
  input_uri_.Swap(&other->input_uri_);
  swap(id_, other->id_);
  swap(occurred_at_, other->occurred_at_);
  swap(parent_task_metadata_, other->parent_task_metadata_);
  swap(phase_, other->phase_);
  swap(output_result_, other->output_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(target_metadata_, other->target_metadata_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeExecutionEvent::GetMetadata() const {
  protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowNodeMetadata::InitAsDefaultInstance() {
  ::flyteidl::event::_WorkflowNodeMetadata_default_instance_._instance.get_mutable()->execution_id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
void WorkflowNodeMetadata::clear_execution_id() {
  if (GetArenaNoVirtual() == NULL && execution_id_ != NULL) {
    delete execution_id_;
  }
  execution_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowNodeMetadata::kExecutionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowNodeMetadata::WorkflowNodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsWorkflowNodeMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.WorkflowNodeMetadata)
}
WorkflowNodeMetadata::WorkflowNodeMetadata(const WorkflowNodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_execution_id()) {
    execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.WorkflowNodeMetadata)
}

void WorkflowNodeMetadata::SharedCtor() {
  execution_id_ = NULL;
  _cached_size_ = 0;
}

WorkflowNodeMetadata::~WorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.WorkflowNodeMetadata)
  SharedDtor();
}

void WorkflowNodeMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete execution_id_;
}

void WorkflowNodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowNodeMetadata::descriptor() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowNodeMetadata& WorkflowNodeMetadata::default_instance() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsWorkflowNodeMetadata();
  return *internal_default_instance();
}

WorkflowNodeMetadata* WorkflowNodeMetadata::New(::google::protobuf::Arena* arena) const {
  WorkflowNodeMetadata* n = new WorkflowNodeMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowNodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.WorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && execution_id_ != NULL) {
    delete execution_id_;
  }
  execution_id_ = NULL;
  _internal_metadata_.Clear();
}

bool WorkflowNodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.WorkflowNodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.WorkflowNodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.WorkflowNodeMetadata)
  return false;
#undef DO_
}

void WorkflowNodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.WorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->execution_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.WorkflowNodeMetadata)
}

::google::protobuf::uint8* WorkflowNodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.WorkflowNodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->execution_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.WorkflowNodeMetadata)
  return target;
}

size_t WorkflowNodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.WorkflowNodeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  if (this->has_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->execution_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowNodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.WorkflowNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowNodeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowNodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.WorkflowNodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.WorkflowNodeMetadata)
    MergeFrom(*source);
  }
}

void WorkflowNodeMetadata::MergeFrom(const WorkflowNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.WorkflowNodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_execution_id()) {
    mutable_execution_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution_id());
  }
}

void WorkflowNodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.WorkflowNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowNodeMetadata::CopyFrom(const WorkflowNodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.WorkflowNodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNodeMetadata::IsInitialized() const {
  return true;
}

void WorkflowNodeMetadata::Swap(WorkflowNodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowNodeMetadata::InternalSwap(WorkflowNodeMetadata* other) {
  using std::swap;
  swap(execution_id_, other->execution_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowNodeMetadata::GetMetadata() const {
  protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParentTaskExecutionMetadata::InitAsDefaultInstance() {
  ::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
}
void ParentTaskExecutionMetadata::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParentTaskExecutionMetadata::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParentTaskExecutionMetadata::ParentTaskExecutionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsParentTaskExecutionMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.ParentTaskExecutionMetadata)
}
ParentTaskExecutionMetadata::ParentTaskExecutionMetadata(const ParentTaskExecutionMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.ParentTaskExecutionMetadata)
}

void ParentTaskExecutionMetadata::SharedCtor() {
  id_ = NULL;
  _cached_size_ = 0;
}

ParentTaskExecutionMetadata::~ParentTaskExecutionMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.ParentTaskExecutionMetadata)
  SharedDtor();
}

void ParentTaskExecutionMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ParentTaskExecutionMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParentTaskExecutionMetadata::descriptor() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParentTaskExecutionMetadata& ParentTaskExecutionMetadata::default_instance() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsParentTaskExecutionMetadata();
  return *internal_default_instance();
}

ParentTaskExecutionMetadata* ParentTaskExecutionMetadata::New(::google::protobuf::Arena* arena) const {
  ParentTaskExecutionMetadata* n = new ParentTaskExecutionMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParentTaskExecutionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.ParentTaskExecutionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool ParentTaskExecutionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.ParentTaskExecutionMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.ParentTaskExecutionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.ParentTaskExecutionMetadata)
  return false;
#undef DO_
}

void ParentTaskExecutionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.ParentTaskExecutionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.ParentTaskExecutionMetadata)
}

::google::protobuf::uint8* ParentTaskExecutionMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.ParentTaskExecutionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.ParentTaskExecutionMetadata)
  return target;
}

size_t ParentTaskExecutionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.ParentTaskExecutionMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParentTaskExecutionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.ParentTaskExecutionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentTaskExecutionMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParentTaskExecutionMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.ParentTaskExecutionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.ParentTaskExecutionMetadata)
    MergeFrom(*source);
  }
}

void ParentTaskExecutionMetadata::MergeFrom(const ParentTaskExecutionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.ParentTaskExecutionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
}

void ParentTaskExecutionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.ParentTaskExecutionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentTaskExecutionMetadata::CopyFrom(const ParentTaskExecutionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.ParentTaskExecutionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentTaskExecutionMetadata::IsInitialized() const {
  return true;
}

void ParentTaskExecutionMetadata::Swap(ParentTaskExecutionMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParentTaskExecutionMetadata::InternalSwap(ParentTaskExecutionMetadata* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParentTaskExecutionMetadata::GetMetadata() const {
  protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionEvent::InitAsDefaultInstance() {
  ::flyteidl::event::_TaskExecutionEvent_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::event::_TaskExecutionEvent_default_instance_._instance.get_mutable()->parent_node_execution_id_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::event::_TaskExecutionEvent_default_instance_._instance.get_mutable()->occurred_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::event::_TaskExecutionEvent_default_instance_.output_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::event::_TaskExecutionEvent_default_instance_.error_ = const_cast< ::flyteidl::core::ExecutionError*>(
      ::flyteidl::core::ExecutionError::internal_default_instance());
  ::flyteidl::event::_TaskExecutionEvent_default_instance_._instance.get_mutable()->custom_info_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void TaskExecutionEvent::clear_task_id() {
  if (GetArenaNoVirtual() == NULL && task_id_ != NULL) {
    delete task_id_;
  }
  task_id_ = NULL;
}
void TaskExecutionEvent::clear_parent_node_execution_id() {
  if (GetArenaNoVirtual() == NULL && parent_node_execution_id_ != NULL) {
    delete parent_node_execution_id_;
  }
  parent_node_execution_id_ = NULL;
}
void TaskExecutionEvent::clear_logs() {
  logs_.Clear();
}
void TaskExecutionEvent::clear_occurred_at() {
  if (GetArenaNoVirtual() == NULL && occurred_at_ != NULL) {
    delete occurred_at_;
  }
  occurred_at_ = NULL;
}
void TaskExecutionEvent::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.error)
}
void TaskExecutionEvent::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
void TaskExecutionEvent::clear_custom_info() {
  if (GetArenaNoVirtual() == NULL && custom_info_ != NULL) {
    delete custom_info_;
  }
  custom_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionEvent::kTaskIdFieldNumber;
const int TaskExecutionEvent::kParentNodeExecutionIdFieldNumber;
const int TaskExecutionEvent::kRetryAttemptFieldNumber;
const int TaskExecutionEvent::kPhaseFieldNumber;
const int TaskExecutionEvent::kProducerIdFieldNumber;
const int TaskExecutionEvent::kLogsFieldNumber;
const int TaskExecutionEvent::kOccurredAtFieldNumber;
const int TaskExecutionEvent::kInputUriFieldNumber;
const int TaskExecutionEvent::kOutputUriFieldNumber;
const int TaskExecutionEvent::kErrorFieldNumber;
const int TaskExecutionEvent::kCustomInfoFieldNumber;
const int TaskExecutionEvent::kPhaseVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionEvent::TaskExecutionEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsTaskExecutionEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.TaskExecutionEvent)
}
TaskExecutionEvent::TaskExecutionEvent(const TaskExecutionEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logs_(from.logs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  producer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer_id().size() > 0) {
    producer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_id_);
  }
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_task_id()) {
    task_id_ = new ::flyteidl::core::Identifier(*from.task_id_);
  } else {
    task_id_ = NULL;
  }
  if (from.has_parent_node_execution_id()) {
    parent_node_execution_id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.parent_node_execution_id_);
  } else {
    parent_node_execution_id_ = NULL;
  }
  if (from.has_occurred_at()) {
    occurred_at_ = new ::google::protobuf::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = NULL;
  }
  if (from.has_custom_info()) {
    custom_info_ = new ::google::protobuf::Struct(*from.custom_info_);
  } else {
    custom_info_ = NULL;
  }
  ::memcpy(&retry_attempt_, &from.retry_attempt_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_version_) -
    reinterpret_cast<char*>(&retry_attempt_)) + sizeof(phase_version_));
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.TaskExecutionEvent)
}

void TaskExecutionEvent::SharedCtor() {
  producer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_version_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(phase_version_));
  clear_has_output_result();
  _cached_size_ = 0;
}

TaskExecutionEvent::~TaskExecutionEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.TaskExecutionEvent)
  SharedDtor();
}

void TaskExecutionEvent::SharedDtor() {
  producer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete parent_node_execution_id_;
  if (this != internal_default_instance()) delete occurred_at_;
  if (this != internal_default_instance()) delete custom_info_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void TaskExecutionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExecutionEvent::descriptor() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskExecutionEvent& TaskExecutionEvent::default_instance() {
  ::protobuf_flyteidl_2fevent_2fevent_2eproto::InitDefaultsTaskExecutionEvent();
  return *internal_default_instance();
}

TaskExecutionEvent* TaskExecutionEvent::New(::google::protobuf::Arena* arena) const {
  TaskExecutionEvent* n = new TaskExecutionEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskExecutionEvent::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.TaskExecutionEvent)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void TaskExecutionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.TaskExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && task_id_ != NULL) {
    delete task_id_;
  }
  task_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && parent_node_execution_id_ != NULL) {
    delete parent_node_execution_id_;
  }
  parent_node_execution_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && occurred_at_ != NULL) {
    delete occurred_at_;
  }
  occurred_at_ = NULL;
  if (GetArenaNoVirtual() == NULL && custom_info_ != NULL) {
    delete custom_info_;
  }
  custom_info_ = NULL;
  ::memset(&retry_attempt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_version_) -
      reinterpret_cast<char*>(&retry_attempt_)) + sizeof(phase_version_));
  clear_output_result();
  _internal_metadata_.Clear();
}

bool TaskExecutionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.TaskExecutionEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_node_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 retry_attempt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskExecution.Phase phase = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::TaskExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string producer_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer_id().data(), static_cast<int>(this->producer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.TaskExecutionEvent.producer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.TaskLog logs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp occurred_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occurred_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_uri = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.TaskExecutionEvent.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_uri = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.event.TaskExecutionEvent.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionError error = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct custom_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 phase_version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.TaskExecutionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.TaskExecutionEvent)
  return false;
#undef DO_
}

void TaskExecutionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.TaskExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier task_id = 1;
  if (this->has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->task_id_, output);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
  if (this->has_parent_node_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parent_node_execution_id_, output);
  }

  // uint32 retry_attempt = 3;
  if (this->retry_attempt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retry_attempt(), output);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 4;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->phase(), output);
  }

  // string producer_id = 5;
  if (this->producer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_id().data(), static_cast<int>(this->producer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.TaskExecutionEvent.producer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->producer_id(), output);
  }

  // repeated .flyteidl.core.TaskLog logs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->logs(static_cast<int>(i)), output);
  }

  // .google.protobuf.Timestamp occurred_at = 7;
  if (this->has_occurred_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->occurred_at_, output);
  }

  // string input_uri = 8;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.TaskExecutionEvent.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->input_uri(), output);
  }

  // string output_uri = 9;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.TaskExecutionEvent.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->output_uri(), output);
  }

  // .flyteidl.core.ExecutionError error = 10;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *output_result_.error_, output);
  }

  // .google.protobuf.Struct custom_info = 11;
  if (this->has_custom_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->custom_info_, output);
  }

  // uint32 phase_version = 12;
  if (this->phase_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->phase_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.TaskExecutionEvent)
}

::google::protobuf::uint8* TaskExecutionEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.TaskExecutionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier task_id = 1;
  if (this->has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->task_id_, deterministic, target);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
  if (this->has_parent_node_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->parent_node_execution_id_, deterministic, target);
  }

  // uint32 retry_attempt = 3;
  if (this->retry_attempt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retry_attempt(), target);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 4;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->phase(), target);
  }

  // string producer_id = 5;
  if (this->producer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer_id().data(), static_cast<int>(this->producer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.TaskExecutionEvent.producer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->producer_id(), target);
  }

  // repeated .flyteidl.core.TaskLog logs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->logs(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.Timestamp occurred_at = 7;
  if (this->has_occurred_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->occurred_at_, deterministic, target);
  }

  // string input_uri = 8;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.TaskExecutionEvent.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->input_uri(), target);
  }

  // string output_uri = 9;
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.event.TaskExecutionEvent.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->output_uri(), target);
  }

  // .flyteidl.core.ExecutionError error = 10;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *output_result_.error_, deterministic, target);
  }

  // .google.protobuf.Struct custom_info = 11;
  if (this->has_custom_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->custom_info_, deterministic, target);
  }

  // uint32 phase_version = 12;
  if (this->phase_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->phase_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.TaskExecutionEvent)
  return target;
}

size_t TaskExecutionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.TaskExecutionEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.core.TaskLog logs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  // string producer_id = 5;
  if (this->producer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer_id());
  }

  // string input_uri = 8;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .flyteidl.core.Identifier task_id = 1;
  if (this->has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->task_id_);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
  if (this->has_parent_node_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parent_node_execution_id_);
  }

  // .google.protobuf.Timestamp occurred_at = 7;
  if (this->has_occurred_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->occurred_at_);
  }

  // .google.protobuf.Struct custom_info = 11;
  if (this->has_custom_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->custom_info_);
  }

  // uint32 retry_attempt = 3;
  if (this->retry_attempt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retry_attempt());
  }

  // .flyteidl.core.TaskExecution.Phase phase = 4;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  // uint32 phase_version = 12;
  if (this->phase_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase_version());
  }

  switch (output_result_case()) {
    // string output_uri = 9;
    case kOutputUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_uri());
      break;
    }
    // .flyteidl.core.ExecutionError error = 10;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExecutionEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.TaskExecutionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskExecutionEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.TaskExecutionEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.TaskExecutionEvent)
    MergeFrom(*source);
  }
}

void TaskExecutionEvent::MergeFrom(const TaskExecutionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.TaskExecutionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.producer_id().size() > 0) {

    producer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer_id_);
  }
  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_task_id()) {
    mutable_task_id()->::flyteidl::core::Identifier::MergeFrom(from.task_id());
  }
  if (from.has_parent_node_execution_id()) {
    mutable_parent_node_execution_id()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.parent_node_execution_id());
  }
  if (from.has_occurred_at()) {
    mutable_occurred_at()->::google::protobuf::Timestamp::MergeFrom(from.occurred_at());
  }
  if (from.has_custom_info()) {
    mutable_custom_info()->::google::protobuf::Struct::MergeFrom(from.custom_info());
  }
  if (from.retry_attempt() != 0) {
    set_retry_attempt(from.retry_attempt());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  if (from.phase_version() != 0) {
    set_phase_version(from.phase_version());
  }
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
}

void TaskExecutionEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.TaskExecutionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionEvent::CopyFrom(const TaskExecutionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.TaskExecutionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionEvent::IsInitialized() const {
  return true;
}

void TaskExecutionEvent::Swap(TaskExecutionEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionEvent::InternalSwap(TaskExecutionEvent* other) {
  using std::swap;
  logs_.InternalSwap(&other->logs_);
  producer_id_.Swap(&other->producer_id_);
  input_uri_.Swap(&other->input_uri_);
  swap(task_id_, other->task_id_);
  swap(parent_node_execution_id_, other->parent_node_execution_id_);
  swap(occurred_at_, other->occurred_at_);
  swap(custom_info_, other->custom_info_);
  swap(retry_attempt_, other->retry_attempt_);
  swap(phase_, other->phase_);
  swap(phase_version_, other->phase_version_);
  swap(output_result_, other->output_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskExecutionEvent::GetMetadata() const {
  protobuf_flyteidl_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
