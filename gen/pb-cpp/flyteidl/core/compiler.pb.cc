// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/compiler.proto

#include "flyteidl/core/compiler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace core {
class ConnectionSet_IdListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionSet_IdList>
      _instance;
} _ConnectionSet_IdList_default_instance_;
class ConnectionSet_DownstreamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionSet_DownstreamEntry_DoNotUse>
      _instance;
} _ConnectionSet_DownstreamEntry_DoNotUse_default_instance_;
class ConnectionSet_UpstreamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionSet_UpstreamEntry_DoNotUse>
      _instance;
} _ConnectionSet_UpstreamEntry_DoNotUse_default_instance_;
class ConnectionSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionSet>
      _instance;
} _ConnectionSet_default_instance_;
class CompiledWorkflowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompiledWorkflow>
      _instance;
} _CompiledWorkflow_default_instance_;
class CompiledTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompiledTask>
      _instance;
} _CompiledTask_default_instance_;
class CompiledWorkflowClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompiledWorkflowClosure>
      _instance;
} _CompiledWorkflowClosure_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace protobuf_flyteidl_2fcore_2fcompiler_2eproto {
void InitDefaultsConnectionSet_IdListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::core::_ConnectionSet_IdList_default_instance_;
    new (ptr) ::flyteidl::core::ConnectionSet_IdList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ConnectionSet_IdList::InitAsDefaultInstance();
}

void InitDefaultsConnectionSet_IdList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionSet_IdListImpl);
}

void InitDefaultsConnectionSet_DownstreamEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_IdList();
  {
    void* ptr = &::flyteidl::core::_ConnectionSet_DownstreamEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse();
  }
  ::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsConnectionSet_DownstreamEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionSet_DownstreamEntry_DoNotUseImpl);
}

void InitDefaultsConnectionSet_UpstreamEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_IdList();
  {
    void* ptr = &::flyteidl::core::_ConnectionSet_UpstreamEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse();
  }
  ::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsConnectionSet_UpstreamEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionSet_UpstreamEntry_DoNotUseImpl);
}

void InitDefaultsConnectionSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_DownstreamEntry_DoNotUse();
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_UpstreamEntry_DoNotUse();
  {
    void* ptr = &::flyteidl::core::_ConnectionSet_default_instance_;
    new (ptr) ::flyteidl::core::ConnectionSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ConnectionSet::InitAsDefaultInstance();
}

void InitDefaultsConnectionSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionSetImpl);
}

void InitDefaultsCompiledWorkflowImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowTemplate();
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet();
  {
    void* ptr = &::flyteidl::core::_CompiledWorkflow_default_instance_;
    new (ptr) ::flyteidl::core::CompiledWorkflow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::CompiledWorkflow::InitAsDefaultInstance();
}

void InitDefaultsCompiledWorkflow() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCompiledWorkflowImpl);
}

void InitDefaultsCompiledTaskImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2ftasks_2eproto::InitDefaultsTaskTemplate();
  {
    void* ptr = &::flyteidl::core::_CompiledTask_default_instance_;
    new (ptr) ::flyteidl::core::CompiledTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::CompiledTask::InitAsDefaultInstance();
}

void InitDefaultsCompiledTask() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCompiledTaskImpl);
}

void InitDefaultsCompiledWorkflowClosureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflow();
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledTask();
  {
    void* ptr = &::flyteidl::core::_CompiledWorkflowClosure_default_instance_;
    new (ptr) ::flyteidl::core::CompiledWorkflowClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::CompiledWorkflowClosure::InitAsDefaultInstance();
}

void InitDefaultsCompiledWorkflowClosure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCompiledWorkflowClosureImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_IdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_IdList, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet, downstream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConnectionSet, upstream_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflow, template__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflow, connections_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledTask, template__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflowClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflowClosure, primary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflowClosure, sub_workflows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::CompiledWorkflowClosure, tasks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::ConnectionSet_IdList)},
  { 6, 13, sizeof(::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse)},
  { 15, 22, sizeof(::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse)},
  { 24, -1, sizeof(::flyteidl::core::ConnectionSet)},
  { 31, -1, sizeof(::flyteidl::core::CompiledWorkflow)},
  { 38, -1, sizeof(::flyteidl::core::CompiledTask)},
  { 44, -1, sizeof(::flyteidl::core::CompiledWorkflowClosure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ConnectionSet_IdList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ConnectionSet_DownstreamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ConnectionSet_UpstreamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ConnectionSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_CompiledWorkflow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_CompiledTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_CompiledWorkflowClosure_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/core/compiler.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034flyteidl/core/compiler.proto\022\rflyteidl"
      ".core\032\034flyteidl/core/workflow.proto\032\031fly"
      "teidl/core/tasks.proto\"\324\002\n\rConnectionSet"
      "\022@\n\ndownstream\030\007 \003(\0132,.flyteidl.core.Con"
      "nectionSet.DownstreamEntry\022<\n\010upstream\030\010"
      " \003(\0132*.flyteidl.core.ConnectionSet.Upstr"
      "eamEntry\032\025\n\006IdList\022\013\n\003ids\030\001 \003(\t\032V\n\017Downs"
      "treamEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#"
      ".flyteidl.core.ConnectionSet.IdList:\0028\001\032"
      "T\n\rUpstreamEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002"
      " \001(\0132#.flyteidl.core.ConnectionSet.IdLis"
      "t:\0028\001\"x\n\020CompiledWorkflow\0221\n\010template\030\001 "
      "\001(\0132\037.flyteidl.core.WorkflowTemplate\0221\n\013"
      "connections\030\002 \001(\0132\034.flyteidl.core.Connec"
      "tionSet\"=\n\014CompiledTask\022-\n\010template\030\001 \001("
      "\0132\033.flyteidl.core.TaskTemplate\"\257\001\n\027Compi"
      "ledWorkflowClosure\0220\n\007primary\030\001 \001(\0132\037.fl"
      "yteidl.core.CompiledWorkflow\0226\n\rsub_work"
      "flows\030\002 \003(\0132\037.flyteidl.core.CompiledWork"
      "flow\022*\n\005tasks\030\003 \003(\0132\033.flyteidl.core.Comp"
      "iledTaskB2Z0github.com/lyft/flyteidl/gen"
      "/pb-go/flyteidl/coreb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/core/compiler.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2ftasks_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fcore_2fcompiler_2eproto
namespace flyteidl {
namespace core {

// ===================================================================

void ConnectionSet_IdList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionSet_IdList::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionSet_IdList::ConnectionSet_IdList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_IdList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ConnectionSet.IdList)
}
ConnectionSet_IdList::ConnectionSet_IdList(const ConnectionSet_IdList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ConnectionSet.IdList)
}

void ConnectionSet_IdList::SharedCtor() {
  _cached_size_ = 0;
}

ConnectionSet_IdList::~ConnectionSet_IdList() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ConnectionSet.IdList)
  SharedDtor();
}

void ConnectionSet_IdList::SharedDtor() {
}

void ConnectionSet_IdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionSet_IdList::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionSet_IdList& ConnectionSet_IdList::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_IdList();
  return *internal_default_instance();
}

ConnectionSet_IdList* ConnectionSet_IdList::New(::google::protobuf::Arena* arena) const {
  ConnectionSet_IdList* n = new ConnectionSet_IdList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionSet_IdList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ConnectionSet.IdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectionSet_IdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ConnectionSet.IdList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ConnectionSet.IdList.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ConnectionSet.IdList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ConnectionSet.IdList)
  return false;
#undef DO_
}

void ConnectionSet_IdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ConnectionSet.IdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ConnectionSet.IdList.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ConnectionSet.IdList)
}

::google::protobuf::uint8* ConnectionSet_IdList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ConnectionSet.IdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ConnectionSet.IdList.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ConnectionSet.IdList)
  return target;
}

size_t ConnectionSet_IdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ConnectionSet.IdList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionSet_IdList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ConnectionSet.IdList)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionSet_IdList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionSet_IdList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ConnectionSet.IdList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ConnectionSet.IdList)
    MergeFrom(*source);
  }
}

void ConnectionSet_IdList::MergeFrom(const ConnectionSet_IdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ConnectionSet.IdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void ConnectionSet_IdList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ConnectionSet.IdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionSet_IdList::CopyFrom(const ConnectionSet_IdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ConnectionSet.IdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionSet_IdList::IsInitialized() const {
  return true;
}

void ConnectionSet_IdList::Swap(ConnectionSet_IdList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionSet_IdList::InternalSwap(ConnectionSet_IdList* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionSet_IdList::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ConnectionSet_DownstreamEntry_DoNotUse::ConnectionSet_DownstreamEntry_DoNotUse() {}
ConnectionSet_DownstreamEntry_DoNotUse::ConnectionSet_DownstreamEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ConnectionSet_DownstreamEntry_DoNotUse::MergeFrom(const ConnectionSet_DownstreamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ConnectionSet_DownstreamEntry_DoNotUse::GetMetadata() const {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[1];
}
void ConnectionSet_DownstreamEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

ConnectionSet_UpstreamEntry_DoNotUse::ConnectionSet_UpstreamEntry_DoNotUse() {}
ConnectionSet_UpstreamEntry_DoNotUse::ConnectionSet_UpstreamEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ConnectionSet_UpstreamEntry_DoNotUse::MergeFrom(const ConnectionSet_UpstreamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ConnectionSet_UpstreamEntry_DoNotUse::GetMetadata() const {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[2];
}
void ConnectionSet_UpstreamEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ConnectionSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionSet::kDownstreamFieldNumber;
const int ConnectionSet::kUpstreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionSet::ConnectionSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ConnectionSet)
}
ConnectionSet::ConnectionSet(const ConnectionSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  downstream_.MergeFrom(from.downstream_);
  upstream_.MergeFrom(from.upstream_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ConnectionSet)
}

void ConnectionSet::SharedCtor() {
  _cached_size_ = 0;
}

ConnectionSet::~ConnectionSet() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ConnectionSet)
  SharedDtor();
}

void ConnectionSet::SharedDtor() {
}

void ConnectionSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionSet::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionSet& ConnectionSet::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet();
  return *internal_default_instance();
}

ConnectionSet* ConnectionSet::New(::google::protobuf::Arena* arena) const {
  ConnectionSet* n = new ConnectionSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ConnectionSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  downstream_.Clear();
  upstream_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectionSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ConnectionSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          ConnectionSet_DownstreamEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ConnectionSet_DownstreamEntry_DoNotUse,
              ::std::string, ::flyteidl::core::ConnectionSet_IdList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList > > parser(&downstream_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ConnectionSet.DownstreamEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          ConnectionSet_UpstreamEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ConnectionSet_UpstreamEntry_DoNotUse,
              ::std::string, ::flyteidl::core::ConnectionSet_IdList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList > > parser(&upstream_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ConnectionSet.UpstreamEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ConnectionSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ConnectionSet)
  return false;
#undef DO_
}

void ConnectionSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ConnectionSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7;
  if (!this->downstream().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.ConnectionSet.DownstreamEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->downstream().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->downstream().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->downstream().begin();
          it != this->downstream().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ConnectionSet_DownstreamEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(downstream_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConnectionSet_DownstreamEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->downstream().begin();
          it != this->downstream().end(); ++it) {
        entry.reset(downstream_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8;
  if (!this->upstream().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.ConnectionSet.UpstreamEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->upstream().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->upstream().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->upstream().begin();
          it != this->upstream().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ConnectionSet_UpstreamEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(upstream_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConnectionSet_UpstreamEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->upstream().begin();
          it != this->upstream().end(); ++it) {
        entry.reset(upstream_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ConnectionSet)
}

::google::protobuf::uint8* ConnectionSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ConnectionSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7;
  if (!this->downstream().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.ConnectionSet.DownstreamEntry.key");
      }
    };

    if (deterministic &&
        this->downstream().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->downstream().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->downstream().begin();
          it != this->downstream().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ConnectionSet_DownstreamEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(downstream_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConnectionSet_DownstreamEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->downstream().begin();
          it != this->downstream().end(); ++it) {
        entry.reset(downstream_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8;
  if (!this->upstream().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.ConnectionSet.UpstreamEntry.key");
      }
    };

    if (deterministic &&
        this->upstream().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->upstream().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->upstream().begin();
          it != this->upstream().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ConnectionSet_UpstreamEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(upstream_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConnectionSet_UpstreamEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
          it = this->upstream().begin();
          it != this->upstream().end(); ++it) {
        entry.reset(upstream_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ConnectionSet)
  return target;
}

size_t ConnectionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ConnectionSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->downstream_size());
  {
    ::google::protobuf::scoped_ptr<ConnectionSet_DownstreamEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
        it = this->downstream().begin();
        it != this->downstream().end(); ++it) {
      entry.reset(downstream_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->upstream_size());
  {
    ::google::protobuf::scoped_ptr<ConnectionSet_UpstreamEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >::const_iterator
        it = this->upstream().begin();
        it != this->upstream().end(); ++it) {
      entry.reset(upstream_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ConnectionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ConnectionSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ConnectionSet)
    MergeFrom(*source);
  }
}

void ConnectionSet::MergeFrom(const ConnectionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ConnectionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  downstream_.MergeFrom(from.downstream_);
  upstream_.MergeFrom(from.upstream_);
}

void ConnectionSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ConnectionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionSet::CopyFrom(const ConnectionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ConnectionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionSet::IsInitialized() const {
  return true;
}

void ConnectionSet::Swap(ConnectionSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionSet::InternalSwap(ConnectionSet* other) {
  using std::swap;
  downstream_.Swap(&other->downstream_);
  upstream_.Swap(&other->upstream_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionSet::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CompiledWorkflow::InitAsDefaultInstance() {
  ::flyteidl::core::_CompiledWorkflow_default_instance_._instance.get_mutable()->template__ = const_cast< ::flyteidl::core::WorkflowTemplate*>(
      ::flyteidl::core::WorkflowTemplate::internal_default_instance());
  ::flyteidl::core::_CompiledWorkflow_default_instance_._instance.get_mutable()->connections_ = const_cast< ::flyteidl::core::ConnectionSet*>(
      ::flyteidl::core::ConnectionSet::internal_default_instance());
}
void CompiledWorkflow::clear_template_() {
  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompiledWorkflow::kTemplateFieldNumber;
const int CompiledWorkflow::kConnectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompiledWorkflow::CompiledWorkflow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflow();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.CompiledWorkflow)
}
CompiledWorkflow::CompiledWorkflow(const CompiledWorkflow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_template_()) {
    template__ = new ::flyteidl::core::WorkflowTemplate(*from.template__);
  } else {
    template__ = NULL;
  }
  if (from.has_connections()) {
    connections_ = new ::flyteidl::core::ConnectionSet(*from.connections_);
  } else {
    connections_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.CompiledWorkflow)
}

void CompiledWorkflow::SharedCtor() {
  ::memset(&template__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connections_) -
      reinterpret_cast<char*>(&template__)) + sizeof(connections_));
  _cached_size_ = 0;
}

CompiledWorkflow::~CompiledWorkflow() {
  // @@protoc_insertion_point(destructor:flyteidl.core.CompiledWorkflow)
  SharedDtor();
}

void CompiledWorkflow::SharedDtor() {
  if (this != internal_default_instance()) delete template__;
  if (this != internal_default_instance()) delete connections_;
}

void CompiledWorkflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompiledWorkflow::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompiledWorkflow& CompiledWorkflow::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflow();
  return *internal_default_instance();
}

CompiledWorkflow* CompiledWorkflow::New(::google::protobuf::Arena* arena) const {
  CompiledWorkflow* n = new CompiledWorkflow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompiledWorkflow::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.CompiledWorkflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
  if (GetArenaNoVirtual() == NULL && connections_ != NULL) {
    delete connections_;
  }
  connections_ = NULL;
  _internal_metadata_.Clear();
}

bool CompiledWorkflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.CompiledWorkflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowTemplate template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ConnectionSet connections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.CompiledWorkflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.CompiledWorkflow)
  return false;
#undef DO_
}

void CompiledWorkflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.CompiledWorkflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->template__, output);
  }

  // .flyteidl.core.ConnectionSet connections = 2;
  if (this->has_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->connections_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.CompiledWorkflow)
}

::google::protobuf::uint8* CompiledWorkflow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.CompiledWorkflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->template__, deterministic, target);
  }

  // .flyteidl.core.ConnectionSet connections = 2;
  if (this->has_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->connections_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.CompiledWorkflow)
  return target;
}

size_t CompiledWorkflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.CompiledWorkflow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->template__);
  }

  // .flyteidl.core.ConnectionSet connections = 2;
  if (this->has_connections()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connections_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompiledWorkflow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.CompiledWorkflow)
  GOOGLE_DCHECK_NE(&from, this);
  const CompiledWorkflow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompiledWorkflow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.CompiledWorkflow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.CompiledWorkflow)
    MergeFrom(*source);
  }
}

void CompiledWorkflow::MergeFrom(const CompiledWorkflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.CompiledWorkflow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_template_()) {
    mutable_template_()->::flyteidl::core::WorkflowTemplate::MergeFrom(from.template_());
  }
  if (from.has_connections()) {
    mutable_connections()->::flyteidl::core::ConnectionSet::MergeFrom(from.connections());
  }
}

void CompiledWorkflow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.CompiledWorkflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompiledWorkflow::CopyFrom(const CompiledWorkflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.CompiledWorkflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledWorkflow::IsInitialized() const {
  return true;
}

void CompiledWorkflow::Swap(CompiledWorkflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompiledWorkflow::InternalSwap(CompiledWorkflow* other) {
  using std::swap;
  swap(template__, other->template__);
  swap(connections_, other->connections_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompiledWorkflow::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CompiledTask::InitAsDefaultInstance() {
  ::flyteidl::core::_CompiledTask_default_instance_._instance.get_mutable()->template__ = const_cast< ::flyteidl::core::TaskTemplate*>(
      ::flyteidl::core::TaskTemplate::internal_default_instance());
}
void CompiledTask::clear_template_() {
  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompiledTask::kTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompiledTask::CompiledTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledTask();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.CompiledTask)
}
CompiledTask::CompiledTask(const CompiledTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_template_()) {
    template__ = new ::flyteidl::core::TaskTemplate(*from.template__);
  } else {
    template__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.CompiledTask)
}

void CompiledTask::SharedCtor() {
  template__ = NULL;
  _cached_size_ = 0;
}

CompiledTask::~CompiledTask() {
  // @@protoc_insertion_point(destructor:flyteidl.core.CompiledTask)
  SharedDtor();
}

void CompiledTask::SharedDtor() {
  if (this != internal_default_instance()) delete template__;
}

void CompiledTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompiledTask::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompiledTask& CompiledTask::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledTask();
  return *internal_default_instance();
}

CompiledTask* CompiledTask::New(::google::protobuf::Arena* arena) const {
  CompiledTask* n = new CompiledTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompiledTask::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.CompiledTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && template__ != NULL) {
    delete template__;
  }
  template__ = NULL;
  _internal_metadata_.Clear();
}

bool CompiledTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.CompiledTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskTemplate template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.CompiledTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.CompiledTask)
  return false;
#undef DO_
}

void CompiledTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.CompiledTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->template__, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.CompiledTask)
}

::google::protobuf::uint8* CompiledTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.CompiledTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->template__, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.CompiledTask)
  return target;
}

size_t CompiledTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.CompiledTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->template__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompiledTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.CompiledTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CompiledTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompiledTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.CompiledTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.CompiledTask)
    MergeFrom(*source);
  }
}

void CompiledTask::MergeFrom(const CompiledTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.CompiledTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_template_()) {
    mutable_template_()->::flyteidl::core::TaskTemplate::MergeFrom(from.template_());
  }
}

void CompiledTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.CompiledTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompiledTask::CopyFrom(const CompiledTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.CompiledTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledTask::IsInitialized() const {
  return true;
}

void CompiledTask::Swap(CompiledTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompiledTask::InternalSwap(CompiledTask* other) {
  using std::swap;
  swap(template__, other->template__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompiledTask::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CompiledWorkflowClosure::InitAsDefaultInstance() {
  ::flyteidl::core::_CompiledWorkflowClosure_default_instance_._instance.get_mutable()->primary_ = const_cast< ::flyteidl::core::CompiledWorkflow*>(
      ::flyteidl::core::CompiledWorkflow::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompiledWorkflowClosure::kPrimaryFieldNumber;
const int CompiledWorkflowClosure::kSubWorkflowsFieldNumber;
const int CompiledWorkflowClosure::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompiledWorkflowClosure::CompiledWorkflowClosure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflowClosure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.CompiledWorkflowClosure)
}
CompiledWorkflowClosure::CompiledWorkflowClosure(const CompiledWorkflowClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sub_workflows_(from.sub_workflows_),
      tasks_(from.tasks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primary()) {
    primary_ = new ::flyteidl::core::CompiledWorkflow(*from.primary_);
  } else {
    primary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.CompiledWorkflowClosure)
}

void CompiledWorkflowClosure::SharedCtor() {
  primary_ = NULL;
  _cached_size_ = 0;
}

CompiledWorkflowClosure::~CompiledWorkflowClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.core.CompiledWorkflowClosure)
  SharedDtor();
}

void CompiledWorkflowClosure::SharedDtor() {
  if (this != internal_default_instance()) delete primary_;
}

void CompiledWorkflowClosure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompiledWorkflowClosure::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompiledWorkflowClosure& CompiledWorkflowClosure::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflowClosure();
  return *internal_default_instance();
}

CompiledWorkflowClosure* CompiledWorkflowClosure::New(::google::protobuf::Arena* arena) const {
  CompiledWorkflowClosure* n = new CompiledWorkflowClosure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompiledWorkflowClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.CompiledWorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_workflows_.Clear();
  tasks_.Clear();
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
  _internal_metadata_.Clear();
}

bool CompiledWorkflowClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.CompiledWorkflowClosure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.CompiledWorkflow primary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sub_workflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.CompiledTask tasks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.CompiledWorkflowClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.CompiledWorkflowClosure)
  return false;
#undef DO_
}

void CompiledWorkflowClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.CompiledWorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflow primary = 1;
  if (this->has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->primary_, output);
  }

  // repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_workflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub_workflows(static_cast<int>(i)), output);
  }

  // repeated .flyteidl.core.CompiledTask tasks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tasks(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.CompiledWorkflowClosure)
}

::google::protobuf::uint8* CompiledWorkflowClosure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.CompiledWorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflow primary = 1;
  if (this->has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->primary_, deterministic, target);
  }

  // repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_workflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sub_workflows(static_cast<int>(i)), deterministic, target);
  }

  // repeated .flyteidl.core.CompiledTask tasks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.CompiledWorkflowClosure)
  return target;
}

size_t CompiledWorkflowClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.CompiledWorkflowClosure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_workflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sub_workflows(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.CompiledTask tasks = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.CompiledWorkflow primary = 1;
  if (this->has_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->primary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompiledWorkflowClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.CompiledWorkflowClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const CompiledWorkflowClosure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompiledWorkflowClosure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.CompiledWorkflowClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.CompiledWorkflowClosure)
    MergeFrom(*source);
  }
}

void CompiledWorkflowClosure::MergeFrom(const CompiledWorkflowClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.CompiledWorkflowClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_workflows_.MergeFrom(from.sub_workflows_);
  tasks_.MergeFrom(from.tasks_);
  if (from.has_primary()) {
    mutable_primary()->::flyteidl::core::CompiledWorkflow::MergeFrom(from.primary());
  }
}

void CompiledWorkflowClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.CompiledWorkflowClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompiledWorkflowClosure::CopyFrom(const CompiledWorkflowClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.CompiledWorkflowClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompiledWorkflowClosure::IsInitialized() const {
  return true;
}

void CompiledWorkflowClosure::Swap(CompiledWorkflowClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompiledWorkflowClosure::InternalSwap(CompiledWorkflowClosure* other) {
  using std::swap;
  sub_workflows_.InternalSwap(&other->sub_workflows_);
  tasks_.InternalSwap(&other->tasks_);
  swap(primary_, other->primary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompiledWorkflowClosure::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcompiler_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
