// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

#include "flyteidl/core/workflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace core {
class IfBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfBlock>
      _instance;
} _IfBlock_default_instance_;
class IfElseBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfElseBlock>
      _instance;
  const ::flyteidl::core::Node* else_node_;
  const ::flyteidl::core::Error* error_;
} _IfElseBlock_default_instance_;
class BranchNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BranchNode>
      _instance;
} _BranchNode_default_instance_;
class TaskNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskNode>
      _instance;
  const ::flyteidl::core::Identifier* reference_id_;
} _TaskNode_default_instance_;
class WorkflowNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowNode>
      _instance;
  const ::flyteidl::core::Identifier* launchplan_ref_;
  const ::flyteidl::core::Identifier* sub_workflow_ref_;
} _WorkflowNode_default_instance_;
class NodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeMetadata>
      _instance;
} _NodeMetadata_default_instance_;
class AliasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Alias>
      _instance;
} _Alias_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node>
      _instance;
  const ::flyteidl::core::TaskNode* task_node_;
  const ::flyteidl::core::WorkflowNode* workflow_node_;
  const ::flyteidl::core::BranchNode* branch_node_;
} _Node_default_instance_;
class WorkflowMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowMetadata>
      _instance;
} _WorkflowMetadata_default_instance_;
class WorkflowTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowTemplate>
      _instance;
} _WorkflowTemplate_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace protobuf_flyteidl_2fcore_2fworkflow_2eproto {
void InitDefaultsBranchNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsBooleanExpression();
  protobuf_flyteidl_2fcore_2ftypes_2eproto::InitDefaultsError();
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsNodeMetadata();
  protobuf_flyteidl_2fcore_2fliterals_2eproto::InitDefaultsBinding();
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsAlias();
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsTaskNode();
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowNode();
  {
    void* ptr = &::flyteidl::core::_IfBlock_default_instance_;
    new (ptr) ::flyteidl::core::IfBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_IfElseBlock_default_instance_;
    new (ptr) ::flyteidl::core::IfElseBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_BranchNode_default_instance_;
    new (ptr) ::flyteidl::core::BranchNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_Node_default_instance_;
    new (ptr) ::flyteidl::core::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::IfBlock::InitAsDefaultInstance();
  ::flyteidl::core::IfElseBlock::InitAsDefaultInstance();
  ::flyteidl::core::BranchNode::InitAsDefaultInstance();
  ::flyteidl::core::Node::InitAsDefaultInstance();
}

void InitDefaultsBranchNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBranchNodeImpl);
}

void InitDefaultsTaskNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::flyteidl::core::_TaskNode_default_instance_;
    new (ptr) ::flyteidl::core::TaskNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::TaskNode::InitAsDefaultInstance();
}

void InitDefaultsTaskNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskNodeImpl);
}

void InitDefaultsWorkflowNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  {
    void* ptr = &::flyteidl::core::_WorkflowNode_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowNode::InitAsDefaultInstance();
}

void InitDefaultsWorkflowNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowNodeImpl);
}

void InitDefaultsNodeMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_flyteidl_2fcore_2fliterals_2eproto::InitDefaultsRetryStrategy();
  {
    void* ptr = &::flyteidl::core::_NodeMetadata_default_instance_;
    new (ptr) ::flyteidl::core::NodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::NodeMetadata::InitAsDefaultInstance();
}

void InitDefaultsNodeMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeMetadataImpl);
}

void InitDefaultsAliasImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::core::_Alias_default_instance_;
    new (ptr) ::flyteidl::core::Alias();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Alias::InitAsDefaultInstance();
}

void InitDefaultsAlias() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAliasImpl);
}

void InitDefaultsWorkflowMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::core::_WorkflowMetadata_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowMetadata::InitAsDefaultInstance();
}

void InitDefaultsWorkflowMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowMetadataImpl);
}

void InitDefaultsWorkflowTemplateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsIdentifier();
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowMetadata();
  protobuf_flyteidl_2fcore_2finterface_2eproto::InitDefaultsTypedInterface();
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  protobuf_flyteidl_2fcore_2fliterals_2eproto::InitDefaultsBinding();
  {
    void* ptr = &::flyteidl::core::_WorkflowTemplate_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowTemplate::InitAsDefaultInstance();
}

void InitDefaultsWorkflowTemplate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkflowTemplateImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfBlock, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfBlock, then_node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfElseBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfElseBlock, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfElseBlock, case__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfElseBlock, other_),
  offsetof(::flyteidl::core::IfElseBlockDefaultTypeInternal, else_node_),
  offsetof(::flyteidl::core::IfElseBlockDefaultTypeInternal, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::IfElseBlock, default_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::BranchNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::BranchNode, if_else_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::TaskNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::TaskNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::TaskNodeDefaultTypeInternal, reference_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::TaskNode, reference_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::WorkflowNodeDefaultTypeInternal, launchplan_ref_),
  offsetof(::flyteidl::core::WorkflowNodeDefaultTypeInternal, sub_workflow_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowNode, reference_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::NodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::NodeMetadata, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::NodeMetadata, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::NodeMetadata, retries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Alias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Alias, var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Alias, alias_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, upstream_node_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, output_aliases_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, task_node_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, workflow_node_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, branch_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Node, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, failure_node_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::IfBlock)},
  { 7, -1, sizeof(::flyteidl::core::IfElseBlock)},
  { 17, -1, sizeof(::flyteidl::core::BranchNode)},
  { 23, -1, sizeof(::flyteidl::core::TaskNode)},
  { 30, -1, sizeof(::flyteidl::core::WorkflowNode)},
  { 38, -1, sizeof(::flyteidl::core::NodeMetadata)},
  { 46, -1, sizeof(::flyteidl::core::Alias)},
  { 53, -1, sizeof(::flyteidl::core::Node)},
  { 67, -1, sizeof(::flyteidl::core::WorkflowMetadata)},
  { 72, -1, sizeof(::flyteidl::core::WorkflowTemplate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_IfBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_IfElseBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_BranchNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_NodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Alias_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowTemplate_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/core/workflow.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034flyteidl/core/workflow.proto\022\rflyteidl"
      ".core\032\035flyteidl/core/condition.proto\032\036fl"
      "yteidl/core/identifier.proto\032\035flyteidl/c"
      "ore/interface.proto\032\034flyteidl/core/liter"
      "als.proto\032\031flyteidl/core/types.proto\032\036go"
      "ogle/protobuf/duration.proto\"f\n\007IfBlock\022"
      "3\n\tcondition\030\001 \001(\0132 .flyteidl.core.Boole"
      "anExpression\022&\n\tthen_node\030\002 \001(\0132\023.flytei"
      "dl.core.Node\"\266\001\n\013IfElseBlock\022$\n\004case\030\001 \001"
      "(\0132\026.flyteidl.core.IfBlock\022%\n\005other\030\002 \003("
      "\0132\026.flyteidl.core.IfBlock\022(\n\telse_node\030\003"
      " \001(\0132\023.flyteidl.core.NodeH\000\022%\n\005error\030\004 \001"
      "(\0132\024.flyteidl.core.ErrorH\000B\t\n\007default\"9\n"
      "\nBranchNode\022+\n\007if_else\030\001 \001(\0132\032.flyteidl."
      "core.IfElseBlock\"J\n\010TaskNode\0221\n\014referenc"
      "e_id\030\001 \001(\0132\031.flyteidl.core.IdentifierH\000B"
      "\013\n\treference\"\207\001\n\014WorkflowNode\0223\n\016launchp"
      "lan_ref\030\001 \001(\0132\031.flyteidl.core.Identifier"
      "H\000\0225\n\020sub_workflow_ref\030\002 \001(\0132\031.flyteidl."
      "core.IdentifierH\000B\013\n\treference\"w\n\014NodeMe"
      "tadata\022\014\n\004name\030\001 \001(\t\022*\n\007timeout\030\004 \001(\0132\031."
      "google.protobuf.Duration\022-\n\007retries\030\005 \001("
      "\0132\034.flyteidl.core.RetryStrategy\"#\n\005Alias"
      "\022\013\n\003var\030\001 \001(\t\022\r\n\005alias\030\002 \001(\t\"\322\002\n\004Node\022\n\n"
      "\002id\030\001 \001(\t\022-\n\010metadata\030\002 \001(\0132\033.flyteidl.c"
      "ore.NodeMetadata\022&\n\006inputs\030\003 \003(\0132\026.flyte"
      "idl.core.Binding\022\031\n\021upstream_node_ids\030\004 "
      "\003(\t\022,\n\016output_aliases\030\005 \003(\0132\024.flyteidl.c"
      "ore.Alias\022,\n\ttask_node\030\006 \001(\0132\027.flyteidl."
      "core.TaskNodeH\000\0224\n\rworkflow_node\030\007 \001(\0132\033"
      ".flyteidl.core.WorkflowNodeH\000\0220\n\013branch_"
      "node\030\010 \001(\0132\031.flyteidl.core.BranchNodeH\000B"
      "\010\n\006target\"\022\n\020WorkflowMetadata\"\226\002\n\020Workfl"
      "owTemplate\022%\n\002id\030\001 \001(\0132\031.flyteidl.core.I"
      "dentifier\0221\n\010metadata\030\002 \001(\0132\037.flyteidl.c"
      "ore.WorkflowMetadata\0220\n\tinterface\030\003 \001(\0132"
      "\035.flyteidl.core.TypedInterface\022\"\n\005nodes\030"
      "\004 \003(\0132\023.flyteidl.core.Node\022\'\n\007outputs\030\005 "
      "\003(\0132\026.flyteidl.core.Binding\022)\n\014failure_n"
      "ode\030\006 \001(\0132\023.flyteidl.core.NodeB2Z0github"
      ".com/lyft/flyteidl/gen/pb-go/flyteidl/co"
      "reb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/core/workflow.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2finterface_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fliterals_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2ftypes_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fcore_2fworkflow_2eproto
namespace flyteidl {
namespace core {

// ===================================================================

void IfBlock::InitAsDefaultInstance() {
  ::flyteidl::core::_IfBlock_default_instance_._instance.get_mutable()->condition_ = const_cast< ::flyteidl::core::BooleanExpression*>(
      ::flyteidl::core::BooleanExpression::internal_default_instance());
  ::flyteidl::core::_IfBlock_default_instance_._instance.get_mutable()->then_node_ = const_cast< ::flyteidl::core::Node*>(
      ::flyteidl::core::Node::internal_default_instance());
}
void IfBlock::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfBlock::kConditionFieldNumber;
const int IfBlock::kThenNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfBlock::IfBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.IfBlock)
}
IfBlock::IfBlock(const IfBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::flyteidl::core::BooleanExpression(*from.condition_);
  } else {
    condition_ = NULL;
  }
  if (from.has_then_node()) {
    then_node_ = new ::flyteidl::core::Node(*from.then_node_);
  } else {
    then_node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.IfBlock)
}

void IfBlock::SharedCtor() {
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&then_node_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(then_node_));
  _cached_size_ = 0;
}

IfBlock::~IfBlock() {
  // @@protoc_insertion_point(destructor:flyteidl.core.IfBlock)
  SharedDtor();
}

void IfBlock::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete then_node_;
}

void IfBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfBlock::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IfBlock& IfBlock::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  return *internal_default_instance();
}

IfBlock* IfBlock::New(::google::protobuf::Arena* arena) const {
  IfBlock* n = new IfBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IfBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.IfBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  if (GetArenaNoVirtual() == NULL && then_node_ != NULL) {
    delete then_node_;
  }
  then_node_ = NULL;
  _internal_metadata_.Clear();
}

bool IfBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.IfBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.BooleanExpression condition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Node then_node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_then_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.IfBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.IfBlock)
  return false;
#undef DO_
}

void IfBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.IfBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.BooleanExpression condition = 1;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->condition_, output);
  }

  // .flyteidl.core.Node then_node = 2;
  if (this->has_then_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->then_node_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.IfBlock)
}

::google::protobuf::uint8* IfBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.IfBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.BooleanExpression condition = 1;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->condition_, deterministic, target);
  }

  // .flyteidl.core.Node then_node = 2;
  if (this->has_then_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->then_node_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.IfBlock)
  return target;
}

size_t IfBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.IfBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.BooleanExpression condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->condition_);
  }

  // .flyteidl.core.Node then_node = 2;
  if (this->has_then_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->then_node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.IfBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const IfBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IfBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.IfBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.IfBlock)
    MergeFrom(*source);
  }
}

void IfBlock::MergeFrom(const IfBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.IfBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    mutable_condition()->::flyteidl::core::BooleanExpression::MergeFrom(from.condition());
  }
  if (from.has_then_node()) {
    mutable_then_node()->::flyteidl::core::Node::MergeFrom(from.then_node());
  }
}

void IfBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.IfBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfBlock::CopyFrom(const IfBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.IfBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfBlock::IsInitialized() const {
  return true;
}

void IfBlock::Swap(IfBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfBlock::InternalSwap(IfBlock* other) {
  using std::swap;
  swap(condition_, other->condition_);
  swap(then_node_, other->then_node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IfBlock::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IfElseBlock::InitAsDefaultInstance() {
  ::flyteidl::core::_IfElseBlock_default_instance_._instance.get_mutable()->case__ = const_cast< ::flyteidl::core::IfBlock*>(
      ::flyteidl::core::IfBlock::internal_default_instance());
  ::flyteidl::core::_IfElseBlock_default_instance_.else_node_ = const_cast< ::flyteidl::core::Node*>(
      ::flyteidl::core::Node::internal_default_instance());
  ::flyteidl::core::_IfElseBlock_default_instance_.error_ = const_cast< ::flyteidl::core::Error*>(
      ::flyteidl::core::Error::internal_default_instance());
}
void IfElseBlock::set_allocated_else_node(::flyteidl::core::Node* else_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_default();
  if (else_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      else_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, else_node, submessage_arena);
    }
    set_has_else_node();
    default_.else_node_ = else_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.else_node)
}
void IfElseBlock::set_allocated_error(::flyteidl::core::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_default();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    default_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.error)
}
void IfElseBlock::clear_error() {
  if (has_error()) {
    delete default_.error_;
    clear_has_default();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfElseBlock::kCaseFieldNumber;
const int IfElseBlock::kOtherFieldNumber;
const int IfElseBlock::kElseNodeFieldNumber;
const int IfElseBlock::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfElseBlock::IfElseBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.IfElseBlock)
}
IfElseBlock::IfElseBlock(const IfElseBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      other_(from.other_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_case_()) {
    case__ = new ::flyteidl::core::IfBlock(*from.case__);
  } else {
    case__ = NULL;
  }
  clear_has_default();
  switch (from.default_case()) {
    case kElseNode: {
      mutable_else_node()->::flyteidl::core::Node::MergeFrom(from.else_node());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::Error::MergeFrom(from.error());
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.IfElseBlock)
}

void IfElseBlock::SharedCtor() {
  case__ = NULL;
  clear_has_default();
  _cached_size_ = 0;
}

IfElseBlock::~IfElseBlock() {
  // @@protoc_insertion_point(destructor:flyteidl.core.IfElseBlock)
  SharedDtor();
}

void IfElseBlock::SharedDtor() {
  if (this != internal_default_instance()) delete case__;
  if (has_default()) {
    clear_default();
  }
}

void IfElseBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfElseBlock::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IfElseBlock& IfElseBlock::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  return *internal_default_instance();
}

IfElseBlock* IfElseBlock::New(::google::protobuf::Arena* arena) const {
  IfElseBlock* n = new IfElseBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IfElseBlock::clear_default() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.IfElseBlock)
  switch (default_case()) {
    case kElseNode: {
      delete default_.else_node_;
      break;
    }
    case kError: {
      delete default_.error_;
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFAULT_NOT_SET;
}


void IfElseBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.IfElseBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_.Clear();
  if (GetArenaNoVirtual() == NULL && case__ != NULL) {
    delete case__;
  }
  case__ = NULL;
  clear_default();
  _internal_metadata_.Clear();
}

bool IfElseBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.IfElseBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.IfBlock case = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_case_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.IfBlock other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Node else_node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_else_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Error error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.IfElseBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.IfElseBlock)
  return false;
#undef DO_
}

void IfElseBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.IfElseBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfBlock case = 1;
  if (this->has_case_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->case__, output);
  }

  // repeated .flyteidl.core.IfBlock other = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other(static_cast<int>(i)), output);
  }

  // .flyteidl.core.Node else_node = 3;
  if (has_else_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *default_.else_node_, output);
  }

  // .flyteidl.core.Error error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *default_.error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.IfElseBlock)
}

::google::protobuf::uint8* IfElseBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.IfElseBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfBlock case = 1;
  if (this->has_case_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->case__, deterministic, target);
  }

  // repeated .flyteidl.core.IfBlock other = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->other(static_cast<int>(i)), deterministic, target);
  }

  // .flyteidl.core.Node else_node = 3;
  if (has_else_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *default_.else_node_, deterministic, target);
  }

  // .flyteidl.core.Error error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *default_.error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.IfElseBlock)
  return target;
}

size_t IfElseBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.IfElseBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.core.IfBlock other = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->other_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->other(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.IfBlock case = 1;
  if (this->has_case_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->case__);
  }

  switch (default_case()) {
    // .flyteidl.core.Node else_node = 3;
    case kElseNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *default_.else_node_);
      break;
    }
    // .flyteidl.core.Error error = 4;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *default_.error_);
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfElseBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.IfElseBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const IfElseBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IfElseBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.IfElseBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.IfElseBlock)
    MergeFrom(*source);
  }
}

void IfElseBlock::MergeFrom(const IfElseBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.IfElseBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_.MergeFrom(from.other_);
  if (from.has_case_()) {
    mutable_case_()->::flyteidl::core::IfBlock::MergeFrom(from.case_());
  }
  switch (from.default_case()) {
    case kElseNode: {
      mutable_else_node()->::flyteidl::core::Node::MergeFrom(from.else_node());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::Error::MergeFrom(from.error());
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
}

void IfElseBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.IfElseBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfElseBlock::CopyFrom(const IfElseBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.IfElseBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfElseBlock::IsInitialized() const {
  return true;
}

void IfElseBlock::Swap(IfElseBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfElseBlock::InternalSwap(IfElseBlock* other) {
  using std::swap;
  other_.InternalSwap(&other->other_);
  swap(case__, other->case__);
  swap(default_, other->default_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IfElseBlock::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BranchNode::InitAsDefaultInstance() {
  ::flyteidl::core::_BranchNode_default_instance_._instance.get_mutable()->if_else_ = const_cast< ::flyteidl::core::IfElseBlock*>(
      ::flyteidl::core::IfElseBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BranchNode::kIfElseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BranchNode::BranchNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.BranchNode)
}
BranchNode::BranchNode(const BranchNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_if_else()) {
    if_else_ = new ::flyteidl::core::IfElseBlock(*from.if_else_);
  } else {
    if_else_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BranchNode)
}

void BranchNode::SharedCtor() {
  if_else_ = NULL;
  _cached_size_ = 0;
}

BranchNode::~BranchNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BranchNode)
  SharedDtor();
}

void BranchNode::SharedDtor() {
  if (this != internal_default_instance()) delete if_else_;
}

void BranchNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchNode::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BranchNode& BranchNode::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  return *internal_default_instance();
}

BranchNode* BranchNode::New(::google::protobuf::Arena* arena) const {
  BranchNode* n = new BranchNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BranchNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.BranchNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && if_else_ != NULL) {
    delete if_else_;
  }
  if_else_ = NULL;
  _internal_metadata_.Clear();
}

bool BranchNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.BranchNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.IfElseBlock if_else = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_if_else()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.BranchNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.BranchNode)
  return false;
#undef DO_
}

void BranchNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.BranchNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfElseBlock if_else = 1;
  if (this->has_if_else()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->if_else_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.BranchNode)
}

::google::protobuf::uint8* BranchNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.BranchNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfElseBlock if_else = 1;
  if (this->has_if_else()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->if_else_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.BranchNode)
  return target;
}

size_t BranchNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.BranchNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.IfElseBlock if_else = 1;
  if (this->has_if_else()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->if_else_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.BranchNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BranchNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BranchNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.BranchNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.BranchNode)
    MergeFrom(*source);
  }
}

void BranchNode::MergeFrom(const BranchNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.BranchNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_if_else()) {
    mutable_if_else()->::flyteidl::core::IfElseBlock::MergeFrom(from.if_else());
  }
}

void BranchNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.BranchNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchNode::CopyFrom(const BranchNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.BranchNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchNode::IsInitialized() const {
  return true;
}

void BranchNode::Swap(BranchNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BranchNode::InternalSwap(BranchNode* other) {
  using std::swap;
  swap(if_else_, other->if_else_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BranchNode::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskNode::InitAsDefaultInstance() {
  ::flyteidl::core::_TaskNode_default_instance_.reference_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
void TaskNode::set_allocated_reference_id(::flyteidl::core::Identifier* reference_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (reference_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_id, submessage_arena);
    }
    set_has_reference_id();
    reference_.reference_id_ = reference_id;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskNode.reference_id)
}
void TaskNode::clear_reference_id() {
  if (has_reference_id()) {
    delete reference_.reference_id_;
    clear_has_reference();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskNode::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskNode::TaskNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsTaskNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.TaskNode)
}
TaskNode::TaskNode(const TaskNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_reference();
  switch (from.reference_case()) {
    case kReferenceId: {
      mutable_reference_id()->::flyteidl::core::Identifier::MergeFrom(from.reference_id());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskNode)
}

void TaskNode::SharedCtor() {
  clear_has_reference();
  _cached_size_ = 0;
}

TaskNode::~TaskNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskNode)
  SharedDtor();
}

void TaskNode::SharedDtor() {
  if (has_reference()) {
    clear_reference();
  }
}

void TaskNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskNode::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskNode& TaskNode::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsTaskNode();
  return *internal_default_instance();
}

TaskNode* TaskNode::New(::google::protobuf::Arena* arena) const {
  TaskNode* n = new TaskNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskNode::clear_reference() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.TaskNode)
  switch (reference_case()) {
    case kReferenceId: {
      delete reference_.reference_id_;
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_NOT_SET;
}


void TaskNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.TaskNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference();
  _internal_metadata_.Clear();
}

bool TaskNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.TaskNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier reference_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.TaskNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.TaskNode)
  return false;
#undef DO_
}

void TaskNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.TaskNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier reference_id = 1;
  if (has_reference_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *reference_.reference_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.TaskNode)
}

::google::protobuf::uint8* TaskNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.TaskNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier reference_id = 1;
  if (has_reference_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *reference_.reference_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.TaskNode)
  return target;
}

size_t TaskNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.TaskNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (reference_case()) {
    // .flyteidl.core.Identifier reference_id = 1;
    case kReferenceId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.reference_id_);
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.TaskNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.TaskNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.TaskNode)
    MergeFrom(*source);
  }
}

void TaskNode::MergeFrom(const TaskNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.TaskNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_case()) {
    case kReferenceId: {
      mutable_reference_id()->::flyteidl::core::Identifier::MergeFrom(from.reference_id());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
}

void TaskNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.TaskNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNode::CopyFrom(const TaskNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.TaskNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNode::IsInitialized() const {
  return true;
}

void TaskNode::Swap(TaskNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskNode::InternalSwap(TaskNode* other) {
  using std::swap;
  swap(reference_, other->reference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskNode::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowNode::InitAsDefaultInstance() {
  ::flyteidl::core::_WorkflowNode_default_instance_.launchplan_ref_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::core::_WorkflowNode_default_instance_.sub_workflow_ref_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
void WorkflowNode::set_allocated_launchplan_ref(::flyteidl::core::Identifier* launchplan_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (launchplan_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      launchplan_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_ref, submessage_arena);
    }
    set_has_launchplan_ref();
    reference_.launchplan_ref_ = launchplan_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowNode.launchplan_ref)
}
void WorkflowNode::clear_launchplan_ref() {
  if (has_launchplan_ref()) {
    delete reference_.launchplan_ref_;
    clear_has_reference();
  }
}
void WorkflowNode::set_allocated_sub_workflow_ref(::flyteidl::core::Identifier* sub_workflow_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (sub_workflow_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sub_workflow_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sub_workflow_ref, submessage_arena);
    }
    set_has_sub_workflow_ref();
    reference_.sub_workflow_ref_ = sub_workflow_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowNode.sub_workflow_ref)
}
void WorkflowNode::clear_sub_workflow_ref() {
  if (has_sub_workflow_ref()) {
    delete reference_.sub_workflow_ref_;
    clear_has_reference();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowNode::kLaunchplanRefFieldNumber;
const int WorkflowNode::kSubWorkflowRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowNode::WorkflowNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowNode)
}
WorkflowNode::WorkflowNode(const WorkflowNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_reference();
  switch (from.reference_case()) {
    case kLaunchplanRef: {
      mutable_launchplan_ref()->::flyteidl::core::Identifier::MergeFrom(from.launchplan_ref());
      break;
    }
    case kSubWorkflowRef: {
      mutable_sub_workflow_ref()->::flyteidl::core::Identifier::MergeFrom(from.sub_workflow_ref());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowNode)
}

void WorkflowNode::SharedCtor() {
  clear_has_reference();
  _cached_size_ = 0;
}

WorkflowNode::~WorkflowNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowNode)
  SharedDtor();
}

void WorkflowNode::SharedDtor() {
  if (has_reference()) {
    clear_reference();
  }
}

void WorkflowNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowNode::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowNode& WorkflowNode::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowNode();
  return *internal_default_instance();
}

WorkflowNode* WorkflowNode::New(::google::protobuf::Arena* arena) const {
  WorkflowNode* n = new WorkflowNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowNode::clear_reference() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.WorkflowNode)
  switch (reference_case()) {
    case kLaunchplanRef: {
      delete reference_.launchplan_ref_;
      break;
    }
    case kSubWorkflowRef: {
      delete reference_.sub_workflow_ref_;
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_NOT_SET;
}


void WorkflowNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference();
  _internal_metadata_.Clear();
}

bool WorkflowNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier launchplan_ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Identifier sub_workflow_ref = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sub_workflow_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowNode)
  return false;
#undef DO_
}

void WorkflowNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launchplan_ref = 1;
  if (has_launchplan_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *reference_.launchplan_ref_, output);
  }

  // .flyteidl.core.Identifier sub_workflow_ref = 2;
  if (has_sub_workflow_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *reference_.sub_workflow_ref_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowNode)
}

::google::protobuf::uint8* WorkflowNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launchplan_ref = 1;
  if (has_launchplan_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *reference_.launchplan_ref_, deterministic, target);
  }

  // .flyteidl.core.Identifier sub_workflow_ref = 2;
  if (has_sub_workflow_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *reference_.sub_workflow_ref_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowNode)
  return target;
}

size_t WorkflowNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (reference_case()) {
    // .flyteidl.core.Identifier launchplan_ref = 1;
    case kLaunchplanRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.launchplan_ref_);
      break;
    }
    // .flyteidl.core.Identifier sub_workflow_ref = 2;
    case kSubWorkflowRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.sub_workflow_ref_);
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowNode)
    MergeFrom(*source);
  }
}

void WorkflowNode::MergeFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_case()) {
    case kLaunchplanRef: {
      mutable_launchplan_ref()->::flyteidl::core::Identifier::MergeFrom(from.launchplan_ref());
      break;
    }
    case kSubWorkflowRef: {
      mutable_sub_workflow_ref()->::flyteidl::core::Identifier::MergeFrom(from.sub_workflow_ref());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
}

void WorkflowNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowNode::CopyFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNode::IsInitialized() const {
  return true;
}

void WorkflowNode::Swap(WorkflowNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowNode::InternalSwap(WorkflowNode* other) {
  using std::swap;
  swap(reference_, other->reference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowNode::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeMetadata::InitAsDefaultInstance() {
  ::flyteidl::core::_NodeMetadata_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::flyteidl::core::_NodeMetadata_default_instance_._instance.get_mutable()->retries_ = const_cast< ::flyteidl::core::RetryStrategy*>(
      ::flyteidl::core::RetryStrategy::internal_default_instance());
}
void NodeMetadata::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
}
void NodeMetadata::clear_retries() {
  if (GetArenaNoVirtual() == NULL && retries_ != NULL) {
    delete retries_;
  }
  retries_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMetadata::kNameFieldNumber;
const int NodeMetadata::kTimeoutFieldNumber;
const int NodeMetadata::kRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMetadata::NodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsNodeMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.NodeMetadata)
}
NodeMetadata::NodeMetadata(const NodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_retries()) {
    retries_ = new ::flyteidl::core::RetryStrategy(*from.retries_);
  } else {
    retries_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.NodeMetadata)
}

void NodeMetadata::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retries_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(retries_));
  _cached_size_ = 0;
}

NodeMetadata::~NodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.NodeMetadata)
  SharedDtor();
}

void NodeMetadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete retries_;
}

void NodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMetadata::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeMetadata& NodeMetadata::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsNodeMetadata();
  return *internal_default_instance();
}

NodeMetadata* NodeMetadata::New(::google::protobuf::Arena* arena) const {
  NodeMetadata* n = new NodeMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && retries_ != NULL) {
    delete retries_;
  }
  retries_ = NULL;
  _internal_metadata_.Clear();
}

bool NodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.NodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.NodeMetadata.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.RetryStrategy retries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.NodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.NodeMetadata)
  return false;
#undef DO_
}

void NodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.NodeMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->timeout_, output);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->retries_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.NodeMetadata)
}

::google::protobuf::uint8* NodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.NodeMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->timeout_, deterministic, target);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->retries_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.NodeMetadata)
  return target;
}

size_t NodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.NodeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timeout_);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->retries_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.NodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.NodeMetadata)
    MergeFrom(*source);
  }
}

void NodeMetadata::MergeFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_retries()) {
    mutable_retries()->::flyteidl::core::RetryStrategy::MergeFrom(from.retries());
  }
}

void NodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetadata::CopyFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetadata::IsInitialized() const {
  return true;
}

void NodeMetadata::Swap(NodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMetadata::InternalSwap(NodeMetadata* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(timeout_, other->timeout_);
  swap(retries_, other->retries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeMetadata::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Alias::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alias::kVarFieldNumber;
const int Alias::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alias::Alias()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsAlias();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Alias)
}
Alias::Alias(const Alias& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.var().size() > 0) {
    var_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Alias)
}

void Alias::SharedCtor() {
  var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Alias::~Alias() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Alias)
  SharedDtor();
}

void Alias::SharedDtor() {
  var_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Alias::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alias::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Alias& Alias::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsAlias();
  return *internal_default_instance();
}

Alias* Alias::New(::google::protobuf::Arena* arena) const {
  Alias* n = new Alias;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Alias::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Alias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Alias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Alias)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string var = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->var().data(), static_cast<int>(this->var().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Alias.var"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Alias.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Alias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Alias)
  return false;
#undef DO_
}

void Alias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Alias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.var");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var(), output);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Alias)
}

::google::protobuf::uint8* Alias::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Alias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.var");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Alias)
  return target;
}

size_t Alias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Alias)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string var = 1;
  if (this->var().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->var());
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alias::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Alias)
  GOOGLE_DCHECK_NE(&from, this);
  const Alias* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Alias>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Alias)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Alias)
    MergeFrom(*source);
  }
}

void Alias::MergeFrom(const Alias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Alias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.var().size() > 0) {

    var_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_);
  }
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
}

void Alias::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Alias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alias::CopyFrom(const Alias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Alias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alias::IsInitialized() const {
  return true;
}

void Alias::Swap(Alias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alias::InternalSwap(Alias* other) {
  using std::swap;
  var_.Swap(&other->var_);
  alias_.Swap(&other->alias_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Alias::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::flyteidl::core::_Node_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::core::NodeMetadata*>(
      ::flyteidl::core::NodeMetadata::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.task_node_ = const_cast< ::flyteidl::core::TaskNode*>(
      ::flyteidl::core::TaskNode::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.workflow_node_ = const_cast< ::flyteidl::core::WorkflowNode*>(
      ::flyteidl::core::WorkflowNode::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.branch_node_ = const_cast< ::flyteidl::core::BranchNode*>(
      ::flyteidl::core::BranchNode::internal_default_instance());
}
void Node::clear_inputs() {
  inputs_.Clear();
}
void Node::set_allocated_task_node(::flyteidl::core::TaskNode* task_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (task_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_node, submessage_arena);
    }
    set_has_task_node();
    target_.task_node_ = task_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.task_node)
}
void Node::set_allocated_workflow_node(::flyteidl::core::WorkflowNode* workflow_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (workflow_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      workflow_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_node, submessage_arena);
    }
    set_has_workflow_node();
    target_.workflow_node_ = workflow_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.workflow_node)
}
void Node::set_allocated_branch_node(::flyteidl::core::BranchNode* branch_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (branch_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      branch_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch_node, submessage_arena);
    }
    set_has_branch_node();
    target_.branch_node_ = branch_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.branch_node)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kMetadataFieldNumber;
const int Node::kInputsFieldNumber;
const int Node::kUpstreamNodeIdsFieldNumber;
const int Node::kOutputAliasesFieldNumber;
const int Node::kTaskNodeFieldNumber;
const int Node::kWorkflowNodeFieldNumber;
const int Node::kBranchNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      upstream_node_ids_(from.upstream_node_ids_),
      output_aliases_(from.output_aliases_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::core::NodeMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  clear_has_target();
  switch (from.target_case()) {
    case kTaskNode: {
      mutable_task_node()->::flyteidl::core::TaskNode::MergeFrom(from.task_node());
      break;
    }
    case kWorkflowNode: {
      mutable_workflow_node()->::flyteidl::core::WorkflowNode::MergeFrom(from.workflow_node());
      break;
    }
    case kBranchNode: {
      mutable_branch_node()->::flyteidl::core::BranchNode::MergeFrom(from.branch_node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Node)
}

void Node::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
  clear_has_target();
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (has_target()) {
    clear_target();
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNode();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Node)
  switch (target_case()) {
    case kTaskNode: {
      delete target_.task_node_;
      break;
    }
    case kWorkflowNode: {
      delete target_.workflow_node_;
      break;
    }
    case kBranchNode: {
      delete target_.branch_node_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  upstream_node_ids_.Clear();
  output_aliases_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  clear_target();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Node.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeMetadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Binding inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string upstream_node_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_upstream_node_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_node_ids(this->upstream_node_ids_size() - 1).data(),
            static_cast<int>(this->upstream_node_ids(this->upstream_node_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Node.upstream_node_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Alias output_aliases = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_output_aliases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskNode task_node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowNode workflow_node = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.BranchNode branch_node = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_branch_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .flyteidl.core.NodeMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // repeated .flyteidl.core.Binding inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(static_cast<int>(i)), output);
  }

  // repeated string upstream_node_ids = 4;
  for (int i = 0, n = this->upstream_node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_node_ids(i).data(), static_cast<int>(this->upstream_node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.upstream_node_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->upstream_node_ids(i), output);
  }

  // repeated .flyteidl.core.Alias output_aliases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_aliases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output_aliases(static_cast<int>(i)), output);
  }

  // .flyteidl.core.TaskNode task_node = 6;
  if (has_task_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *target_.task_node_, output);
  }

  // .flyteidl.core.WorkflowNode workflow_node = 7;
  if (has_workflow_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *target_.workflow_node_, output);
  }

  // .flyteidl.core.BranchNode branch_node = 8;
  if (has_branch_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *target_.branch_node_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .flyteidl.core.NodeMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->metadata_, deterministic, target);
  }

  // repeated .flyteidl.core.Binding inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->inputs(static_cast<int>(i)), deterministic, target);
  }

  // repeated string upstream_node_ids = 4;
  for (int i = 0, n = this->upstream_node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_node_ids(i).data(), static_cast<int>(this->upstream_node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.upstream_node_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->upstream_node_ids(i), target);
  }

  // repeated .flyteidl.core.Alias output_aliases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_aliases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->output_aliases(static_cast<int>(i)), deterministic, target);
  }

  // .flyteidl.core.TaskNode task_node = 6;
  if (has_task_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *target_.task_node_, deterministic, target);
  }

  // .flyteidl.core.WorkflowNode workflow_node = 7;
  if (has_workflow_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *target_.workflow_node_, deterministic, target);
  }

  // .flyteidl.core.BranchNode branch_node = 8;
  if (has_branch_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *target_.branch_node_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.core.Binding inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated string upstream_node_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->upstream_node_ids_size());
  for (int i = 0, n = this->upstream_node_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->upstream_node_ids(i));
  }

  // repeated .flyteidl.core.Alias output_aliases = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->output_aliases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_aliases(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .flyteidl.core.NodeMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->metadata_);
  }

  switch (target_case()) {
    // .flyteidl.core.TaskNode task_node = 6;
    case kTaskNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.task_node_);
      break;
    }
    // .flyteidl.core.WorkflowNode workflow_node = 7;
    case kWorkflowNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.workflow_node_);
      break;
    }
    // .flyteidl.core.BranchNode branch_node = 8;
    case kBranchNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.branch_node_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  upstream_node_ids_.MergeFrom(from.upstream_node_ids_);
  output_aliases_.MergeFrom(from.output_aliases_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::core::NodeMetadata::MergeFrom(from.metadata());
  }
  switch (from.target_case()) {
    case kTaskNode: {
      mutable_task_node()->::flyteidl::core::TaskNode::MergeFrom(from.task_node());
      break;
    }
    case kWorkflowNode: {
      mutable_workflow_node()->::flyteidl::core::WorkflowNode::MergeFrom(from.workflow_node());
      break;
    }
    case kBranchNode: {
      mutable_branch_node()->::flyteidl::core::BranchNode::MergeFrom(from.branch_node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  inputs_.InternalSwap(&other->inputs_);
  upstream_node_ids_.InternalSwap(&other->upstream_node_ids_);
  output_aliases_.InternalSwap(&other->output_aliases_);
  id_.Swap(&other->id_);
  swap(metadata_, other->metadata_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowMetadata::WorkflowMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowMetadata)
}
WorkflowMetadata::WorkflowMetadata(const WorkflowMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowMetadata)
}

void WorkflowMetadata::SharedCtor() {
  _cached_size_ = 0;
}

WorkflowMetadata::~WorkflowMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowMetadata)
  SharedDtor();
}

void WorkflowMetadata::SharedDtor() {
}

void WorkflowMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowMetadata::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowMetadata& WorkflowMetadata::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowMetadata();
  return *internal_default_instance();
}

WorkflowMetadata* WorkflowMetadata::New(::google::protobuf::Arena* arena) const {
  WorkflowMetadata* n = new WorkflowMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool WorkflowMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowMetadata)
  return false;
#undef DO_
}

void WorkflowMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowMetadata)
}

::google::protobuf::uint8* WorkflowMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowMetadata)
  return target;
}

size_t WorkflowMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowMetadata)
    MergeFrom(*source);
  }
}

void WorkflowMetadata::MergeFrom(const WorkflowMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WorkflowMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowMetadata::CopyFrom(const WorkflowMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowMetadata::IsInitialized() const {
  return true;
}

void WorkflowMetadata::Swap(WorkflowMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowMetadata::InternalSwap(WorkflowMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowMetadata::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkflowTemplate::InitAsDefaultInstance() {
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::core::WorkflowMetadata*>(
      ::flyteidl::core::WorkflowMetadata::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->interface_ = const_cast< ::flyteidl::core::TypedInterface*>(
      ::flyteidl::core::TypedInterface::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->failure_node_ = const_cast< ::flyteidl::core::Node*>(
      ::flyteidl::core::Node::internal_default_instance());
}
void WorkflowTemplate::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void WorkflowTemplate::clear_interface() {
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
}
void WorkflowTemplate::clear_outputs() {
  outputs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowTemplate::kIdFieldNumber;
const int WorkflowTemplate::kMetadataFieldNumber;
const int WorkflowTemplate::kInterfaceFieldNumber;
const int WorkflowTemplate::kNodesFieldNumber;
const int WorkflowTemplate::kOutputsFieldNumber;
const int WorkflowTemplate::kFailureNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowTemplate::WorkflowTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowTemplate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowTemplate)
}
WorkflowTemplate::WorkflowTemplate(const WorkflowTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      outputs_(from.outputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::core::WorkflowMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  if (from.has_interface()) {
    interface_ = new ::flyteidl::core::TypedInterface(*from.interface_);
  } else {
    interface_ = NULL;
  }
  if (from.has_failure_node()) {
    failure_node_ = new ::flyteidl::core::Node(*from.failure_node_);
  } else {
    failure_node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowTemplate)
}

void WorkflowTemplate::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_node_) -
      reinterpret_cast<char*>(&id_)) + sizeof(failure_node_));
  _cached_size_ = 0;
}

WorkflowTemplate::~WorkflowTemplate() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowTemplate)
  SharedDtor();
}

void WorkflowTemplate::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete failure_node_;
}

void WorkflowTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowTemplate::descriptor() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkflowTemplate& WorkflowTemplate::default_instance() {
  ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowTemplate();
  return *internal_default_instance();
}

WorkflowTemplate* WorkflowTemplate::New(::google::protobuf::Arena* arena) const {
  WorkflowTemplate* n = new WorkflowTemplate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  outputs_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && interface_ != NULL) {
    delete interface_;
  }
  interface_ = NULL;
  if (GetArenaNoVirtual() == NULL && failure_node_ != NULL) {
    delete failure_node_;
  }
  failure_node_ = NULL;
  _internal_metadata_.Clear();
}

bool WorkflowTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowMetadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TypedInterface interface = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Node nodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Binding outputs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Node failure_node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_failure_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowTemplate)
  return false;
#undef DO_
}

void WorkflowTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // .flyteidl.core.TypedInterface interface = 3;
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interface_, output);
  }

  // repeated .flyteidl.core.Node nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nodes(static_cast<int>(i)), output);
  }

  // repeated .flyteidl.core.Binding outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->outputs(static_cast<int>(i)), output);
  }

  // .flyteidl.core.Node failure_node = 6;
  if (this->has_failure_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->failure_node_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowTemplate)
}

::google::protobuf::uint8* WorkflowTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->metadata_, deterministic, target);
  }

  // .flyteidl.core.TypedInterface interface = 3;
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->interface_, deterministic, target);
  }

  // repeated .flyteidl.core.Node nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .flyteidl.core.Binding outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->outputs(static_cast<int>(i)), deterministic, target);
  }

  // .flyteidl.core.Node failure_node = 6;
  if (this->has_failure_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->failure_node_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowTemplate)
  return target;
}

size_t WorkflowTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowTemplate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .flyteidl.core.Node nodes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.Binding outputs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->metadata_);
  }

  // .flyteidl.core.TypedInterface interface = 3;
  if (this->has_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interface_);
  }

  // .flyteidl.core.Node failure_node = 6;
  if (this->has_failure_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->failure_node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowTemplate)
    MergeFrom(*source);
  }
}

void WorkflowTemplate::MergeFrom(const WorkflowTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  outputs_.MergeFrom(from.outputs_);
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::core::WorkflowMetadata::MergeFrom(from.metadata());
  }
  if (from.has_interface()) {
    mutable_interface()->::flyteidl::core::TypedInterface::MergeFrom(from.interface());
  }
  if (from.has_failure_node()) {
    mutable_failure_node()->::flyteidl::core::Node::MergeFrom(from.failure_node());
  }
}

void WorkflowTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowTemplate::CopyFrom(const WorkflowTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowTemplate::IsInitialized() const {
  return true;
}

void WorkflowTemplate::Swap(WorkflowTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowTemplate::InternalSwap(WorkflowTemplate* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  outputs_.InternalSwap(&other->outputs_);
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
  swap(interface_, other->interface_);
  swap(failure_node_, other->failure_node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowTemplate::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fworkflow_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
