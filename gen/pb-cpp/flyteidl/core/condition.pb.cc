// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/condition.proto

#include "flyteidl/core/condition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace core {
class ComparisonExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComparisonExpression>
      _instance;
} _ComparisonExpression_default_instance_;
class OperandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Operand>
      _instance;
  const ::flyteidl::core::Primitive* primitive_;
  ::google::protobuf::internal::ArenaStringPtr var_;
} _Operand_default_instance_;
class BooleanExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BooleanExpression>
      _instance;
  const ::flyteidl::core::ConjunctionExpression* conjunction_;
  const ::flyteidl::core::ComparisonExpression* comparison_;
} _BooleanExpression_default_instance_;
class ConjunctionExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConjunctionExpression>
      _instance;
} _ConjunctionExpression_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace protobuf_flyteidl_2fcore_2fcondition_2eproto {
void InitDefaultsComparisonExpressionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsOperand();
  {
    void* ptr = &::flyteidl::core::_ComparisonExpression_default_instance_;
    new (ptr) ::flyteidl::core::ComparisonExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ComparisonExpression::InitAsDefaultInstance();
}

void InitDefaultsComparisonExpression() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsComparisonExpressionImpl);
}

void InitDefaultsOperandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fliterals_2eproto::InitDefaultsPrimitive();
  {
    void* ptr = &::flyteidl::core::_Operand_default_instance_;
    new (ptr) ::flyteidl::core::Operand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Operand::InitAsDefaultInstance();
}

void InitDefaultsOperand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOperandImpl);
}

void InitDefaultsBooleanExpressionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsComparisonExpression();
  {
    void* ptr = &::flyteidl::core::_BooleanExpression_default_instance_;
    new (ptr) ::flyteidl::core::BooleanExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_ConjunctionExpression_default_instance_;
    new (ptr) ::flyteidl::core::ConjunctionExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::BooleanExpression::InitAsDefaultInstance();
  ::flyteidl::core::ConjunctionExpression::InitAsDefaultInstance();
}

void InitDefaultsBooleanExpression() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBooleanExpressionImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, operator__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, left_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, right_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Operand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Operand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::OperandDefaultTypeInternal, primitive_),
  offsetof(::flyteidl::core::OperandDefaultTypeInternal, var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::Operand, val_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::BooleanExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::BooleanExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::BooleanExpressionDefaultTypeInternal, conjunction_),
  offsetof(::flyteidl::core::BooleanExpressionDefaultTypeInternal, comparison_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::BooleanExpression, expr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, operator__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, left_expression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, right_expression_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::ComparisonExpression)},
  { 8, -1, sizeof(::flyteidl::core::Operand)},
  { 16, -1, sizeof(::flyteidl::core::BooleanExpression)},
  { 24, -1, sizeof(::flyteidl::core::ConjunctionExpression)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ComparisonExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Operand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_BooleanExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ConjunctionExpression_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/core/condition.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035flyteidl/core/condition.proto\022\rflyteid"
      "l.core\032\034flyteidl/core/literals.proto\"\356\001\n"
      "\024ComparisonExpression\022>\n\010operator\030\001 \001(\0162"
      ",.flyteidl.core.ComparisonExpression.Ope"
      "rator\022*\n\nleft_value\030\002 \001(\0132\026.flyteidl.cor"
      "e.Operand\022+\n\013right_value\030\003 \001(\0132\026.flyteid"
      "l.core.Operand\"=\n\010Operator\022\006\n\002EQ\020\000\022\007\n\003NE"
      "Q\020\001\022\006\n\002GT\020\002\022\007\n\003GTE\020\003\022\006\n\002LT\020\004\022\007\n\003LTE\020\005\"N\n"
      "\007Operand\022-\n\tprimitive\030\001 \001(\0132\030.flyteidl.c"
      "ore.PrimitiveH\000\022\r\n\003var\030\002 \001(\tH\000B\005\n\003val\"\223\001"
      "\n\021BooleanExpression\022;\n\013conjunction\030\001 \001(\013"
      "2$.flyteidl.core.ConjunctionExpressionH\000"
      "\0229\n\ncomparison\030\002 \001(\0132#.flyteidl.core.Com"
      "parisonExpressionH\000B\006\n\004expr\"\372\001\n\025Conjunct"
      "ionExpression\022F\n\010operator\030\001 \001(\01624.flytei"
      "dl.core.ConjunctionExpression.LogicalOpe"
      "rator\0229\n\017left_expression\030\002 \001(\0132 .flyteid"
      "l.core.BooleanExpression\022:\n\020right_expres"
      "sion\030\003 \001(\0132 .flyteidl.core.BooleanExpres"
      "sion\"\"\n\017LogicalOperator\022\007\n\003AND\020\000\022\006\n\002OR\020\001"
      "B2Z0github.com/lyft/flyteidl/gen/pb-go/f"
      "lyteidl/coreb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 860);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/core/condition.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fliterals_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fcore_2fcondition_2eproto
namespace flyteidl {
namespace core {
const ::google::protobuf::EnumDescriptor* ComparisonExpression_Operator_descriptor() {
  protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_enum_descriptors[0];
}
bool ComparisonExpression_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComparisonExpression_Operator ComparisonExpression::EQ;
const ComparisonExpression_Operator ComparisonExpression::NEQ;
const ComparisonExpression_Operator ComparisonExpression::GT;
const ComparisonExpression_Operator ComparisonExpression::GTE;
const ComparisonExpression_Operator ComparisonExpression::LT;
const ComparisonExpression_Operator ComparisonExpression::LTE;
const ComparisonExpression_Operator ComparisonExpression::Operator_MIN;
const ComparisonExpression_Operator ComparisonExpression::Operator_MAX;
const int ComparisonExpression::Operator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConjunctionExpression_LogicalOperator_descriptor() {
  protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_enum_descriptors[1];
}
bool ConjunctionExpression_LogicalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConjunctionExpression_LogicalOperator ConjunctionExpression::AND;
const ConjunctionExpression_LogicalOperator ConjunctionExpression::OR;
const ConjunctionExpression_LogicalOperator ConjunctionExpression::LogicalOperator_MIN;
const ConjunctionExpression_LogicalOperator ConjunctionExpression::LogicalOperator_MAX;
const int ConjunctionExpression::LogicalOperator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ComparisonExpression::InitAsDefaultInstance() {
  ::flyteidl::core::_ComparisonExpression_default_instance_._instance.get_mutable()->left_value_ = const_cast< ::flyteidl::core::Operand*>(
      ::flyteidl::core::Operand::internal_default_instance());
  ::flyteidl::core::_ComparisonExpression_default_instance_._instance.get_mutable()->right_value_ = const_cast< ::flyteidl::core::Operand*>(
      ::flyteidl::core::Operand::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComparisonExpression::kOperatorFieldNumber;
const int ComparisonExpression::kLeftValueFieldNumber;
const int ComparisonExpression::kRightValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComparisonExpression::ComparisonExpression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsComparisonExpression();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ComparisonExpression)
}
ComparisonExpression::ComparisonExpression(const ComparisonExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_value()) {
    left_value_ = new ::flyteidl::core::Operand(*from.left_value_);
  } else {
    left_value_ = NULL;
  }
  if (from.has_right_value()) {
    right_value_ = new ::flyteidl::core::Operand(*from.right_value_);
  } else {
    right_value_ = NULL;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ComparisonExpression)
}

void ComparisonExpression::SharedCtor() {
  ::memset(&left_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&left_value_)) + sizeof(operator__));
  _cached_size_ = 0;
}

ComparisonExpression::~ComparisonExpression() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ComparisonExpression)
  SharedDtor();
}

void ComparisonExpression::SharedDtor() {
  if (this != internal_default_instance()) delete left_value_;
  if (this != internal_default_instance()) delete right_value_;
}

void ComparisonExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComparisonExpression::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComparisonExpression& ComparisonExpression::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsComparisonExpression();
  return *internal_default_instance();
}

ComparisonExpression* ComparisonExpression::New(::google::protobuf::Arena* arena) const {
  ComparisonExpression* n = new ComparisonExpression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComparisonExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ComparisonExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_value_ != NULL) {
    delete left_value_;
  }
  left_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_value_ != NULL) {
    delete right_value_;
  }
  right_value_ = NULL;
  operator__ = 0;
  _internal_metadata_.Clear();
}

bool ComparisonExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ComparisonExpression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ComparisonExpression.Operator operator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::flyteidl::core::ComparisonExpression_Operator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Operand left_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Operand right_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ComparisonExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ComparisonExpression)
  return false;
#undef DO_
}

void ComparisonExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ComparisonExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ComparisonExpression.Operator operator = 1;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operator_(), output);
  }

  // .flyteidl.core.Operand left_value = 2;
  if (this->has_left_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_value_, output);
  }

  // .flyteidl.core.Operand right_value = 3;
  if (this->has_right_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ComparisonExpression)
}

::google::protobuf::uint8* ComparisonExpression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ComparisonExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ComparisonExpression.Operator operator = 1;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operator_(), target);
  }

  // .flyteidl.core.Operand left_value = 2;
  if (this->has_left_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->left_value_, deterministic, target);
  }

  // .flyteidl.core.Operand right_value = 3;
  if (this->has_right_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->right_value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ComparisonExpression)
  return target;
}

size_t ComparisonExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ComparisonExpression)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.Operand left_value = 2;
  if (this->has_left_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->left_value_);
  }

  // .flyteidl.core.Operand right_value = 3;
  if (this->has_right_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->right_value_);
  }

  // .flyteidl.core.ComparisonExpression.Operator operator = 1;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComparisonExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ComparisonExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonExpression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComparisonExpression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ComparisonExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ComparisonExpression)
    MergeFrom(*source);
  }
}

void ComparisonExpression::MergeFrom(const ComparisonExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ComparisonExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_value()) {
    mutable_left_value()->::flyteidl::core::Operand::MergeFrom(from.left_value());
  }
  if (from.has_right_value()) {
    mutable_right_value()->::flyteidl::core::Operand::MergeFrom(from.right_value());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void ComparisonExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ComparisonExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonExpression::CopyFrom(const ComparisonExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ComparisonExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonExpression::IsInitialized() const {
  return true;
}

void ComparisonExpression::Swap(ComparisonExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComparisonExpression::InternalSwap(ComparisonExpression* other) {
  using std::swap;
  swap(left_value_, other->left_value_);
  swap(right_value_, other->right_value_);
  swap(operator__, other->operator__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComparisonExpression::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Operand::InitAsDefaultInstance() {
  ::flyteidl::core::_Operand_default_instance_.primitive_ = const_cast< ::flyteidl::core::Primitive*>(
      ::flyteidl::core::Primitive::internal_default_instance());
  ::flyteidl::core::_Operand_default_instance_.var_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operand::set_allocated_primitive(::flyteidl::core::Primitive* primitive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_val();
  if (primitive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primitive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primitive, submessage_arena);
    }
    set_has_primitive();
    val_.primitive_ = primitive;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Operand.primitive)
}
void Operand::clear_primitive() {
  if (has_primitive()) {
    delete val_.primitive_;
    clear_has_val();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operand::kPrimitiveFieldNumber;
const int Operand::kVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operand::Operand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsOperand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Operand)
}
Operand::Operand(const Operand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_val();
  switch (from.val_case()) {
    case kPrimitive: {
      mutable_primitive()->::flyteidl::core::Primitive::MergeFrom(from.primitive());
      break;
    }
    case kVar: {
      set_var(from.var());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Operand)
}

void Operand::SharedCtor() {
  clear_has_val();
  _cached_size_ = 0;
}

Operand::~Operand() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Operand)
  SharedDtor();
}

void Operand::SharedDtor() {
  if (has_val()) {
    clear_val();
  }
}

void Operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operand::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Operand& Operand::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsOperand();
  return *internal_default_instance();
}

Operand* Operand::New(::google::protobuf::Arena* arena) const {
  Operand* n = new Operand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operand::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Operand)
  switch (val_case()) {
    case kPrimitive: {
      delete val_.primitive_;
      break;
    }
    case kVar: {
      val_.var_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void Operand::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Operand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_val();
  _internal_metadata_.Clear();
}

bool Operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Operand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Primitive primitive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primitive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string var = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->var().data(), static_cast<int>(this->var().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Operand.var"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Operand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Operand)
  return false;
#undef DO_
}

void Operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Operand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Primitive primitive = 1;
  if (has_primitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *val_.primitive_, output);
  }

  // string var = 2;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Operand.var");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->var(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Operand)
}

::google::protobuf::uint8* Operand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Operand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Primitive primitive = 1;
  if (has_primitive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *val_.primitive_, deterministic, target);
  }

  // string var = 2;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Operand.var");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Operand)
  return target;
}

size_t Operand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Operand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (val_case()) {
    // .flyteidl.core.Primitive primitive = 1;
    case kPrimitive: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *val_.primitive_);
      break;
    }
    // string var = 2;
    case kVar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Operand)
  GOOGLE_DCHECK_NE(&from, this);
  const Operand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Operand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Operand)
    MergeFrom(*source);
  }
}

void Operand::MergeFrom(const Operand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Operand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.val_case()) {
    case kPrimitive: {
      mutable_primitive()->::flyteidl::core::Primitive::MergeFrom(from.primitive());
      break;
    }
    case kVar: {
      set_var(from.var());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
}

void Operand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operand::CopyFrom(const Operand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operand::IsInitialized() const {
  return true;
}

void Operand::Swap(Operand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operand::InternalSwap(Operand* other) {
  using std::swap;
  swap(val_, other->val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operand::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BooleanExpression::InitAsDefaultInstance() {
  ::flyteidl::core::_BooleanExpression_default_instance_.conjunction_ = const_cast< ::flyteidl::core::ConjunctionExpression*>(
      ::flyteidl::core::ConjunctionExpression::internal_default_instance());
  ::flyteidl::core::_BooleanExpression_default_instance_.comparison_ = const_cast< ::flyteidl::core::ComparisonExpression*>(
      ::flyteidl::core::ComparisonExpression::internal_default_instance());
}
void BooleanExpression::set_allocated_conjunction(::flyteidl::core::ConjunctionExpression* conjunction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_expr();
  if (conjunction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conjunction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conjunction, submessage_arena);
    }
    set_has_conjunction();
    expr_.conjunction_ = conjunction;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BooleanExpression.conjunction)
}
void BooleanExpression::set_allocated_comparison(::flyteidl::core::ComparisonExpression* comparison) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_expr();
  if (comparison) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparison = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparison, submessage_arena);
    }
    set_has_comparison();
    expr_.comparison_ = comparison;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BooleanExpression.comparison)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BooleanExpression::kConjunctionFieldNumber;
const int BooleanExpression::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BooleanExpression::BooleanExpression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsBooleanExpression();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.BooleanExpression)
}
BooleanExpression::BooleanExpression(const BooleanExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_expr();
  switch (from.expr_case()) {
    case kConjunction: {
      mutable_conjunction()->::flyteidl::core::ConjunctionExpression::MergeFrom(from.conjunction());
      break;
    }
    case kComparison: {
      mutable_comparison()->::flyteidl::core::ComparisonExpression::MergeFrom(from.comparison());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BooleanExpression)
}

void BooleanExpression::SharedCtor() {
  clear_has_expr();
  _cached_size_ = 0;
}

BooleanExpression::~BooleanExpression() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BooleanExpression)
  SharedDtor();
}

void BooleanExpression::SharedDtor() {
  if (has_expr()) {
    clear_expr();
  }
}

void BooleanExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanExpression::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BooleanExpression& BooleanExpression::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsBooleanExpression();
  return *internal_default_instance();
}

BooleanExpression* BooleanExpression::New(::google::protobuf::Arena* arena) const {
  BooleanExpression* n = new BooleanExpression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BooleanExpression::clear_expr() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.BooleanExpression)
  switch (expr_case()) {
    case kConjunction: {
      delete expr_.conjunction_;
      break;
    }
    case kComparison: {
      delete expr_.comparison_;
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPR_NOT_SET;
}


void BooleanExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.BooleanExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expr();
  _internal_metadata_.Clear();
}

bool BooleanExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.BooleanExpression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ConjunctionExpression conjunction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conjunction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ComparisonExpression comparison = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.BooleanExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.BooleanExpression)
  return false;
#undef DO_
}

void BooleanExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.BooleanExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ConjunctionExpression conjunction = 1;
  if (has_conjunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *expr_.conjunction_, output);
  }

  // .flyteidl.core.ComparisonExpression comparison = 2;
  if (has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *expr_.comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.BooleanExpression)
}

::google::protobuf::uint8* BooleanExpression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.BooleanExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ConjunctionExpression conjunction = 1;
  if (has_conjunction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *expr_.conjunction_, deterministic, target);
  }

  // .flyteidl.core.ComparisonExpression comparison = 2;
  if (has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *expr_.comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.BooleanExpression)
  return target;
}

size_t BooleanExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.BooleanExpression)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (expr_case()) {
    // .flyteidl.core.ConjunctionExpression conjunction = 1;
    case kConjunction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *expr_.conjunction_);
      break;
    }
    // .flyteidl.core.ComparisonExpression comparison = 2;
    case kComparison: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *expr_.comparison_);
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.BooleanExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const BooleanExpression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BooleanExpression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.BooleanExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.BooleanExpression)
    MergeFrom(*source);
  }
}

void BooleanExpression::MergeFrom(const BooleanExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.BooleanExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.expr_case()) {
    case kConjunction: {
      mutable_conjunction()->::flyteidl::core::ConjunctionExpression::MergeFrom(from.conjunction());
      break;
    }
    case kComparison: {
      mutable_comparison()->::flyteidl::core::ComparisonExpression::MergeFrom(from.comparison());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
}

void BooleanExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.BooleanExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanExpression::CopyFrom(const BooleanExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.BooleanExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanExpression::IsInitialized() const {
  return true;
}

void BooleanExpression::Swap(BooleanExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BooleanExpression::InternalSwap(BooleanExpression* other) {
  using std::swap;
  swap(expr_, other->expr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BooleanExpression::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConjunctionExpression::InitAsDefaultInstance() {
  ::flyteidl::core::_ConjunctionExpression_default_instance_._instance.get_mutable()->left_expression_ = const_cast< ::flyteidl::core::BooleanExpression*>(
      ::flyteidl::core::BooleanExpression::internal_default_instance());
  ::flyteidl::core::_ConjunctionExpression_default_instance_._instance.get_mutable()->right_expression_ = const_cast< ::flyteidl::core::BooleanExpression*>(
      ::flyteidl::core::BooleanExpression::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConjunctionExpression::kOperatorFieldNumber;
const int ConjunctionExpression::kLeftExpressionFieldNumber;
const int ConjunctionExpression::kRightExpressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConjunctionExpression::ConjunctionExpression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsBooleanExpression();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ConjunctionExpression)
}
ConjunctionExpression::ConjunctionExpression(const ConjunctionExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_expression()) {
    left_expression_ = new ::flyteidl::core::BooleanExpression(*from.left_expression_);
  } else {
    left_expression_ = NULL;
  }
  if (from.has_right_expression()) {
    right_expression_ = new ::flyteidl::core::BooleanExpression(*from.right_expression_);
  } else {
    right_expression_ = NULL;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ConjunctionExpression)
}

void ConjunctionExpression::SharedCtor() {
  ::memset(&left_expression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&left_expression_)) + sizeof(operator__));
  _cached_size_ = 0;
}

ConjunctionExpression::~ConjunctionExpression() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ConjunctionExpression)
  SharedDtor();
}

void ConjunctionExpression::SharedDtor() {
  if (this != internal_default_instance()) delete left_expression_;
  if (this != internal_default_instance()) delete right_expression_;
}

void ConjunctionExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConjunctionExpression::descriptor() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConjunctionExpression& ConjunctionExpression::default_instance() {
  ::protobuf_flyteidl_2fcore_2fcondition_2eproto::InitDefaultsBooleanExpression();
  return *internal_default_instance();
}

ConjunctionExpression* ConjunctionExpression::New(::google::protobuf::Arena* arena) const {
  ConjunctionExpression* n = new ConjunctionExpression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConjunctionExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ConjunctionExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_expression_ != NULL) {
    delete left_expression_;
  }
  left_expression_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_expression_ != NULL) {
    delete right_expression_;
  }
  right_expression_ = NULL;
  operator__ = 0;
  _internal_metadata_.Clear();
}

bool ConjunctionExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ConjunctionExpression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::flyteidl::core::ConjunctionExpression_LogicalOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.BooleanExpression left_expression = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_expression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.BooleanExpression right_expression = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_expression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ConjunctionExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ConjunctionExpression)
  return false;
#undef DO_
}

void ConjunctionExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ConjunctionExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operator_(), output);
  }

  // .flyteidl.core.BooleanExpression left_expression = 2;
  if (this->has_left_expression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_expression_, output);
  }

  // .flyteidl.core.BooleanExpression right_expression = 3;
  if (this->has_right_expression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_expression_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ConjunctionExpression)
}

::google::protobuf::uint8* ConjunctionExpression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ConjunctionExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operator_(), target);
  }

  // .flyteidl.core.BooleanExpression left_expression = 2;
  if (this->has_left_expression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->left_expression_, deterministic, target);
  }

  // .flyteidl.core.BooleanExpression right_expression = 3;
  if (this->has_right_expression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->right_expression_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ConjunctionExpression)
  return target;
}

size_t ConjunctionExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ConjunctionExpression)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flyteidl.core.BooleanExpression left_expression = 2;
  if (this->has_left_expression()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->left_expression_);
  }

  // .flyteidl.core.BooleanExpression right_expression = 3;
  if (this->has_right_expression()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->right_expression_);
  }

  // .flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConjunctionExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ConjunctionExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const ConjunctionExpression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConjunctionExpression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ConjunctionExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ConjunctionExpression)
    MergeFrom(*source);
  }
}

void ConjunctionExpression::MergeFrom(const ConjunctionExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ConjunctionExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_expression()) {
    mutable_left_expression()->::flyteidl::core::BooleanExpression::MergeFrom(from.left_expression());
  }
  if (from.has_right_expression()) {
    mutable_right_expression()->::flyteidl::core::BooleanExpression::MergeFrom(from.right_expression());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void ConjunctionExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ConjunctionExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConjunctionExpression::CopyFrom(const ConjunctionExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ConjunctionExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConjunctionExpression::IsInitialized() const {
  return true;
}

void ConjunctionExpression::Swap(ConjunctionExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConjunctionExpression::InternalSwap(ConjunctionExpression* other) {
  using std::swap;
  swap(left_expression_, other->left_expression_);
  swap(right_expression_, other->right_expression_);
  swap(operator__, other->operator__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConjunctionExpression::GetMetadata() const {
  protobuf_flyteidl_2fcore_2fcondition_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fcore_2fcondition_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
