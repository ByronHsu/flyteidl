// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/compiler.proto

#ifndef PROTOBUF_flyteidl_2fcore_2fcompiler_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fcore_2fcompiler_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/workflow.pb.h"
#include "flyteidl/core/tasks.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fcore_2fcompiler_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsConnectionSet_IdListImpl();
void InitDefaultsConnectionSet_IdList();
void InitDefaultsConnectionSet_DownstreamEntry_DoNotUseImpl();
void InitDefaultsConnectionSet_DownstreamEntry_DoNotUse();
void InitDefaultsConnectionSet_UpstreamEntry_DoNotUseImpl();
void InitDefaultsConnectionSet_UpstreamEntry_DoNotUse();
void InitDefaultsConnectionSetImpl();
void InitDefaultsConnectionSet();
void InitDefaultsCompiledWorkflowImpl();
void InitDefaultsCompiledWorkflow();
void InitDefaultsCompiledTaskImpl();
void InitDefaultsCompiledTask();
void InitDefaultsCompiledWorkflowClosureImpl();
void InitDefaultsCompiledWorkflowClosure();
inline void InitDefaults() {
  InitDefaultsConnectionSet_IdList();
  InitDefaultsConnectionSet_DownstreamEntry_DoNotUse();
  InitDefaultsConnectionSet_UpstreamEntry_DoNotUse();
  InitDefaultsConnectionSet();
  InitDefaultsCompiledWorkflow();
  InitDefaultsCompiledTask();
  InitDefaultsCompiledWorkflowClosure();
}
}  // namespace protobuf_flyteidl_2fcore_2fcompiler_2eproto
namespace flyteidl {
namespace core {
class CompiledTask;
class CompiledTaskDefaultTypeInternal;
extern CompiledTaskDefaultTypeInternal _CompiledTask_default_instance_;
class CompiledWorkflow;
class CompiledWorkflowDefaultTypeInternal;
extern CompiledWorkflowDefaultTypeInternal _CompiledWorkflow_default_instance_;
class CompiledWorkflowClosure;
class CompiledWorkflowClosureDefaultTypeInternal;
extern CompiledWorkflowClosureDefaultTypeInternal _CompiledWorkflowClosure_default_instance_;
class ConnectionSet;
class ConnectionSetDefaultTypeInternal;
extern ConnectionSetDefaultTypeInternal _ConnectionSet_default_instance_;
class ConnectionSet_DownstreamEntry_DoNotUse;
class ConnectionSet_DownstreamEntry_DoNotUseDefaultTypeInternal;
extern ConnectionSet_DownstreamEntry_DoNotUseDefaultTypeInternal _ConnectionSet_DownstreamEntry_DoNotUse_default_instance_;
class ConnectionSet_IdList;
class ConnectionSet_IdListDefaultTypeInternal;
extern ConnectionSet_IdListDefaultTypeInternal _ConnectionSet_IdList_default_instance_;
class ConnectionSet_UpstreamEntry_DoNotUse;
class ConnectionSet_UpstreamEntry_DoNotUseDefaultTypeInternal;
extern ConnectionSet_UpstreamEntry_DoNotUseDefaultTypeInternal _ConnectionSet_UpstreamEntry_DoNotUse_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace flyteidl {
namespace core {

// ===================================================================

class ConnectionSet_IdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ConnectionSet.IdList) */ {
 public:
  ConnectionSet_IdList();
  virtual ~ConnectionSet_IdList();

  ConnectionSet_IdList(const ConnectionSet_IdList& from);

  inline ConnectionSet_IdList& operator=(const ConnectionSet_IdList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionSet_IdList(ConnectionSet_IdList&& from) noexcept
    : ConnectionSet_IdList() {
    *this = ::std::move(from);
  }

  inline ConnectionSet_IdList& operator=(ConnectionSet_IdList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionSet_IdList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionSet_IdList* internal_default_instance() {
    return reinterpret_cast<const ConnectionSet_IdList*>(
               &_ConnectionSet_IdList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ConnectionSet_IdList* other);
  friend void swap(ConnectionSet_IdList& a, ConnectionSet_IdList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionSet_IdList* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectionSet_IdList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectionSet_IdList& from);
  void MergeFrom(const ConnectionSet_IdList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectionSet_IdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  const ::std::string& ids(int index) const;
  ::std::string* mutable_ids(int index);
  void set_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ids(int index, ::std::string&& value);
  #endif
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  ::std::string* add_ids();
  void add_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ids(::std::string&& value);
  #endif
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // @@protoc_insertion_point(class_scope:flyteidl.core.ConnectionSet.IdList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSet_IdListImpl();
};
// -------------------------------------------------------------------

class ConnectionSet_DownstreamEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ConnectionSet_DownstreamEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ConnectionSet_DownstreamEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ConnectionSet_DownstreamEntry_DoNotUse();
  ConnectionSet_DownstreamEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ConnectionSet_DownstreamEntry_DoNotUse& other);
  static const ConnectionSet_DownstreamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnectionSet_DownstreamEntry_DoNotUse*>(&_ConnectionSet_DownstreamEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ConnectionSet_UpstreamEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ConnectionSet_UpstreamEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ConnectionSet_UpstreamEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ConnectionSet_UpstreamEntry_DoNotUse();
  ConnectionSet_UpstreamEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ConnectionSet_UpstreamEntry_DoNotUse& other);
  static const ConnectionSet_UpstreamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnectionSet_UpstreamEntry_DoNotUse*>(&_ConnectionSet_UpstreamEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ConnectionSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ConnectionSet) */ {
 public:
  ConnectionSet();
  virtual ~ConnectionSet();

  ConnectionSet(const ConnectionSet& from);

  inline ConnectionSet& operator=(const ConnectionSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionSet(ConnectionSet&& from) noexcept
    : ConnectionSet() {
    *this = ::std::move(from);
  }

  inline ConnectionSet& operator=(ConnectionSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionSet* internal_default_instance() {
    return reinterpret_cast<const ConnectionSet*>(
               &_ConnectionSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConnectionSet* other);
  friend void swap(ConnectionSet& a, ConnectionSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionSet* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectionSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectionSet& from);
  void MergeFrom(const ConnectionSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectionSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConnectionSet_IdList IdList;

  // accessors -------------------------------------------------------

  // map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7;
  int downstream_size() const;
  void clear_downstream();
  static const int kDownstreamFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >&
      downstream() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >*
      mutable_downstream();

  // map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8;
  int upstream_size() const;
  void clear_upstream();
  static const int kUpstreamFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >&
      upstream() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >*
      mutable_upstream();

  // @@protoc_insertion_point(class_scope:flyteidl.core.ConnectionSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ConnectionSet_DownstreamEntry_DoNotUse,
      ::std::string, ::flyteidl::core::ConnectionSet_IdList,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > downstream_;
  ::google::protobuf::internal::MapField<
      ConnectionSet_UpstreamEntry_DoNotUse,
      ::std::string, ::flyteidl::core::ConnectionSet_IdList,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > upstream_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsConnectionSetImpl();
};
// -------------------------------------------------------------------

class CompiledWorkflow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CompiledWorkflow) */ {
 public:
  CompiledWorkflow();
  virtual ~CompiledWorkflow();

  CompiledWorkflow(const CompiledWorkflow& from);

  inline CompiledWorkflow& operator=(const CompiledWorkflow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompiledWorkflow(CompiledWorkflow&& from) noexcept
    : CompiledWorkflow() {
    *this = ::std::move(from);
  }

  inline CompiledWorkflow& operator=(CompiledWorkflow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompiledWorkflow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompiledWorkflow* internal_default_instance() {
    return reinterpret_cast<const CompiledWorkflow*>(
               &_CompiledWorkflow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CompiledWorkflow* other);
  friend void swap(CompiledWorkflow& a, CompiledWorkflow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompiledWorkflow* New() const PROTOBUF_FINAL { return New(NULL); }

  CompiledWorkflow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompiledWorkflow& from);
  void MergeFrom(const CompiledWorkflow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompiledWorkflow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowTemplate template = 1;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 1;
  const ::flyteidl::core::WorkflowTemplate& template_() const;
  ::flyteidl::core::WorkflowTemplate* release_template_();
  ::flyteidl::core::WorkflowTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_);

  // .flyteidl.core.ConnectionSet connections = 2;
  bool has_connections() const;
  void clear_connections();
  static const int kConnectionsFieldNumber = 2;
  const ::flyteidl::core::ConnectionSet& connections() const;
  ::flyteidl::core::ConnectionSet* release_connections();
  ::flyteidl::core::ConnectionSet* mutable_connections();
  void set_allocated_connections(::flyteidl::core::ConnectionSet* connections);

  // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledWorkflow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowTemplate* template__;
  ::flyteidl::core::ConnectionSet* connections_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflowImpl();
};
// -------------------------------------------------------------------

class CompiledTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CompiledTask) */ {
 public:
  CompiledTask();
  virtual ~CompiledTask();

  CompiledTask(const CompiledTask& from);

  inline CompiledTask& operator=(const CompiledTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompiledTask(CompiledTask&& from) noexcept
    : CompiledTask() {
    *this = ::std::move(from);
  }

  inline CompiledTask& operator=(CompiledTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompiledTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompiledTask* internal_default_instance() {
    return reinterpret_cast<const CompiledTask*>(
               &_CompiledTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CompiledTask* other);
  friend void swap(CompiledTask& a, CompiledTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompiledTask* New() const PROTOBUF_FINAL { return New(NULL); }

  CompiledTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompiledTask& from);
  void MergeFrom(const CompiledTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompiledTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskTemplate template = 1;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 1;
  const ::flyteidl::core::TaskTemplate& template_() const;
  ::flyteidl::core::TaskTemplate* release_template_();
  ::flyteidl::core::TaskTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::TaskTemplate* template_);

  // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskTemplate* template__;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledTaskImpl();
};
// -------------------------------------------------------------------

class CompiledWorkflowClosure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CompiledWorkflowClosure) */ {
 public:
  CompiledWorkflowClosure();
  virtual ~CompiledWorkflowClosure();

  CompiledWorkflowClosure(const CompiledWorkflowClosure& from);

  inline CompiledWorkflowClosure& operator=(const CompiledWorkflowClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompiledWorkflowClosure(CompiledWorkflowClosure&& from) noexcept
    : CompiledWorkflowClosure() {
    *this = ::std::move(from);
  }

  inline CompiledWorkflowClosure& operator=(CompiledWorkflowClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompiledWorkflowClosure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompiledWorkflowClosure* internal_default_instance() {
    return reinterpret_cast<const CompiledWorkflowClosure*>(
               &_CompiledWorkflowClosure_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CompiledWorkflowClosure* other);
  friend void swap(CompiledWorkflowClosure& a, CompiledWorkflowClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompiledWorkflowClosure* New() const PROTOBUF_FINAL { return New(NULL); }

  CompiledWorkflowClosure* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompiledWorkflowClosure& from);
  void MergeFrom(const CompiledWorkflowClosure& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompiledWorkflowClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;
  int sub_workflows_size() const;
  void clear_sub_workflows();
  static const int kSubWorkflowsFieldNumber = 2;
  const ::flyteidl::core::CompiledWorkflow& sub_workflows(int index) const;
  ::flyteidl::core::CompiledWorkflow* mutable_sub_workflows(int index);
  ::flyteidl::core::CompiledWorkflow* add_sub_workflows();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >*
      mutable_sub_workflows();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >&
      sub_workflows() const;

  // repeated .flyteidl.core.CompiledTask tasks = 3;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 3;
  const ::flyteidl::core::CompiledTask& tasks(int index) const;
  ::flyteidl::core::CompiledTask* mutable_tasks(int index);
  ::flyteidl::core::CompiledTask* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledTask >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledTask >&
      tasks() const;

  // .flyteidl.core.CompiledWorkflow primary = 1;
  bool has_primary() const;
  void clear_primary();
  static const int kPrimaryFieldNumber = 1;
  const ::flyteidl::core::CompiledWorkflow& primary() const;
  ::flyteidl::core::CompiledWorkflow* release_primary();
  ::flyteidl::core::CompiledWorkflow* mutable_primary();
  void set_allocated_primary(::flyteidl::core::CompiledWorkflow* primary);

  // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledWorkflowClosure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow > sub_workflows_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledTask > tasks_;
  ::flyteidl::core::CompiledWorkflow* primary_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fcompiler_2eproto::InitDefaultsCompiledWorkflowClosureImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionSet_IdList

// repeated string ids = 1;
inline int ConnectionSet_IdList::ids_size() const {
  return ids_.size();
}
inline void ConnectionSet_IdList::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& ConnectionSet_IdList::ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ConnectionSet.IdList.ids)
  return ids_.Get(index);
}
inline ::std::string* ConnectionSet_IdList::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ConnectionSet.IdList.ids)
  return ids_.Mutable(index);
}
inline void ConnectionSet_IdList::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.ConnectionSet.IdList.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ConnectionSet_IdList::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.ConnectionSet.IdList.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ConnectionSet_IdList::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ConnectionSet.IdList.ids)
}
inline ::std::string* ConnectionSet_IdList::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.core.ConnectionSet.IdList.ids)
  return ids_.Add();
}
inline void ConnectionSet_IdList::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.core.ConnectionSet.IdList.ids)
}
#if LANG_CXX11
inline void ConnectionSet_IdList::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.core.ConnectionSet.IdList.ids)
}
#endif
inline void ConnectionSet_IdList::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.core.ConnectionSet.IdList.ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConnectionSet_IdList::ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.ConnectionSet.IdList.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConnectionSet_IdList::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.ConnectionSet.IdList.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnectionSet

// map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7;
inline int ConnectionSet::downstream_size() const {
  return downstream_.size();
}
inline void ConnectionSet::clear_downstream() {
  downstream_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >&
ConnectionSet::downstream() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.ConnectionSet.downstream)
  return downstream_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >*
ConnectionSet::mutable_downstream() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.ConnectionSet.downstream)
  return downstream_.MutableMap();
}

// map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8;
inline int ConnectionSet::upstream_size() const {
  return upstream_.size();
}
inline void ConnectionSet::clear_upstream() {
  upstream_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >&
ConnectionSet::upstream() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.ConnectionSet.upstream)
  return upstream_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::core::ConnectionSet_IdList >*
ConnectionSet::mutable_upstream() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.ConnectionSet.upstream)
  return upstream_.MutableMap();
}

// -------------------------------------------------------------------

// CompiledWorkflow

// .flyteidl.core.WorkflowTemplate template = 1;
inline bool CompiledWorkflow::has_template_() const {
  return this != internal_default_instance() && template__ != NULL;
}
inline const ::flyteidl::core::WorkflowTemplate& CompiledWorkflow::template_() const {
  const ::flyteidl::core::WorkflowTemplate* p = template__;
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflow.template)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowTemplate*>(
      &::flyteidl::core::_WorkflowTemplate_default_instance_);
}
inline ::flyteidl::core::WorkflowTemplate* CompiledWorkflow::release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledWorkflow.template)
  
  ::flyteidl::core::WorkflowTemplate* temp = template__;
  template__ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* CompiledWorkflow::mutable_template_() {
  
  if (template__ == NULL) {
    template__ = new ::flyteidl::core::WorkflowTemplate;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflow.template)
  return template__;
}
inline void CompiledWorkflow::set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(template__);
  }
  if (template_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      template_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledWorkflow.template)
}

// .flyteidl.core.ConnectionSet connections = 2;
inline bool CompiledWorkflow::has_connections() const {
  return this != internal_default_instance() && connections_ != NULL;
}
inline void CompiledWorkflow::clear_connections() {
  if (GetArenaNoVirtual() == NULL && connections_ != NULL) {
    delete connections_;
  }
  connections_ = NULL;
}
inline const ::flyteidl::core::ConnectionSet& CompiledWorkflow::connections() const {
  const ::flyteidl::core::ConnectionSet* p = connections_;
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflow.connections)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::ConnectionSet*>(
      &::flyteidl::core::_ConnectionSet_default_instance_);
}
inline ::flyteidl::core::ConnectionSet* CompiledWorkflow::release_connections() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledWorkflow.connections)
  
  ::flyteidl::core::ConnectionSet* temp = connections_;
  connections_ = NULL;
  return temp;
}
inline ::flyteidl::core::ConnectionSet* CompiledWorkflow::mutable_connections() {
  
  if (connections_ == NULL) {
    connections_ = new ::flyteidl::core::ConnectionSet;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflow.connections)
  return connections_;
}
inline void CompiledWorkflow::set_allocated_connections(::flyteidl::core::ConnectionSet* connections) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connections_;
  }
  if (connections) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connections = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connections, submessage_arena);
    }
    
  } else {
    
  }
  connections_ = connections;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledWorkflow.connections)
}

// -------------------------------------------------------------------

// CompiledTask

// .flyteidl.core.TaskTemplate template = 1;
inline bool CompiledTask::has_template_() const {
  return this != internal_default_instance() && template__ != NULL;
}
inline const ::flyteidl::core::TaskTemplate& CompiledTask::template_() const {
  const ::flyteidl::core::TaskTemplate* p = template__;
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledTask.template)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::TaskTemplate*>(
      &::flyteidl::core::_TaskTemplate_default_instance_);
}
inline ::flyteidl::core::TaskTemplate* CompiledTask::release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledTask.template)
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = NULL;
  return temp;
}
inline ::flyteidl::core::TaskTemplate* CompiledTask::mutable_template_() {
  
  if (template__ == NULL) {
    template__ = new ::flyteidl::core::TaskTemplate;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledTask.template)
  return template__;
}
inline void CompiledTask::set_allocated_template_(::flyteidl::core::TaskTemplate* template_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(template__);
  }
  if (template_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      template_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledTask.template)
}

// -------------------------------------------------------------------

// CompiledWorkflowClosure

// .flyteidl.core.CompiledWorkflow primary = 1;
inline bool CompiledWorkflowClosure::has_primary() const {
  return this != internal_default_instance() && primary_ != NULL;
}
inline void CompiledWorkflowClosure::clear_primary() {
  if (GetArenaNoVirtual() == NULL && primary_ != NULL) {
    delete primary_;
  }
  primary_ = NULL;
}
inline const ::flyteidl::core::CompiledWorkflow& CompiledWorkflowClosure::primary() const {
  const ::flyteidl::core::CompiledWorkflow* p = primary_;
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflowClosure.primary)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::CompiledWorkflow*>(
      &::flyteidl::core::_CompiledWorkflow_default_instance_);
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::release_primary() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledWorkflowClosure.primary)
  
  ::flyteidl::core::CompiledWorkflow* temp = primary_;
  primary_ = NULL;
  return temp;
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::mutable_primary() {
  
  if (primary_ == NULL) {
    primary_ = new ::flyteidl::core::CompiledWorkflow;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflowClosure.primary)
  return primary_;
}
inline void CompiledWorkflowClosure::set_allocated_primary(::flyteidl::core::CompiledWorkflow* primary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete primary_;
  }
  if (primary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledWorkflowClosure.primary)
}

// repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;
inline int CompiledWorkflowClosure::sub_workflows_size() const {
  return sub_workflows_.size();
}
inline void CompiledWorkflowClosure::clear_sub_workflows() {
  sub_workflows_.Clear();
}
inline const ::flyteidl::core::CompiledWorkflow& CompiledWorkflowClosure::sub_workflows(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return sub_workflows_.Get(index);
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::mutable_sub_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return sub_workflows_.Mutable(index);
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::add_sub_workflows() {
  // @@protoc_insertion_point(field_add:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return sub_workflows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >*
CompiledWorkflowClosure::mutable_sub_workflows() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return &sub_workflows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >&
CompiledWorkflowClosure::sub_workflows() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return sub_workflows_;
}

// repeated .flyteidl.core.CompiledTask tasks = 3;
inline int CompiledWorkflowClosure::tasks_size() const {
  return tasks_.size();
}
inline void CompiledWorkflowClosure::clear_tasks() {
  tasks_.Clear();
}
inline const ::flyteidl::core::CompiledTask& CompiledWorkflowClosure::tasks(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflowClosure.tasks)
  return tasks_.Get(index);
}
inline ::flyteidl::core::CompiledTask* CompiledWorkflowClosure::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflowClosure.tasks)
  return tasks_.Mutable(index);
}
inline ::flyteidl::core::CompiledTask* CompiledWorkflowClosure::add_tasks() {
  // @@protoc_insertion_point(field_add:flyteidl.core.CompiledWorkflowClosure.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledTask >*
CompiledWorkflowClosure::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.CompiledWorkflowClosure.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::CompiledTask >&
CompiledWorkflowClosure::tasks() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.CompiledWorkflowClosure.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fcore_2fcompiler_2eproto__INCLUDED
