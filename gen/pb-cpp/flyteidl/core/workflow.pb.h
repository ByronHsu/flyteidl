// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

#ifndef PROTOBUF_flyteidl_2fcore_2fworkflow_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fcore_2fworkflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/condition.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/types.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fcore_2fworkflow_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBranchNodeImpl();
void InitDefaultsBranchNode();
void InitDefaultsTaskNodeImpl();
void InitDefaultsTaskNode();
void InitDefaultsWorkflowNodeImpl();
void InitDefaultsWorkflowNode();
void InitDefaultsNodeMetadataImpl();
void InitDefaultsNodeMetadata();
void InitDefaultsAliasImpl();
void InitDefaultsAlias();
void InitDefaultsWorkflowMetadataImpl();
void InitDefaultsWorkflowMetadata();
void InitDefaultsWorkflowTemplateImpl();
void InitDefaultsWorkflowTemplate();
inline void InitDefaults() {
  InitDefaultsBranchNode();
  InitDefaultsTaskNode();
  InitDefaultsWorkflowNode();
  InitDefaultsNodeMetadata();
  InitDefaultsAlias();
  InitDefaultsWorkflowMetadata();
  InitDefaultsWorkflowTemplate();
}
}  // namespace protobuf_flyteidl_2fcore_2fworkflow_2eproto
namespace flyteidl {
namespace core {
class Alias;
class AliasDefaultTypeInternal;
extern AliasDefaultTypeInternal _Alias_default_instance_;
class BranchNode;
class BranchNodeDefaultTypeInternal;
extern BranchNodeDefaultTypeInternal _BranchNode_default_instance_;
class IfBlock;
class IfBlockDefaultTypeInternal;
extern IfBlockDefaultTypeInternal _IfBlock_default_instance_;
class IfElseBlock;
class IfElseBlockDefaultTypeInternal;
extern IfElseBlockDefaultTypeInternal _IfElseBlock_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeMetadata;
class NodeMetadataDefaultTypeInternal;
extern NodeMetadataDefaultTypeInternal _NodeMetadata_default_instance_;
class TaskNode;
class TaskNodeDefaultTypeInternal;
extern TaskNodeDefaultTypeInternal _TaskNode_default_instance_;
class WorkflowMetadata;
class WorkflowMetadataDefaultTypeInternal;
extern WorkflowMetadataDefaultTypeInternal _WorkflowMetadata_default_instance_;
class WorkflowNode;
class WorkflowNodeDefaultTypeInternal;
extern WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
class WorkflowTemplate;
class WorkflowTemplateDefaultTypeInternal;
extern WorkflowTemplateDefaultTypeInternal _WorkflowTemplate_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace flyteidl {
namespace core {

// ===================================================================

class IfBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.IfBlock) */ {
 public:
  IfBlock();
  virtual ~IfBlock();

  IfBlock(const IfBlock& from);

  inline IfBlock& operator=(const IfBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IfBlock(IfBlock&& from) noexcept
    : IfBlock() {
    *this = ::std::move(from);
  }

  inline IfBlock& operator=(IfBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IfBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IfBlock* internal_default_instance() {
    return reinterpret_cast<const IfBlock*>(
               &_IfBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IfBlock* other);
  friend void swap(IfBlock& a, IfBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IfBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  IfBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IfBlock& from);
  void MergeFrom(const IfBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IfBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.BooleanExpression condition = 1;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 1;
  const ::flyteidl::core::BooleanExpression& condition() const;
  ::flyteidl::core::BooleanExpression* release_condition();
  ::flyteidl::core::BooleanExpression* mutable_condition();
  void set_allocated_condition(::flyteidl::core::BooleanExpression* condition);

  // .flyteidl.core.Node then_node = 2;
  bool has_then_node() const;
  void clear_then_node();
  static const int kThenNodeFieldNumber = 2;
  const ::flyteidl::core::Node& then_node() const;
  ::flyteidl::core::Node* release_then_node();
  ::flyteidl::core::Node* mutable_then_node();
  void set_allocated_then_node(::flyteidl::core::Node* then_node);

  // @@protoc_insertion_point(class_scope:flyteidl.core.IfBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::BooleanExpression* condition_;
  ::flyteidl::core::Node* then_node_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNodeImpl();
};
// -------------------------------------------------------------------

class IfElseBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.IfElseBlock) */ {
 public:
  IfElseBlock();
  virtual ~IfElseBlock();

  IfElseBlock(const IfElseBlock& from);

  inline IfElseBlock& operator=(const IfElseBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IfElseBlock(IfElseBlock&& from) noexcept
    : IfElseBlock() {
    *this = ::std::move(from);
  }

  inline IfElseBlock& operator=(IfElseBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IfElseBlock& default_instance();

  enum DefaultCase {
    kElseNode = 3,
    kError = 4,
    DEFAULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IfElseBlock* internal_default_instance() {
    return reinterpret_cast<const IfElseBlock*>(
               &_IfElseBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IfElseBlock* other);
  friend void swap(IfElseBlock& a, IfElseBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IfElseBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  IfElseBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IfElseBlock& from);
  void MergeFrom(const IfElseBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IfElseBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.IfBlock other = 2;
  int other_size() const;
  void clear_other();
  static const int kOtherFieldNumber = 2;
  const ::flyteidl::core::IfBlock& other(int index) const;
  ::flyteidl::core::IfBlock* mutable_other(int index);
  ::flyteidl::core::IfBlock* add_other();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >*
      mutable_other();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >&
      other() const;

  // .flyteidl.core.IfBlock case = 1;
  bool has_case_() const;
  void clear_case_();
  static const int kCaseFieldNumber = 1;
  const ::flyteidl::core::IfBlock& case_() const;
  ::flyteidl::core::IfBlock* release_case_();
  ::flyteidl::core::IfBlock* mutable_case_();
  void set_allocated_case_(::flyteidl::core::IfBlock* case_);

  // .flyteidl.core.Node else_node = 3;
  bool has_else_node() const;
  void clear_else_node();
  static const int kElseNodeFieldNumber = 3;
  const ::flyteidl::core::Node& else_node() const;
  ::flyteidl::core::Node* release_else_node();
  ::flyteidl::core::Node* mutable_else_node();
  void set_allocated_else_node(::flyteidl::core::Node* else_node);

  // .flyteidl.core.Error error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::flyteidl::core::Error& error() const;
  ::flyteidl::core::Error* release_error();
  ::flyteidl::core::Error* mutable_error();
  void set_allocated_error(::flyteidl::core::Error* error);

  DefaultCase default_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.IfElseBlock)
 private:
  void set_has_else_node();
  void set_has_error();

  inline bool has_default() const;
  void clear_default();
  inline void clear_has_default();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock > other_;
  ::flyteidl::core::IfBlock* case__;
  union DefaultUnion {
    DefaultUnion() {}
    ::flyteidl::core::Node* else_node_;
    ::flyteidl::core::Error* error_;
  } default_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNodeImpl();
};
// -------------------------------------------------------------------

class BranchNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.BranchNode) */ {
 public:
  BranchNode();
  virtual ~BranchNode();

  BranchNode(const BranchNode& from);

  inline BranchNode& operator=(const BranchNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BranchNode(BranchNode&& from) noexcept
    : BranchNode() {
    *this = ::std::move(from);
  }

  inline BranchNode& operator=(BranchNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BranchNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BranchNode* internal_default_instance() {
    return reinterpret_cast<const BranchNode*>(
               &_BranchNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BranchNode* other);
  friend void swap(BranchNode& a, BranchNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BranchNode* New() const PROTOBUF_FINAL { return New(NULL); }

  BranchNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BranchNode& from);
  void MergeFrom(const BranchNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BranchNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.IfElseBlock if_else = 1;
  bool has_if_else() const;
  void clear_if_else();
  static const int kIfElseFieldNumber = 1;
  const ::flyteidl::core::IfElseBlock& if_else() const;
  ::flyteidl::core::IfElseBlock* release_if_else();
  ::flyteidl::core::IfElseBlock* mutable_if_else();
  void set_allocated_if_else(::flyteidl::core::IfElseBlock* if_else);

  // @@protoc_insertion_point(class_scope:flyteidl.core.BranchNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::IfElseBlock* if_else_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNodeImpl();
};
// -------------------------------------------------------------------

class TaskNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskNode) */ {
 public:
  TaskNode();
  virtual ~TaskNode();

  TaskNode(const TaskNode& from);

  inline TaskNode& operator=(const TaskNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskNode(TaskNode&& from) noexcept
    : TaskNode() {
    *this = ::std::move(from);
  }

  inline TaskNode& operator=(TaskNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskNode& default_instance();

  enum ReferenceCase {
    kReferenceId = 1,
    REFERENCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNode* internal_default_instance() {
    return reinterpret_cast<const TaskNode*>(
               &_TaskNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TaskNode* other);
  friend void swap(TaskNode& a, TaskNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskNode* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskNode& from);
  void MergeFrom(const TaskNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier reference_id = 1;
  bool has_reference_id() const;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& reference_id() const;
  ::flyteidl::core::Identifier* release_reference_id();
  ::flyteidl::core::Identifier* mutable_reference_id();
  void set_allocated_reference_id(::flyteidl::core::Identifier* reference_id);

  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNode)
 private:
  void set_has_reference_id();

  inline bool has_reference() const;
  void clear_reference();
  inline void clear_has_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ReferenceUnion {
    ReferenceUnion() {}
    ::flyteidl::core::Identifier* reference_id_;
  } reference_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsTaskNodeImpl();
};
// -------------------------------------------------------------------

class WorkflowNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowNode) */ {
 public:
  WorkflowNode();
  virtual ~WorkflowNode();

  WorkflowNode(const WorkflowNode& from);

  inline WorkflowNode& operator=(const WorkflowNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowNode(WorkflowNode&& from) noexcept
    : WorkflowNode() {
    *this = ::std::move(from);
  }

  inline WorkflowNode& operator=(WorkflowNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowNode& default_instance();

  enum ReferenceCase {
    kLaunchplanRef = 1,
    kSubWorkflowRef = 2,
    REFERENCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNode* internal_default_instance() {
    return reinterpret_cast<const WorkflowNode*>(
               &_WorkflowNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WorkflowNode* other);
  friend void swap(WorkflowNode& a, WorkflowNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNode* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowNode& from);
  void MergeFrom(const WorkflowNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier launchplan_ref = 1;
  bool has_launchplan_ref() const;
  void clear_launchplan_ref();
  static const int kLaunchplanRefFieldNumber = 1;
  const ::flyteidl::core::Identifier& launchplan_ref() const;
  ::flyteidl::core::Identifier* release_launchplan_ref();
  ::flyteidl::core::Identifier* mutable_launchplan_ref();
  void set_allocated_launchplan_ref(::flyteidl::core::Identifier* launchplan_ref);

  // .flyteidl.core.Identifier sub_workflow_ref = 2;
  bool has_sub_workflow_ref() const;
  void clear_sub_workflow_ref();
  static const int kSubWorkflowRefFieldNumber = 2;
  const ::flyteidl::core::Identifier& sub_workflow_ref() const;
  ::flyteidl::core::Identifier* release_sub_workflow_ref();
  ::flyteidl::core::Identifier* mutable_sub_workflow_ref();
  void set_allocated_sub_workflow_ref(::flyteidl::core::Identifier* sub_workflow_ref);

  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowNode)
 private:
  void set_has_launchplan_ref();
  void set_has_sub_workflow_ref();

  inline bool has_reference() const;
  void clear_reference();
  inline void clear_has_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ReferenceUnion {
    ReferenceUnion() {}
    ::flyteidl::core::Identifier* launchplan_ref_;
    ::flyteidl::core::Identifier* sub_workflow_ref_;
  } reference_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowNodeImpl();
};
// -------------------------------------------------------------------

class NodeMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.NodeMetadata) */ {
 public:
  NodeMetadata();
  virtual ~NodeMetadata();

  NodeMetadata(const NodeMetadata& from);

  inline NodeMetadata& operator=(const NodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeMetadata(NodeMetadata&& from) noexcept
    : NodeMetadata() {
    *this = ::std::move(from);
  }

  inline NodeMetadata& operator=(NodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeMetadata* internal_default_instance() {
    return reinterpret_cast<const NodeMetadata*>(
               &_NodeMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NodeMetadata* other);
  friend void swap(NodeMetadata& a, NodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeMetadata& from);
  void MergeFrom(const NodeMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Duration timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .flyteidl.core.RetryStrategy retries = 5;
  bool has_retries() const;
  void clear_retries();
  static const int kRetriesFieldNumber = 5;
  const ::flyteidl::core::RetryStrategy& retries() const;
  ::flyteidl::core::RetryStrategy* release_retries();
  ::flyteidl::core::RetryStrategy* mutable_retries();
  void set_allocated_retries(::flyteidl::core::RetryStrategy* retries);

  // @@protoc_insertion_point(class_scope:flyteidl.core.NodeMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Duration* timeout_;
  ::flyteidl::core::RetryStrategy* retries_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsNodeMetadataImpl();
};
// -------------------------------------------------------------------

class Alias : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Alias) */ {
 public:
  Alias();
  virtual ~Alias();

  Alias(const Alias& from);

  inline Alias& operator=(const Alias& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Alias(Alias&& from) noexcept
    : Alias() {
    *this = ::std::move(from);
  }

  inline Alias& operator=(Alias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Alias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alias* internal_default_instance() {
    return reinterpret_cast<const Alias*>(
               &_Alias_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Alias* other);
  friend void swap(Alias& a, Alias& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Alias* New() const PROTOBUF_FINAL { return New(NULL); }

  Alias* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Alias& from);
  void MergeFrom(const Alias& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Alias* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string var = 1;
  void clear_var();
  static const int kVarFieldNumber = 1;
  const ::std::string& var() const;
  void set_var(const ::std::string& value);
  #if LANG_CXX11
  void set_var(::std::string&& value);
  #endif
  void set_var(const char* value);
  void set_var(const char* value, size_t size);
  ::std::string* mutable_var();
  ::std::string* release_var();
  void set_allocated_var(::std::string* var);

  // string alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Alias)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr var_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsAliasImpl();
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  enum TargetCase {
    kTaskNode = 6,
    kWorkflowNode = 7,
    kBranchNode = 8,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Binding inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  const ::flyteidl::core::Binding& inputs(int index) const;
  ::flyteidl::core::Binding* mutable_inputs(int index);
  ::flyteidl::core::Binding* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
      inputs() const;

  // repeated string upstream_node_ids = 4;
  int upstream_node_ids_size() const;
  void clear_upstream_node_ids();
  static const int kUpstreamNodeIdsFieldNumber = 4;
  const ::std::string& upstream_node_ids(int index) const;
  ::std::string* mutable_upstream_node_ids(int index);
  void set_upstream_node_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_upstream_node_ids(int index, ::std::string&& value);
  #endif
  void set_upstream_node_ids(int index, const char* value);
  void set_upstream_node_ids(int index, const char* value, size_t size);
  ::std::string* add_upstream_node_ids();
  void add_upstream_node_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_upstream_node_ids(::std::string&& value);
  #endif
  void add_upstream_node_ids(const char* value);
  void add_upstream_node_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& upstream_node_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_upstream_node_ids();

  // repeated .flyteidl.core.Alias output_aliases = 5;
  int output_aliases_size() const;
  void clear_output_aliases();
  static const int kOutputAliasesFieldNumber = 5;
  const ::flyteidl::core::Alias& output_aliases(int index) const;
  ::flyteidl::core::Alias* mutable_output_aliases(int index);
  ::flyteidl::core::Alias* add_output_aliases();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >*
      mutable_output_aliases();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >&
      output_aliases() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .flyteidl.core.NodeMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::flyteidl::core::NodeMetadata& metadata() const;
  ::flyteidl::core::NodeMetadata* release_metadata();
  ::flyteidl::core::NodeMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::core::NodeMetadata* metadata);

  // .flyteidl.core.TaskNode task_node = 6;
  bool has_task_node() const;
  void clear_task_node();
  static const int kTaskNodeFieldNumber = 6;
  const ::flyteidl::core::TaskNode& task_node() const;
  ::flyteidl::core::TaskNode* release_task_node();
  ::flyteidl::core::TaskNode* mutable_task_node();
  void set_allocated_task_node(::flyteidl::core::TaskNode* task_node);

  // .flyteidl.core.WorkflowNode workflow_node = 7;
  bool has_workflow_node() const;
  void clear_workflow_node();
  static const int kWorkflowNodeFieldNumber = 7;
  const ::flyteidl::core::WorkflowNode& workflow_node() const;
  ::flyteidl::core::WorkflowNode* release_workflow_node();
  ::flyteidl::core::WorkflowNode* mutable_workflow_node();
  void set_allocated_workflow_node(::flyteidl::core::WorkflowNode* workflow_node);

  // .flyteidl.core.BranchNode branch_node = 8;
  bool has_branch_node() const;
  void clear_branch_node();
  static const int kBranchNodeFieldNumber = 8;
  const ::flyteidl::core::BranchNode& branch_node() const;
  ::flyteidl::core::BranchNode* release_branch_node();
  ::flyteidl::core::BranchNode* mutable_branch_node();
  void set_allocated_branch_node(::flyteidl::core::BranchNode* branch_node);

  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Node)
 private:
  void set_has_task_node();
  void set_has_workflow_node();
  void set_has_branch_node();

  inline bool has_target() const;
  void clear_target();
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding > inputs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> upstream_node_ids_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias > output_aliases_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::flyteidl::core::NodeMetadata* metadata_;
  union TargetUnion {
    TargetUnion() {}
    ::flyteidl::core::TaskNode* task_node_;
    ::flyteidl::core::WorkflowNode* workflow_node_;
    ::flyteidl::core::BranchNode* branch_node_;
  } target_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsBranchNodeImpl();
};
// -------------------------------------------------------------------

class WorkflowMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowMetadata) */ {
 public:
  WorkflowMetadata();
  virtual ~WorkflowMetadata();

  WorkflowMetadata(const WorkflowMetadata& from);

  inline WorkflowMetadata& operator=(const WorkflowMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowMetadata(WorkflowMetadata&& from) noexcept
    : WorkflowMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowMetadata& operator=(WorkflowMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowMetadata*>(
               &_WorkflowMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WorkflowMetadata* other);
  friend void swap(WorkflowMetadata& a, WorkflowMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowMetadata& from);
  void MergeFrom(const WorkflowMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowMetadataImpl();
};
// -------------------------------------------------------------------

class WorkflowTemplate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowTemplate) */ {
 public:
  WorkflowTemplate();
  virtual ~WorkflowTemplate();

  WorkflowTemplate(const WorkflowTemplate& from);

  inline WorkflowTemplate& operator=(const WorkflowTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowTemplate(WorkflowTemplate&& from) noexcept
    : WorkflowTemplate() {
    *this = ::std::move(from);
  }

  inline WorkflowTemplate& operator=(WorkflowTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowTemplate* internal_default_instance() {
    return reinterpret_cast<const WorkflowTemplate*>(
               &_WorkflowTemplate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(WorkflowTemplate* other);
  friend void swap(WorkflowTemplate& a, WorkflowTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowTemplate* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowTemplate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowTemplate& from);
  void MergeFrom(const WorkflowTemplate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Node nodes = 4;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 4;
  const ::flyteidl::core::Node& nodes(int index) const;
  ::flyteidl::core::Node* mutable_nodes(int index);
  ::flyteidl::core::Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >&
      nodes() const;

  // repeated .flyteidl.core.Binding outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  const ::flyteidl::core::Binding& outputs(int index) const;
  ::flyteidl::core::Binding* mutable_outputs(int index);
  ::flyteidl::core::Binding* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
      outputs() const;

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::flyteidl::core::WorkflowMetadata& metadata() const;
  ::flyteidl::core::WorkflowMetadata* release_metadata();
  ::flyteidl::core::WorkflowMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::core::WorkflowMetadata* metadata);

  // .flyteidl.core.TypedInterface interface = 3;
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 3;
  const ::flyteidl::core::TypedInterface& interface() const;
  ::flyteidl::core::TypedInterface* release_interface();
  ::flyteidl::core::TypedInterface* mutable_interface();
  void set_allocated_interface(::flyteidl::core::TypedInterface* interface);

  // .flyteidl.core.Node failure_node = 6;
  bool has_failure_node() const;
  void clear_failure_node();
  static const int kFailureNodeFieldNumber = 6;
  const ::flyteidl::core::Node& failure_node() const;
  ::flyteidl::core::Node* release_failure_node();
  ::flyteidl::core::Node* mutable_failure_node();
  void set_allocated_failure_node(::flyteidl::core::Node* failure_node);

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowTemplate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node > nodes_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding > outputs_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::core::WorkflowMetadata* metadata_;
  ::flyteidl::core::TypedInterface* interface_;
  ::flyteidl::core::Node* failure_node_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fcore_2fworkflow_2eproto::InitDefaultsWorkflowTemplateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IfBlock

// .flyteidl.core.BooleanExpression condition = 1;
inline bool IfBlock::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
inline const ::flyteidl::core::BooleanExpression& IfBlock::condition() const {
  const ::flyteidl::core::BooleanExpression* p = condition_;
  // @@protoc_insertion_point(field_get:flyteidl.core.IfBlock.condition)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::BooleanExpression*>(
      &::flyteidl::core::_BooleanExpression_default_instance_);
}
inline ::flyteidl::core::BooleanExpression* IfBlock::release_condition() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfBlock.condition)
  
  ::flyteidl::core::BooleanExpression* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline ::flyteidl::core::BooleanExpression* IfBlock::mutable_condition() {
  
  if (condition_ == NULL) {
    condition_ = new ::flyteidl::core::BooleanExpression;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfBlock.condition)
  return condition_;
}
inline void IfBlock::set_allocated_condition(::flyteidl::core::BooleanExpression* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(condition_);
  }
  if (condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfBlock.condition)
}

// .flyteidl.core.Node then_node = 2;
inline bool IfBlock::has_then_node() const {
  return this != internal_default_instance() && then_node_ != NULL;
}
inline void IfBlock::clear_then_node() {
  if (GetArenaNoVirtual() == NULL && then_node_ != NULL) {
    delete then_node_;
  }
  then_node_ = NULL;
}
inline const ::flyteidl::core::Node& IfBlock::then_node() const {
  const ::flyteidl::core::Node* p = then_node_;
  // @@protoc_insertion_point(field_get:flyteidl.core.IfBlock.then_node)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Node*>(
      &::flyteidl::core::_Node_default_instance_);
}
inline ::flyteidl::core::Node* IfBlock::release_then_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfBlock.then_node)
  
  ::flyteidl::core::Node* temp = then_node_;
  then_node_ = NULL;
  return temp;
}
inline ::flyteidl::core::Node* IfBlock::mutable_then_node() {
  
  if (then_node_ == NULL) {
    then_node_ = new ::flyteidl::core::Node;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfBlock.then_node)
  return then_node_;
}
inline void IfBlock::set_allocated_then_node(::flyteidl::core::Node* then_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete then_node_;
  }
  if (then_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      then_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, then_node, submessage_arena);
    }
    
  } else {
    
  }
  then_node_ = then_node;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfBlock.then_node)
}

// -------------------------------------------------------------------

// IfElseBlock

// .flyteidl.core.IfBlock case = 1;
inline bool IfElseBlock::has_case_() const {
  return this != internal_default_instance() && case__ != NULL;
}
inline void IfElseBlock::clear_case_() {
  if (GetArenaNoVirtual() == NULL && case__ != NULL) {
    delete case__;
  }
  case__ = NULL;
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::case_() const {
  const ::flyteidl::core::IfBlock* p = case__;
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.case)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::IfBlock*>(
      &::flyteidl::core::_IfBlock_default_instance_);
}
inline ::flyteidl::core::IfBlock* IfElseBlock::release_case_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.case)
  
  ::flyteidl::core::IfBlock* temp = case__;
  case__ = NULL;
  return temp;
}
inline ::flyteidl::core::IfBlock* IfElseBlock::mutable_case_() {
  
  if (case__ == NULL) {
    case__ = new ::flyteidl::core::IfBlock;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.case)
  return case__;
}
inline void IfElseBlock::set_allocated_case_(::flyteidl::core::IfBlock* case_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete case__;
  }
  if (case_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      case_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, case_, submessage_arena);
    }
    
  } else {
    
  }
  case__ = case_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.case)
}

// repeated .flyteidl.core.IfBlock other = 2;
inline int IfElseBlock::other_size() const {
  return other_.size();
}
inline void IfElseBlock::clear_other() {
  other_.Clear();
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::other(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.other)
  return other_.Get(index);
}
inline ::flyteidl::core::IfBlock* IfElseBlock::mutable_other(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.other)
  return other_.Mutable(index);
}
inline ::flyteidl::core::IfBlock* IfElseBlock::add_other() {
  // @@protoc_insertion_point(field_add:flyteidl.core.IfElseBlock.other)
  return other_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >*
IfElseBlock::mutable_other() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.IfElseBlock.other)
  return &other_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >&
IfElseBlock::other() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.IfElseBlock.other)
  return other_;
}

// .flyteidl.core.Node else_node = 3;
inline bool IfElseBlock::has_else_node() const {
  return default_case() == kElseNode;
}
inline void IfElseBlock::set_has_else_node() {
  _oneof_case_[0] = kElseNode;
}
inline void IfElseBlock::clear_else_node() {
  if (has_else_node()) {
    delete default_.else_node_;
    clear_has_default();
  }
}
inline ::flyteidl::core::Node* IfElseBlock::release_else_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.else_node)
  if (has_else_node()) {
    clear_has_default();
      ::flyteidl::core::Node* temp = default_.else_node_;
    default_.else_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::Node& IfElseBlock::else_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.else_node)
  return has_else_node()
      ? *default_.else_node_
      : *reinterpret_cast< ::flyteidl::core::Node*>(&::flyteidl::core::_Node_default_instance_);
}
inline ::flyteidl::core::Node* IfElseBlock::mutable_else_node() {
  if (!has_else_node()) {
    clear_default();
    set_has_else_node();
    default_.else_node_ = new ::flyteidl::core::Node;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.else_node)
  return default_.else_node_;
}

// .flyteidl.core.Error error = 4;
inline bool IfElseBlock::has_error() const {
  return default_case() == kError;
}
inline void IfElseBlock::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::Error* IfElseBlock::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.error)
  if (has_error()) {
    clear_has_default();
      ::flyteidl::core::Error* temp = default_.error_;
    default_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::Error& IfElseBlock::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.error)
  return has_error()
      ? *default_.error_
      : *reinterpret_cast< ::flyteidl::core::Error*>(&::flyteidl::core::_Error_default_instance_);
}
inline ::flyteidl::core::Error* IfElseBlock::mutable_error() {
  if (!has_error()) {
    clear_default();
    set_has_error();
    default_.error_ = new ::flyteidl::core::Error;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.error)
  return default_.error_;
}

inline bool IfElseBlock::has_default() const {
  return default_case() != DEFAULT_NOT_SET;
}
inline void IfElseBlock::clear_has_default() {
  _oneof_case_[0] = DEFAULT_NOT_SET;
}
inline IfElseBlock::DefaultCase IfElseBlock::default_case() const {
  return IfElseBlock::DefaultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BranchNode

// .flyteidl.core.IfElseBlock if_else = 1;
inline bool BranchNode::has_if_else() const {
  return this != internal_default_instance() && if_else_ != NULL;
}
inline void BranchNode::clear_if_else() {
  if (GetArenaNoVirtual() == NULL && if_else_ != NULL) {
    delete if_else_;
  }
  if_else_ = NULL;
}
inline const ::flyteidl::core::IfElseBlock& BranchNode::if_else() const {
  const ::flyteidl::core::IfElseBlock* p = if_else_;
  // @@protoc_insertion_point(field_get:flyteidl.core.BranchNode.if_else)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::IfElseBlock*>(
      &::flyteidl::core::_IfElseBlock_default_instance_);
}
inline ::flyteidl::core::IfElseBlock* BranchNode::release_if_else() {
  // @@protoc_insertion_point(field_release:flyteidl.core.BranchNode.if_else)
  
  ::flyteidl::core::IfElseBlock* temp = if_else_;
  if_else_ = NULL;
  return temp;
}
inline ::flyteidl::core::IfElseBlock* BranchNode::mutable_if_else() {
  
  if (if_else_ == NULL) {
    if_else_ = new ::flyteidl::core::IfElseBlock;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.BranchNode.if_else)
  return if_else_;
}
inline void BranchNode::set_allocated_if_else(::flyteidl::core::IfElseBlock* if_else) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete if_else_;
  }
  if (if_else) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      if_else = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, if_else, submessage_arena);
    }
    
  } else {
    
  }
  if_else_ = if_else;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BranchNode.if_else)
}

// -------------------------------------------------------------------

// TaskNode

// .flyteidl.core.Identifier reference_id = 1;
inline bool TaskNode::has_reference_id() const {
  return reference_case() == kReferenceId;
}
inline void TaskNode::set_has_reference_id() {
  _oneof_case_[0] = kReferenceId;
}
inline ::flyteidl::core::Identifier* TaskNode::release_reference_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNode.reference_id)
  if (has_reference_id()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.reference_id_;
    reference_.reference_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::Identifier& TaskNode::reference_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNode.reference_id)
  return has_reference_id()
      ? *reference_.reference_id_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* TaskNode::mutable_reference_id() {
  if (!has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNode.reference_id)
  return reference_.reference_id_;
}

inline bool TaskNode::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void TaskNode::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline TaskNode::ReferenceCase TaskNode::reference_case() const {
  return TaskNode::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkflowNode

// .flyteidl.core.Identifier launchplan_ref = 1;
inline bool WorkflowNode::has_launchplan_ref() const {
  return reference_case() == kLaunchplanRef;
}
inline void WorkflowNode::set_has_launchplan_ref() {
  _oneof_case_[0] = kLaunchplanRef;
}
inline ::flyteidl::core::Identifier* WorkflowNode::release_launchplan_ref() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowNode.launchplan_ref)
  if (has_launchplan_ref()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.launchplan_ref_;
    reference_.launchplan_ref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowNode::launchplan_ref() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowNode.launchplan_ref)
  return has_launchplan_ref()
      ? *reference_.launchplan_ref_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowNode::mutable_launchplan_ref() {
  if (!has_launchplan_ref()) {
    clear_reference();
    set_has_launchplan_ref();
    reference_.launchplan_ref_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowNode.launchplan_ref)
  return reference_.launchplan_ref_;
}

// .flyteidl.core.Identifier sub_workflow_ref = 2;
inline bool WorkflowNode::has_sub_workflow_ref() const {
  return reference_case() == kSubWorkflowRef;
}
inline void WorkflowNode::set_has_sub_workflow_ref() {
  _oneof_case_[0] = kSubWorkflowRef;
}
inline ::flyteidl::core::Identifier* WorkflowNode::release_sub_workflow_ref() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowNode.sub_workflow_ref)
  if (has_sub_workflow_ref()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.sub_workflow_ref_;
    reference_.sub_workflow_ref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowNode::sub_workflow_ref() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowNode.sub_workflow_ref)
  return has_sub_workflow_ref()
      ? *reference_.sub_workflow_ref_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowNode::mutable_sub_workflow_ref() {
  if (!has_sub_workflow_ref()) {
    clear_reference();
    set_has_sub_workflow_ref();
    reference_.sub_workflow_ref_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowNode.sub_workflow_ref)
  return reference_.sub_workflow_ref_;
}

inline bool WorkflowNode::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void WorkflowNode::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline WorkflowNode::ReferenceCase WorkflowNode::reference_case() const {
  return WorkflowNode::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeMetadata

// string name = 1;
inline void NodeMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMetadata::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.name)
  return name_.GetNoArena();
}
inline void NodeMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.NodeMetadata.name)
}
#if LANG_CXX11
inline void NodeMetadata::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.NodeMetadata.name)
}
#endif
inline void NodeMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.NodeMetadata.name)
}
inline void NodeMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.NodeMetadata.name)
}
inline ::std::string* NodeMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.name)
}

// .google.protobuf.Duration timeout = 4;
inline bool NodeMetadata::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& NodeMetadata::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NodeMetadata::release_timeout() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* NodeMetadata::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.timeout)
  return timeout_;
}
inline void NodeMetadata::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.timeout)
}

// .flyteidl.core.RetryStrategy retries = 5;
inline bool NodeMetadata::has_retries() const {
  return this != internal_default_instance() && retries_ != NULL;
}
inline const ::flyteidl::core::RetryStrategy& NodeMetadata::retries() const {
  const ::flyteidl::core::RetryStrategy* p = retries_;
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.retries)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::RetryStrategy*>(
      &::flyteidl::core::_RetryStrategy_default_instance_);
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::release_retries() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.retries)
  
  ::flyteidl::core::RetryStrategy* temp = retries_;
  retries_ = NULL;
  return temp;
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::mutable_retries() {
  
  if (retries_ == NULL) {
    retries_ = new ::flyteidl::core::RetryStrategy;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.retries)
  return retries_;
}
inline void NodeMetadata::set_allocated_retries(::flyteidl::core::RetryStrategy* retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(retries_);
  }
  if (retries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, retries, submessage_arena);
    }
    
  } else {
    
  }
  retries_ = retries;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.retries)
}

// -------------------------------------------------------------------

// Alias

// string var = 1;
inline void Alias::clear_var() {
  var_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alias::var() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Alias.var)
  return var_.GetNoArena();
}
inline void Alias::set_var(const ::std::string& value) {
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Alias.var)
}
#if LANG_CXX11
inline void Alias::set_var(::std::string&& value) {
  
  var_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Alias.var)
}
#endif
inline void Alias::set_var(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Alias.var)
}
inline void Alias::set_var(const char* value, size_t size) {
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Alias.var)
}
inline ::std::string* Alias::mutable_var() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Alias.var)
  return var_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alias::release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Alias.var)
  
  return var_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alias::set_allocated_var(::std::string* var) {
  if (var != NULL) {
    
  } else {
    
  }
  var_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Alias.var)
}

// string alias = 2;
inline void Alias::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alias::alias() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Alias.alias)
  return alias_.GetNoArena();
}
inline void Alias::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Alias.alias)
}
#if LANG_CXX11
inline void Alias::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Alias.alias)
}
#endif
inline void Alias::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Alias.alias)
}
inline void Alias::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Alias.alias)
}
inline ::std::string* Alias::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Alias.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alias::release_alias() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Alias.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alias::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Alias.alias)
}

// -------------------------------------------------------------------

// Node

// string id = 1;
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.id)
  return id_.GetNoArena();
}
inline void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.id)
}
#if LANG_CXX11
inline void Node::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Node.id)
}
#endif
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Node.id)
}
inline ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.id)
}

// .flyteidl.core.NodeMetadata metadata = 2;
inline bool Node::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Node::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
inline const ::flyteidl::core::NodeMetadata& Node::metadata() const {
  const ::flyteidl::core::NodeMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::NodeMetadata*>(
      &::flyteidl::core::_NodeMetadata_default_instance_);
}
inline ::flyteidl::core::NodeMetadata* Node::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.metadata)
  
  ::flyteidl::core::NodeMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::flyteidl::core::NodeMetadata* Node::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::flyteidl::core::NodeMetadata;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.metadata)
  return metadata_;
}
inline void Node::set_allocated_metadata(::flyteidl::core::NodeMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.metadata)
}

// repeated .flyteidl.core.Binding inputs = 3;
inline int Node::inputs_size() const {
  return inputs_.size();
}
inline const ::flyteidl::core::Binding& Node::inputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.inputs)
  return inputs_.Get(index);
}
inline ::flyteidl::core::Binding* Node::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.inputs)
  return inputs_.Mutable(index);
}
inline ::flyteidl::core::Binding* Node::add_inputs() {
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
Node::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
Node::inputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.inputs)
  return inputs_;
}

// repeated string upstream_node_ids = 4;
inline int Node::upstream_node_ids_size() const {
  return upstream_node_ids_.size();
}
inline void Node::clear_upstream_node_ids() {
  upstream_node_ids_.Clear();
}
inline const ::std::string& Node::upstream_node_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Get(index);
}
inline ::std::string* Node::mutable_upstream_node_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Mutable(index);
}
inline void Node::set_upstream_node_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.upstream_node_ids)
  upstream_node_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Node::set_upstream_node_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.upstream_node_ids)
  upstream_node_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Node::set_upstream_node_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  upstream_node_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::set_upstream_node_ids(int index, const char* value, size_t size) {
  upstream_node_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Node.upstream_node_ids)
}
inline ::std::string* Node::add_upstream_node_ids() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Add();
}
inline void Node::add_upstream_node_ids(const ::std::string& value) {
  upstream_node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.upstream_node_ids)
}
#if LANG_CXX11
inline void Node::add_upstream_node_ids(::std::string&& value) {
  upstream_node_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.upstream_node_ids)
}
#endif
inline void Node::add_upstream_node_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  upstream_node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::add_upstream_node_ids(const char* value, size_t size) {
  upstream_node_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.core.Node.upstream_node_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Node::upstream_node_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Node::mutable_upstream_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.upstream_node_ids)
  return &upstream_node_ids_;
}

// repeated .flyteidl.core.Alias output_aliases = 5;
inline int Node::output_aliases_size() const {
  return output_aliases_.size();
}
inline void Node::clear_output_aliases() {
  output_aliases_.Clear();
}
inline const ::flyteidl::core::Alias& Node::output_aliases(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.output_aliases)
  return output_aliases_.Get(index);
}
inline ::flyteidl::core::Alias* Node::mutable_output_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.output_aliases)
  return output_aliases_.Mutable(index);
}
inline ::flyteidl::core::Alias* Node::add_output_aliases() {
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.output_aliases)
  return output_aliases_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >*
Node::mutable_output_aliases() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.output_aliases)
  return &output_aliases_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >&
Node::output_aliases() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.output_aliases)
  return output_aliases_;
}

// .flyteidl.core.TaskNode task_node = 6;
inline bool Node::has_task_node() const {
  return target_case() == kTaskNode;
}
inline void Node::set_has_task_node() {
  _oneof_case_[0] = kTaskNode;
}
inline void Node::clear_task_node() {
  if (has_task_node()) {
    delete target_.task_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::TaskNode* Node::release_task_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.task_node)
  if (has_task_node()) {
    clear_has_target();
      ::flyteidl::core::TaskNode* temp = target_.task_node_;
    target_.task_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::TaskNode& Node::task_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.task_node)
  return has_task_node()
      ? *target_.task_node_
      : *reinterpret_cast< ::flyteidl::core::TaskNode*>(&::flyteidl::core::_TaskNode_default_instance_);
}
inline ::flyteidl::core::TaskNode* Node::mutable_task_node() {
  if (!has_task_node()) {
    clear_target();
    set_has_task_node();
    target_.task_node_ = new ::flyteidl::core::TaskNode;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.task_node)
  return target_.task_node_;
}

// .flyteidl.core.WorkflowNode workflow_node = 7;
inline bool Node::has_workflow_node() const {
  return target_case() == kWorkflowNode;
}
inline void Node::set_has_workflow_node() {
  _oneof_case_[0] = kWorkflowNode;
}
inline void Node::clear_workflow_node() {
  if (has_workflow_node()) {
    delete target_.workflow_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::WorkflowNode* Node::release_workflow_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.workflow_node)
  if (has_workflow_node()) {
    clear_has_target();
      ::flyteidl::core::WorkflowNode* temp = target_.workflow_node_;
    target_.workflow_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::WorkflowNode& Node::workflow_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.workflow_node)
  return has_workflow_node()
      ? *target_.workflow_node_
      : *reinterpret_cast< ::flyteidl::core::WorkflowNode*>(&::flyteidl::core::_WorkflowNode_default_instance_);
}
inline ::flyteidl::core::WorkflowNode* Node::mutable_workflow_node() {
  if (!has_workflow_node()) {
    clear_target();
    set_has_workflow_node();
    target_.workflow_node_ = new ::flyteidl::core::WorkflowNode;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.workflow_node)
  return target_.workflow_node_;
}

// .flyteidl.core.BranchNode branch_node = 8;
inline bool Node::has_branch_node() const {
  return target_case() == kBranchNode;
}
inline void Node::set_has_branch_node() {
  _oneof_case_[0] = kBranchNode;
}
inline void Node::clear_branch_node() {
  if (has_branch_node()) {
    delete target_.branch_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::BranchNode* Node::release_branch_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.branch_node)
  if (has_branch_node()) {
    clear_has_target();
      ::flyteidl::core::BranchNode* temp = target_.branch_node_;
    target_.branch_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::BranchNode& Node::branch_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.branch_node)
  return has_branch_node()
      ? *target_.branch_node_
      : *reinterpret_cast< ::flyteidl::core::BranchNode*>(&::flyteidl::core::_BranchNode_default_instance_);
}
inline ::flyteidl::core::BranchNode* Node::mutable_branch_node() {
  if (!has_branch_node()) {
    clear_target();
    set_has_branch_node();
    target_.branch_node_ = new ::flyteidl::core::BranchNode;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.branch_node)
  return target_.branch_node_;
}

inline bool Node::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void Node::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline Node::TargetCase Node::target_case() const {
  return Node::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkflowMetadata

// -------------------------------------------------------------------

// WorkflowTemplate

// .flyteidl.core.Identifier id = 1;
inline bool WorkflowTemplate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::Identifier& WorkflowTemplate::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.id)
  return id_;
}
inline void WorkflowTemplate::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.id)
}

// .flyteidl.core.WorkflowMetadata metadata = 2;
inline bool WorkflowTemplate::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void WorkflowTemplate::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
inline const ::flyteidl::core::WorkflowMetadata& WorkflowTemplate::metadata() const {
  const ::flyteidl::core::WorkflowMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowMetadata*>(
      &::flyteidl::core::_WorkflowMetadata_default_instance_);
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.metadata)
  
  ::flyteidl::core::WorkflowMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::flyteidl::core::WorkflowMetadata;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.metadata)
  return metadata_;
}
inline void WorkflowTemplate::set_allocated_metadata(::flyteidl::core::WorkflowMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.metadata)
}

// .flyteidl.core.TypedInterface interface = 3;
inline bool WorkflowTemplate::has_interface() const {
  return this != internal_default_instance() && interface_ != NULL;
}
inline const ::flyteidl::core::TypedInterface& WorkflowTemplate::interface() const {
  const ::flyteidl::core::TypedInterface* p = interface_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.interface)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::TypedInterface*>(
      &::flyteidl::core::_TypedInterface_default_instance_);
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::release_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.interface)
  
  ::flyteidl::core::TypedInterface* temp = interface_;
  interface_ = NULL;
  return temp;
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::mutable_interface() {
  
  if (interface_ == NULL) {
    interface_ = new ::flyteidl::core::TypedInterface;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.interface)
  return interface_;
}
inline void WorkflowTemplate::set_allocated_interface(::flyteidl::core::TypedInterface* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.interface)
}

// repeated .flyteidl.core.Node nodes = 4;
inline int WorkflowTemplate::nodes_size() const {
  return nodes_.size();
}
inline void WorkflowTemplate::clear_nodes() {
  nodes_.Clear();
}
inline const ::flyteidl::core::Node& WorkflowTemplate::nodes(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Get(index);
}
inline ::flyteidl::core::Node* WorkflowTemplate::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Mutable(index);
}
inline ::flyteidl::core::Node* WorkflowTemplate::add_nodes() {
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >*
WorkflowTemplate::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowTemplate.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >&
WorkflowTemplate::nodes() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_;
}

// repeated .flyteidl.core.Binding outputs = 5;
inline int WorkflowTemplate::outputs_size() const {
  return outputs_.size();
}
inline const ::flyteidl::core::Binding& WorkflowTemplate::outputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Get(index);
}
inline ::flyteidl::core::Binding* WorkflowTemplate::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Mutable(index);
}
inline ::flyteidl::core::Binding* WorkflowTemplate::add_outputs() {
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
WorkflowTemplate::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowTemplate.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
WorkflowTemplate::outputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_;
}

// .flyteidl.core.Node failure_node = 6;
inline bool WorkflowTemplate::has_failure_node() const {
  return this != internal_default_instance() && failure_node_ != NULL;
}
inline void WorkflowTemplate::clear_failure_node() {
  if (GetArenaNoVirtual() == NULL && failure_node_ != NULL) {
    delete failure_node_;
  }
  failure_node_ = NULL;
}
inline const ::flyteidl::core::Node& WorkflowTemplate::failure_node() const {
  const ::flyteidl::core::Node* p = failure_node_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.failure_node)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Node*>(
      &::flyteidl::core::_Node_default_instance_);
}
inline ::flyteidl::core::Node* WorkflowTemplate::release_failure_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.failure_node)
  
  ::flyteidl::core::Node* temp = failure_node_;
  failure_node_ = NULL;
  return temp;
}
inline ::flyteidl::core::Node* WorkflowTemplate::mutable_failure_node() {
  
  if (failure_node_ == NULL) {
    failure_node_ = new ::flyteidl::core::Node;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.failure_node)
  return failure_node_;
}
inline void WorkflowTemplate::set_allocated_failure_node(::flyteidl::core::Node* failure_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete failure_node_;
  }
  if (failure_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      failure_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure_node, submessage_arena);
    }
    
  } else {
    
  }
  failure_node_ = failure_node;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.failure_node)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fcore_2fworkflow_2eproto__INCLUDED
