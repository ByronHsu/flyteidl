// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sidecar.proto

#ifndef PROTOBUF_flyteidl_2fplugins_2fsidecar_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fplugins_2fsidecar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "k8s.io/api/core/v1/generated.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fplugins_2fsidecar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSidecarJobImpl();
void InitDefaultsSidecarJob();
inline void InitDefaults() {
  InitDefaultsSidecarJob();
}
}  // namespace protobuf_flyteidl_2fplugins_2fsidecar_2eproto
namespace flyteidl {
namespace plugins {
class SidecarJob;
class SidecarJobDefaultTypeInternal;
extern SidecarJobDefaultTypeInternal _SidecarJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace flyteidl {
namespace plugins {

// ===================================================================

class SidecarJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.SidecarJob) */ {
 public:
  SidecarJob();
  virtual ~SidecarJob();

  SidecarJob(const SidecarJob& from);

  inline SidecarJob& operator=(const SidecarJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SidecarJob(SidecarJob&& from) noexcept
    : SidecarJob() {
    *this = ::std::move(from);
  }

  inline SidecarJob& operator=(SidecarJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SidecarJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SidecarJob* internal_default_instance() {
    return reinterpret_cast<const SidecarJob*>(
               &_SidecarJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SidecarJob* other);
  friend void swap(SidecarJob& a, SidecarJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SidecarJob* New() const PROTOBUF_FINAL { return New(NULL); }

  SidecarJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SidecarJob& from);
  void MergeFrom(const SidecarJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SidecarJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string primary_container_name = 2;
  void clear_primary_container_name();
  static const int kPrimaryContainerNameFieldNumber = 2;
  const ::std::string& primary_container_name() const;
  void set_primary_container_name(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_container_name(::std::string&& value);
  #endif
  void set_primary_container_name(const char* value);
  void set_primary_container_name(const char* value, size_t size);
  ::std::string* mutable_primary_container_name();
  ::std::string* release_primary_container_name();
  void set_allocated_primary_container_name(::std::string* primary_container_name);

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  bool has_pod_spec() const;
  void clear_pod_spec();
  static const int kPodSpecFieldNumber = 1;
  const ::k8s::io::api::core::v1::PodSpec& pod_spec() const;
  ::k8s::io::api::core::v1::PodSpec* release_pod_spec();
  ::k8s::io::api::core::v1::PodSpec* mutable_pod_spec();
  void set_allocated_pod_spec(::k8s::io::api::core::v1::PodSpec* pod_spec);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.SidecarJob)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr primary_container_name_;
  ::k8s::io::api::core::v1::PodSpec* pod_spec_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::InitDefaultsSidecarJobImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SidecarJob

// .k8s.io.api.core.v1.PodSpec pod_spec = 1;
inline bool SidecarJob::has_pod_spec() const {
  return this != internal_default_instance() && pod_spec_ != NULL;
}
inline const ::k8s::io::api::core::v1::PodSpec& SidecarJob::pod_spec() const {
  const ::k8s::io::api::core::v1::PodSpec* p = pod_spec_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.SidecarJob.pod_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::k8s::io::api::core::v1::PodSpec*>(
      &::k8s::io::api::core::v1::_PodSpec_default_instance_);
}
inline ::k8s::io::api::core::v1::PodSpec* SidecarJob::release_pod_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.SidecarJob.pod_spec)
  
  ::k8s::io::api::core::v1::PodSpec* temp = pod_spec_;
  pod_spec_ = NULL;
  return temp;
}
inline ::k8s::io::api::core::v1::PodSpec* SidecarJob::mutable_pod_spec() {
  
  if (pod_spec_ == NULL) {
    pod_spec_ = new ::k8s::io::api::core::v1::PodSpec;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.SidecarJob.pod_spec)
  return pod_spec_;
}
inline void SidecarJob::set_allocated_pod_spec(::k8s::io::api::core::v1::PodSpec* pod_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pod_spec_);
  }
  if (pod_spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pod_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pod_spec, submessage_arena);
    }
    
  } else {
    
  }
  pod_spec_ = pod_spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.SidecarJob.pod_spec)
}

// string primary_container_name = 2;
inline void SidecarJob::clear_primary_container_name() {
  primary_container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SidecarJob::primary_container_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.SidecarJob.primary_container_name)
  return primary_container_name_.GetNoArena();
}
inline void SidecarJob::set_primary_container_name(const ::std::string& value) {
  
  primary_container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.SidecarJob.primary_container_name)
}
#if LANG_CXX11
inline void SidecarJob::set_primary_container_name(::std::string&& value) {
  
  primary_container_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.SidecarJob.primary_container_name)
}
#endif
inline void SidecarJob::set_primary_container_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.SidecarJob.primary_container_name)
}
inline void SidecarJob::set_primary_container_name(const char* value, size_t size) {
  
  primary_container_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.SidecarJob.primary_container_name)
}
inline ::std::string* SidecarJob::mutable_primary_container_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.SidecarJob.primary_container_name)
  return primary_container_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SidecarJob::release_primary_container_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.SidecarJob.primary_container_name)
  
  return primary_container_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SidecarJob::set_allocated_primary_container_name(::std::string* primary_container_name) {
  if (primary_container_name != NULL) {
    
  } else {
    
  }
  primary_container_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_container_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.SidecarJob.primary_container_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fplugins_2fsidecar_2eproto__INCLUDED
