// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/waitable.proto

#include "flyteidl/plugins/waitable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace plugins {
class WaitableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Waitable>
      _instance;
} _Waitable_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace protobuf_flyteidl_2fplugins_2fwaitable_2eproto {
void InitDefaultsWaitableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fcore_2fidentifier_2eproto::InitDefaultsWorkflowExecutionIdentifier();
  {
    void* ptr = &::flyteidl::plugins::_Waitable_default_instance_;
    new (ptr) ::flyteidl::plugins::Waitable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::Waitable::InitAsDefaultInstance();
}

void InitDefaultsWaitable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWaitableImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::Waitable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::Waitable, wf_exec_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::Waitable, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::Waitable, workflow_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::Waitable)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_Waitable_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/plugins/waitable.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037flyteidl/plugins/waitable.proto\022\020flyte"
      "idl.plugins\032\035flyteidl/core/execution.pro"
      "to\032\036flyteidl/core/identifier.proto\"\226\001\n\010W"
      "aitable\022>\n\nwf_exec_id\030\001 \001(\0132*.flyteidl.c"
      "ore.WorkflowExecutionIdentifier\0225\n\005phase"
      "\030\002 \001(\0162&.flyteidl.core.WorkflowExecution"
      ".Phase\022\023\n\013workflow_id\030\003 \001(\tB5Z3github.co"
      "m/lyft/flyteidl/gen/pb-go/flyteidl/plugi"
      "nsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/plugins/waitable.proto", &protobuf_RegisterTypes);
  ::protobuf_flyteidl_2fcore_2fexecution_2eproto::AddDescriptors();
  ::protobuf_flyteidl_2fcore_2fidentifier_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fplugins_2fwaitable_2eproto
namespace flyteidl {
namespace plugins {

// ===================================================================

void Waitable::InitAsDefaultInstance() {
  ::flyteidl::plugins::_Waitable_default_instance_._instance.get_mutable()->wf_exec_id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
void Waitable::clear_wf_exec_id() {
  if (GetArenaNoVirtual() == NULL && wf_exec_id_ != NULL) {
    delete wf_exec_id_;
  }
  wf_exec_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Waitable::kWfExecIdFieldNumber;
const int Waitable::kPhaseFieldNumber;
const int Waitable::kWorkflowIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Waitable::Waitable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fwaitable_2eproto::InitDefaultsWaitable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.Waitable)
}
Waitable::Waitable(const Waitable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.workflow_id().size() > 0) {
    workflow_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_wf_exec_id()) {
    wf_exec_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.wf_exec_id_);
  } else {
    wf_exec_id_ = NULL;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.Waitable)
}

void Waitable::SharedCtor() {
  workflow_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wf_exec_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&wf_exec_id_)) + sizeof(phase_));
  _cached_size_ = 0;
}

Waitable::~Waitable() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.Waitable)
  SharedDtor();
}

void Waitable::SharedDtor() {
  workflow_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wf_exec_id_;
}

void Waitable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waitable::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fwaitable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fwaitable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Waitable& Waitable::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fwaitable_2eproto::InitDefaultsWaitable();
  return *internal_default_instance();
}

Waitable* Waitable::New(::google::protobuf::Arena* arena) const {
  Waitable* n = new Waitable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Waitable::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.Waitable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && wf_exec_id_ != NULL) {
    delete wf_exec_id_;
  }
  wf_exec_id_ = NULL;
  phase_ = 0;
  _internal_metadata_.Clear();
}

bool Waitable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.Waitable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wf_exec_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecution.Phase phase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string workflow_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workflow_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->workflow_id().data(), static_cast<int>(this->workflow_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.Waitable.workflow_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.Waitable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.Waitable)
  return false;
#undef DO_
}

void Waitable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.Waitable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1;
  if (this->has_wf_exec_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wf_exec_id_, output);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 2;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->phase(), output);
  }

  // string workflow_id = 3;
  if (this->workflow_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow_id().data(), static_cast<int>(this->workflow_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.Waitable.workflow_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->workflow_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.Waitable)
}

::google::protobuf::uint8* Waitable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.Waitable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1;
  if (this->has_wf_exec_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->wf_exec_id_, deterministic, target);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 2;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->phase(), target);
  }

  // string workflow_id = 3;
  if (this->workflow_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow_id().data(), static_cast<int>(this->workflow_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.Waitable.workflow_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->workflow_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.Waitable)
  return target;
}

size_t Waitable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.Waitable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string workflow_id = 3;
  if (this->workflow_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->workflow_id());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1;
  if (this->has_wf_exec_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->wf_exec_id_);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 2;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waitable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.Waitable)
  GOOGLE_DCHECK_NE(&from, this);
  const Waitable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Waitable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.Waitable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.Waitable)
    MergeFrom(*source);
  }
}

void Waitable::MergeFrom(const Waitable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.Waitable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workflow_id().size() > 0) {

    workflow_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_id_);
  }
  if (from.has_wf_exec_id()) {
    mutable_wf_exec_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.wf_exec_id());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
}

void Waitable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.Waitable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waitable::CopyFrom(const Waitable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.Waitable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waitable::IsInitialized() const {
  return true;
}

void Waitable::Swap(Waitable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Waitable::InternalSwap(Waitable* other) {
  using std::swap;
  workflow_id_.Swap(&other->workflow_id_);
  swap(wf_exec_id_, other->wf_exec_id_);
  swap(phase_, other->phase_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Waitable::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fwaitable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fwaitable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
