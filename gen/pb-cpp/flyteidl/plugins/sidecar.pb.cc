// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sidecar.proto

#include "flyteidl/plugins/sidecar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace plugins {
class SidecarJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SidecarJob>
      _instance;
} _SidecarJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace protobuf_flyteidl_2fplugins_2fsidecar_2eproto {
void InitDefaultsSidecarJobImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto::InitDefaultsPodSpec();
  {
    void* ptr = &::flyteidl::plugins::_SidecarJob_default_instance_;
    new (ptr) ::flyteidl::plugins::SidecarJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::SidecarJob::InitAsDefaultInstance();
}

void InitDefaultsSidecarJob() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSidecarJobImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, pod_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, primary_container_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::SidecarJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SidecarJob_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/plugins/sidecar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036flyteidl/plugins/sidecar.proto\022\020flytei"
      "dl.plugins\032\"k8s.io/api/core/v1/generated"
      ".proto\"[\n\nSidecarJob\022-\n\010pod_spec\030\001 \001(\0132\033"
      ".k8s.io.api.core.v1.PodSpec\022\036\n\026primary_c"
      "ontainer_name\030\002 \001(\tB5Z3github.com/lyft/f"
      "lyteidl/gen/pb-go/flyteidl/pluginsb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/plugins/sidecar.proto", &protobuf_RegisterTypes);
  ::protobuf_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fplugins_2fsidecar_2eproto
namespace flyteidl {
namespace plugins {

// ===================================================================

void SidecarJob::InitAsDefaultInstance() {
  ::flyteidl::plugins::_SidecarJob_default_instance_._instance.get_mutable()->pod_spec_ = const_cast< ::k8s::io::api::core::v1::PodSpec*>(
      ::k8s::io::api::core::v1::PodSpec::internal_default_instance());
}
void SidecarJob::clear_pod_spec() {
  if (GetArenaNoVirtual() == NULL && pod_spec_ != NULL) {
    delete pod_spec_;
  }
  pod_spec_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SidecarJob::kPodSpecFieldNumber;
const int SidecarJob::kPrimaryContainerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SidecarJob::SidecarJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::InitDefaultsSidecarJob();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.SidecarJob)
}
SidecarJob::SidecarJob(const SidecarJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  primary_container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_container_name().size() > 0) {
    primary_container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_container_name_);
  }
  if (from.has_pod_spec()) {
    pod_spec_ = new ::k8s::io::api::core::v1::PodSpec(*from.pod_spec_);
  } else {
    pod_spec_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.SidecarJob)
}

void SidecarJob::SharedCtor() {
  primary_container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_spec_ = NULL;
  _cached_size_ = 0;
}

SidecarJob::~SidecarJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.SidecarJob)
  SharedDtor();
}

void SidecarJob::SharedDtor() {
  primary_container_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pod_spec_;
}

void SidecarJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SidecarJob::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SidecarJob& SidecarJob::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::InitDefaultsSidecarJob();
  return *internal_default_instance();
}

SidecarJob* SidecarJob::New(::google::protobuf::Arena* arena) const {
  SidecarJob* n = new SidecarJob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SidecarJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.SidecarJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pod_spec_ != NULL) {
    delete pod_spec_;
  }
  pod_spec_ = NULL;
  _internal_metadata_.Clear();
}

bool SidecarJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.SidecarJob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pod_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_container_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_container_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_container_name().data(), static_cast<int>(this->primary_container_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SidecarJob.primary_container_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.SidecarJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.SidecarJob)
  return false;
#undef DO_
}

void SidecarJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.SidecarJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  if (this->has_pod_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pod_spec_, output);
  }

  // string primary_container_name = 2;
  if (this->primary_container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_container_name().data(), static_cast<int>(this->primary_container_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SidecarJob.primary_container_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->primary_container_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.SidecarJob)
}

::google::protobuf::uint8* SidecarJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.SidecarJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  if (this->has_pod_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pod_spec_, deterministic, target);
  }

  // string primary_container_name = 2;
  if (this->primary_container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_container_name().data(), static_cast<int>(this->primary_container_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SidecarJob.primary_container_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primary_container_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.SidecarJob)
  return target;
}

size_t SidecarJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.SidecarJob)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string primary_container_name = 2;
  if (this->primary_container_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_container_name());
  }

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  if (this->has_pod_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pod_spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SidecarJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.SidecarJob)
  GOOGLE_DCHECK_NE(&from, this);
  const SidecarJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SidecarJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.SidecarJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.SidecarJob)
    MergeFrom(*source);
  }
}

void SidecarJob::MergeFrom(const SidecarJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.SidecarJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.primary_container_name().size() > 0) {

    primary_container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_container_name_);
  }
  if (from.has_pod_spec()) {
    mutable_pod_spec()->::k8s::io::api::core::v1::PodSpec::MergeFrom(from.pod_spec());
  }
}

void SidecarJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.SidecarJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidecarJob::CopyFrom(const SidecarJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.SidecarJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidecarJob::IsInitialized() const {
  return true;
}

void SidecarJob::Swap(SidecarJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SidecarJob::InternalSwap(SidecarJob* other) {
  using std::swap;
  primary_container_name_.Swap(&other->primary_container_name_);
  swap(pod_spec_, other->pod_spec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SidecarJob::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
