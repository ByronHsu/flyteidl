// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/spark.proto

#include "flyteidl/plugins/spark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyteidl {
namespace plugins {
class SparkApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparkApplication>
      _instance;
} _SparkApplication_default_instance_;
class SparkJob_SparkConfEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparkJob_SparkConfEntry_DoNotUse>
      _instance;
} _SparkJob_SparkConfEntry_DoNotUse_default_instance_;
class SparkJob_HadoopConfEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparkJob_HadoopConfEntry_DoNotUse>
      _instance;
} _SparkJob_HadoopConfEntry_DoNotUse_default_instance_;
class SparkJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparkJob>
      _instance;
} _SparkJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace protobuf_flyteidl_2fplugins_2fspark_2eproto {
void InitDefaultsSparkApplicationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::plugins::_SparkApplication_default_instance_;
    new (ptr) ::flyteidl::plugins::SparkApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::SparkApplication::InitAsDefaultInstance();
}

void InitDefaultsSparkApplication() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparkApplicationImpl);
}

void InitDefaultsSparkJob_SparkConfEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::plugins::_SparkJob_SparkConfEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse();
  }
  ::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSparkJob_SparkConfEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparkJob_SparkConfEntry_DoNotUseImpl);
}

void InitDefaultsSparkJob_HadoopConfEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyteidl::plugins::_SparkJob_HadoopConfEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse();
  }
  ::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSparkJob_HadoopConfEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparkJob_HadoopConfEntry_DoNotUseImpl);
}

void InitDefaultsSparkJobImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_flyteidl_2fplugins_2fspark_2eproto::InitDefaultsSparkJob_SparkConfEntry_DoNotUse();
  protobuf_flyteidl_2fplugins_2fspark_2eproto::InitDefaultsSparkJob_HadoopConfEntry_DoNotUse();
  {
    void* ptr = &::flyteidl::plugins::_SparkJob_default_instance_;
    new (ptr) ::flyteidl::plugins::SparkJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::SparkJob::InitAsDefaultInstance();
}

void InitDefaultsSparkJob() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSparkJobImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, applicationtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, mainapplicationfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, mainclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, sparkconf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, hadoopconf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyteidl::plugins::SparkJob, executorpath_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::SparkApplication)},
  { 5, 12, sizeof(::flyteidl::plugins::SparkJob_SparkConfEntry_DoNotUse)},
  { 14, 21, sizeof(::flyteidl::plugins::SparkJob_HadoopConfEntry_DoNotUse)},
  { 23, -1, sizeof(::flyteidl::plugins::SparkJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SparkApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SparkJob_SparkConfEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SparkJob_HadoopConfEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SparkJob_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flyteidl/plugins/spark.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034flyteidl/plugins/spark.proto\022\020flyteidl"
      ".plugins\"B\n\020SparkApplication\".\n\004Type\022\n\n\006"
      "PYTHON\020\000\022\010\n\004JAVA\020\001\022\t\n\005SCALA\020\002\022\005\n\001R\020\003\"\365\002\n"
      "\010SparkJob\022@\n\017applicationType\030\001 \001(\0162\'.fly"
      "teidl.plugins.SparkApplication.Type\022\033\n\023m"
      "ainApplicationFile\030\002 \001(\t\022\021\n\tmainClass\030\003 "
      "\001(\t\022<\n\tsparkConf\030\004 \003(\0132).flyteidl.plugin"
      "s.SparkJob.SparkConfEntry\022>\n\nhadoopConf\030"
      "\005 \003(\0132*.flyteidl.plugins.SparkJob.Hadoop"
      "ConfEntry\022\024\n\014executorPath\030\006 \001(\t\0320\n\016Spark"
      "ConfEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
      "\001\0321\n\017HadoopConfEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001B5Z3github.com/lyft/flyteidl"
      "/gen/pb-go/flyteidl/pluginsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 555);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flyteidl/plugins/spark.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flyteidl_2fplugins_2fspark_2eproto
namespace flyteidl {
namespace plugins {
const ::google::protobuf::EnumDescriptor* SparkApplication_Type_descriptor() {
  protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_enum_descriptors[0];
}
bool SparkApplication_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SparkApplication_Type SparkApplication::PYTHON;
const SparkApplication_Type SparkApplication::JAVA;
const SparkApplication_Type SparkApplication::SCALA;
const SparkApplication_Type SparkApplication::R;
const SparkApplication_Type SparkApplication::Type_MIN;
const SparkApplication_Type SparkApplication::Type_MAX;
const int SparkApplication::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SparkApplication::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparkApplication::SparkApplication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fspark_2eproto::InitDefaultsSparkApplication();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.SparkApplication)
}
SparkApplication::SparkApplication(const SparkApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.SparkApplication)
}

void SparkApplication::SharedCtor() {
  _cached_size_ = 0;
}

SparkApplication::~SparkApplication() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.SparkApplication)
  SharedDtor();
}

void SparkApplication::SharedDtor() {
}

void SparkApplication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparkApplication::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparkApplication& SparkApplication::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fspark_2eproto::InitDefaultsSparkApplication();
  return *internal_default_instance();
}

SparkApplication* SparkApplication::New(::google::protobuf::Arena* arena) const {
  SparkApplication* n = new SparkApplication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparkApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.SparkApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SparkApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.SparkApplication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.SparkApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.SparkApplication)
  return false;
#undef DO_
}

void SparkApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.SparkApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.SparkApplication)
}

::google::protobuf::uint8* SparkApplication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.SparkApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.SparkApplication)
  return target;
}

size_t SparkApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.SparkApplication)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparkApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.SparkApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const SparkApplication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparkApplication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.SparkApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.SparkApplication)
    MergeFrom(*source);
  }
}

void SparkApplication::MergeFrom(const SparkApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.SparkApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SparkApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.SparkApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparkApplication::CopyFrom(const SparkApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.SparkApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparkApplication::IsInitialized() const {
  return true;
}

void SparkApplication::Swap(SparkApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparkApplication::InternalSwap(SparkApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparkApplication::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SparkJob_SparkConfEntry_DoNotUse::SparkJob_SparkConfEntry_DoNotUse() {}
SparkJob_SparkConfEntry_DoNotUse::SparkJob_SparkConfEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SparkJob_SparkConfEntry_DoNotUse::MergeFrom(const SparkJob_SparkConfEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SparkJob_SparkConfEntry_DoNotUse::GetMetadata() const {
  ::protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_metadata[1];
}
void SparkJob_SparkConfEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SparkJob_HadoopConfEntry_DoNotUse::SparkJob_HadoopConfEntry_DoNotUse() {}
SparkJob_HadoopConfEntry_DoNotUse::SparkJob_HadoopConfEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SparkJob_HadoopConfEntry_DoNotUse::MergeFrom(const SparkJob_HadoopConfEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SparkJob_HadoopConfEntry_DoNotUse::GetMetadata() const {
  ::protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_metadata[2];
}
void SparkJob_HadoopConfEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SparkJob::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparkJob::kApplicationTypeFieldNumber;
const int SparkJob::kMainApplicationFileFieldNumber;
const int SparkJob::kMainClassFieldNumber;
const int SparkJob::kSparkConfFieldNumber;
const int SparkJob::kHadoopConfFieldNumber;
const int SparkJob::kExecutorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparkJob::SparkJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_flyteidl_2fplugins_2fspark_2eproto::InitDefaultsSparkJob();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.SparkJob)
}
SparkJob::SparkJob(const SparkJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sparkconf_.MergeFrom(from.sparkconf_);
  hadoopconf_.MergeFrom(from.hadoopconf_);
  mainapplicationfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mainapplicationfile().size() > 0) {
    mainapplicationfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainapplicationfile_);
  }
  mainclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mainclass().size() > 0) {
    mainclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainclass_);
  }
  executorpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.executorpath().size() > 0) {
    executorpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executorpath_);
  }
  applicationtype_ = from.applicationtype_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.SparkJob)
}

void SparkJob::SharedCtor() {
  mainapplicationfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executorpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationtype_ = 0;
  _cached_size_ = 0;
}

SparkJob::~SparkJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.SparkJob)
  SharedDtor();
}

void SparkJob::SharedDtor() {
  mainapplicationfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executorpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SparkJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparkJob::descriptor() {
  ::protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparkJob& SparkJob::default_instance() {
  ::protobuf_flyteidl_2fplugins_2fspark_2eproto::InitDefaultsSparkJob();
  return *internal_default_instance();
}

SparkJob* SparkJob::New(::google::protobuf::Arena* arena) const {
  SparkJob* n = new SparkJob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparkJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.SparkJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sparkconf_.Clear();
  hadoopconf_.Clear();
  mainapplicationfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executorpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationtype_ = 0;
  _internal_metadata_.Clear();
}

bool SparkJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.SparkJob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.plugins.SparkApplication.Type applicationType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applicationtype(static_cast< ::flyteidl::plugins::SparkApplication_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mainApplicationFile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainapplicationfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mainapplicationfile().data(), static_cast<int>(this->mainapplicationfile().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.mainApplicationFile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mainClass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainclass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mainclass().data(), static_cast<int>(this->mainclass().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.mainClass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> sparkConf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          SparkJob_SparkConfEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SparkJob_SparkConfEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&sparkconf_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.SparkConfEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.SparkConfEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> hadoopConf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          SparkJob_HadoopConfEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SparkJob_HadoopConfEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&hadoopconf_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.HadoopConfEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.HadoopConfEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string executorPath = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executorpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->executorpath().data(), static_cast<int>(this->executorpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SparkJob.executorPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.SparkJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.SparkJob)
  return false;
#undef DO_
}

void SparkJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.SparkJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.plugins.SparkApplication.Type applicationType = 1;
  if (this->applicationtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->applicationtype(), output);
  }

  // string mainApplicationFile = 2;
  if (this->mainapplicationfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainapplicationfile().data(), static_cast<int>(this->mainapplicationfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SparkJob.mainApplicationFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mainapplicationfile(), output);
  }

  // string mainClass = 3;
  if (this->mainclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainclass().data(), static_cast<int>(this->mainclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SparkJob.mainClass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mainclass(), output);
  }

  // map<string, string> sparkConf = 4;
  if (!this->sparkconf().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.SparkConfEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.SparkConfEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sparkconf().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sparkconf().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->sparkconf().begin();
          it != this->sparkconf().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SparkJob_SparkConfEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sparkconf_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparkJob_SparkConfEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->sparkconf().begin();
          it != this->sparkconf().end(); ++it) {
        entry.reset(sparkconf_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> hadoopConf = 5;
  if (!this->hadoopconf().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.HadoopConfEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.HadoopConfEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->hadoopconf().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hadoopconf().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->hadoopconf().begin();
          it != this->hadoopconf().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SparkJob_HadoopConfEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hadoopconf_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparkJob_HadoopConfEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->hadoopconf().begin();
          it != this->hadoopconf().end(); ++it) {
        entry.reset(hadoopconf_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string executorPath = 6;
  if (this->executorpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->executorpath().data(), static_cast<int>(this->executorpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SparkJob.executorPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->executorpath(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.SparkJob)
}

::google::protobuf::uint8* SparkJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.SparkJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.plugins.SparkApplication.Type applicationType = 1;
  if (this->applicationtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->applicationtype(), target);
  }

  // string mainApplicationFile = 2;
  if (this->mainapplicationfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainapplicationfile().data(), static_cast<int>(this->mainapplicationfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SparkJob.mainApplicationFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mainapplicationfile(), target);
  }

  // string mainClass = 3;
  if (this->mainclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainclass().data(), static_cast<int>(this->mainclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SparkJob.mainClass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mainclass(), target);
  }

  // map<string, string> sparkConf = 4;
  if (!this->sparkconf().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.SparkConfEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.SparkConfEntry.value");
      }
    };

    if (deterministic &&
        this->sparkconf().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sparkconf().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->sparkconf().begin();
          it != this->sparkconf().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SparkJob_SparkConfEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sparkconf_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparkJob_SparkConfEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->sparkconf().begin();
          it != this->sparkconf().end(); ++it) {
        entry.reset(sparkconf_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> hadoopConf = 5;
  if (!this->hadoopconf().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.HadoopConfEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SparkJob.HadoopConfEntry.value");
      }
    };

    if (deterministic &&
        this->hadoopconf().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hadoopconf().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->hadoopconf().begin();
          it != this->hadoopconf().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SparkJob_HadoopConfEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hadoopconf_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparkJob_HadoopConfEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->hadoopconf().begin();
          it != this->hadoopconf().end(); ++it) {
        entry.reset(hadoopconf_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string executorPath = 6;
  if (this->executorpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->executorpath().data(), static_cast<int>(this->executorpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SparkJob.executorPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->executorpath(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.SparkJob)
  return target;
}

size_t SparkJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.SparkJob)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> sparkConf = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sparkconf_size());
  {
    ::google::protobuf::scoped_ptr<SparkJob_SparkConfEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->sparkconf().begin();
        it != this->sparkconf().end(); ++it) {
      entry.reset(sparkconf_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> hadoopConf = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hadoopconf_size());
  {
    ::google::protobuf::scoped_ptr<SparkJob_HadoopConfEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->hadoopconf().begin();
        it != this->hadoopconf().end(); ++it) {
      entry.reset(hadoopconf_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string mainApplicationFile = 2;
  if (this->mainapplicationfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mainapplicationfile());
  }

  // string mainClass = 3;
  if (this->mainclass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mainclass());
  }

  // string executorPath = 6;
  if (this->executorpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->executorpath());
  }

  // .flyteidl.plugins.SparkApplication.Type applicationType = 1;
  if (this->applicationtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applicationtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparkJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.SparkJob)
  GOOGLE_DCHECK_NE(&from, this);
  const SparkJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparkJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.SparkJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.SparkJob)
    MergeFrom(*source);
  }
}

void SparkJob::MergeFrom(const SparkJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.SparkJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sparkconf_.MergeFrom(from.sparkconf_);
  hadoopconf_.MergeFrom(from.hadoopconf_);
  if (from.mainapplicationfile().size() > 0) {

    mainapplicationfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainapplicationfile_);
  }
  if (from.mainclass().size() > 0) {

    mainclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainclass_);
  }
  if (from.executorpath().size() > 0) {

    executorpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executorpath_);
  }
  if (from.applicationtype() != 0) {
    set_applicationtype(from.applicationtype());
  }
}

void SparkJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.SparkJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparkJob::CopyFrom(const SparkJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.SparkJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparkJob::IsInitialized() const {
  return true;
}

void SparkJob::Swap(SparkJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparkJob::InternalSwap(SparkJob* other) {
  using std::swap;
  sparkconf_.Swap(&other->sparkconf_);
  hadoopconf_.Swap(&other->hadoopconf_);
  mainapplicationfile_.Swap(&other->mainapplicationfile_);
  mainclass_.Swap(&other->mainclass_);
  executorpath_.Swap(&other->executorpath_);
  swap(applicationtype_, other->applicationtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparkJob::GetMetadata() const {
  protobuf_flyteidl_2fplugins_2fspark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flyteidl_2fplugins_2fspark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)
